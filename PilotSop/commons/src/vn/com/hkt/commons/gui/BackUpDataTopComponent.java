/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.commons.gui;

import com.vn.hkt.core.Account;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import vn.com.hkt.Account.api.IAccount;
import vn.com.hkt.basic.api.IDepartmentBN;
import vn.com.hkt.basic.api.IEnterpriseBN;
import vn.com.hkt.basic.api.IPersonBN;
import vn.com.hkt.commons.api.IBaseData;
import vn.com.hkt.pilot.entities.Department;
import vn.com.hkt.pilot.entities.Enterprise;
import vn.com.hkt.pilot.entities.Person;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.commons.gui//BackUpData//EN",
autostore = false)
@TopComponent.Description(preferredID = "BackUpDataTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.commons.gui.BackUpDataTopComponent")
@ActionReference(path = "Menu/File" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_BackUpDataAction",
preferredID = "BackUpDataTopComponent")
public final class BackUpDataTopComponent extends TopComponent {

    private IBaseData dataAPI;
    private IAccount accountAPI;
    private IPersonBN personAPI;
    private IEnterpriseBN enterpriseAPI;
    private IDepartmentBN departmentAPI;

    public BackUpDataTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(BackUpDataTopComponent.class, "CTL_BackUpDataTopComponent"));
        setToolTipText(NbBundle.getMessage(BackUpDataTopComponent.class, "HINT_BackUpDataTopComponent"));
        this.dataAPI = Lookup.getDefault().lookup(IBaseData.class);
        this.accountAPI = Lookup.getDefault().lookup(IAccount.class);
        this.personAPI = Lookup.getDefault().lookup(IPersonBN.class);
        this.enterpriseAPI = Lookup.getDefault().lookup(IEnterpriseBN.class);
        this.departmentAPI = Lookup.getDefault().lookup(IDepartmentBN.class);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ckbProduct = new javax.swing.JCheckBox();
        ckbPerson = new javax.swing.JCheckBox();
        ckbOperation = new javax.swing.JCheckBox();
        ckbAccount = new javax.swing.JCheckBox();
        ckbDepartment = new javax.swing.JCheckBox();
        ckbEnterprise = new javax.swing.JCheckBox();
        btnBackup = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(ckbProduct, org.openide.util.NbBundle.getMessage(BackUpDataTopComponent.class, "BackUpDataTopComponent.ckbProduct.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ckbPerson, org.openide.util.NbBundle.getMessage(BackUpDataTopComponent.class, "BackUpDataTopComponent.ckbPerson.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ckbOperation, org.openide.util.NbBundle.getMessage(BackUpDataTopComponent.class, "BackUpDataTopComponent.ckbOperation.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ckbAccount, org.openide.util.NbBundle.getMessage(BackUpDataTopComponent.class, "BackUpDataTopComponent.ckbAccount.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ckbDepartment, org.openide.util.NbBundle.getMessage(BackUpDataTopComponent.class, "BackUpDataTopComponent.ckbDepartment.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ckbEnterprise, org.openide.util.NbBundle.getMessage(BackUpDataTopComponent.class, "BackUpDataTopComponent.ckbEnterprise.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnBackup, org.openide.util.NbBundle.getMessage(BackUpDataTopComponent.class, "BackUpDataTopComponent.btnBackup.text")); // NOI18N
        btnBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckbAccount)
                            .addComponent(ckbDepartment)
                            .addComponent(ckbEnterprise))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckbProduct)
                            .addComponent(ckbPerson)
                            .addComponent(ckbOperation)))
                    .addComponent(btnBackup))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ckbOperation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckbPerson)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckbProduct))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ckbAccount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckbDepartment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckbEnterprise)))
                .addGap(18, 18, 18)
                .addComponent(btnBackup)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backUpAccount() {
        List<Account> list = new ArrayList<Account>();
        list = accountAPI.getAllAccount();
        for (int i = 0; i < list.size(); i++) {
            dataAPI.insertAccountIntoXML(
                    list.get(i).getUsername(),
                    list.get(i).getPassword(),
                    list.get(i).getPersonID(),
                    list.get(i).getDepartmentID());
        }
    }

    private void backUpPerson() {
        List<Person> list = new ArrayList<Person>();
        list = personAPI.getAllPerson();
        for (int i = 0; i < list.size(); i++) {
            dataAPI.insertPersonIntoXML(
                    list.get(i).getPersonID(),
                    list.get(i).getFirstName(),
                    list.get(i).getLastName(),
                    list.get(i).getEnterpriseID(),
                    list.get(i).getDepartmentName(),
                    list.get(i).getPosition());
        }
    }

    private void backUpEnterprise() {
        String str = "";
        List<Enterprise> list = new ArrayList<Enterprise>();
        list = enterpriseAPI.getAllEnterprise();
        for (int i = 0; i < list.size(); i++) {
            byte[] b = {};
            Arrays.equals(b, list.get(i).getPicture());
            str.equals(dataAPI.convertImageFromByteToString(b));
            dataAPI.backUptEnterpriseIntoXML(
                    list.get(i).getEnterpriseID(),
                    list.get(i).getEnterpriseName(),
                    list.get(i).getDirector(),
                    list.get(i).getEnterpriseParent(),
                    str,
                    list.get(i).getSlogan());
        }
    }

    private void backUpDepartment() {
        List<Department> list = new ArrayList<Department>();
        list = departmentAPI.getAllDepartment();
        for (int i = 0; i < list.size(); i++) {
            dataAPI.insertDepartmentIntoXML(
                    list.get(i).getDepartmentID(),
                    list.get(i).getDepartmentName(),
                    list.get(i).getEnterpriseID(),
                    list.get(i).getPersonID(),
                    list.get(i).getDepartmentParent());
        }
    }

private void btnBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackupActionPerformed
// TODO add your handling code here:    
    dataAPI.createXMLFile();
    if (ckbAccount.isSelected()) {
        backUpAccount();
    }
    if (ckbPerson.isSelected()) {
        backUpPerson();
    }
    if (ckbEnterprise.isSelected()) {
        backUpEnterprise();
    }
    if (ckbDepartment.isSelected()) {
        backUpDepartment();
    }
}//GEN-LAST:event_btnBackupActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackup;
    private javax.swing.JCheckBox ckbAccount;
    private javax.swing.JCheckBox ckbDepartment;
    private javax.swing.JCheckBox ckbEnterprise;
    private javax.swing.JCheckBox ckbOperation;
    private javax.swing.JCheckBox ckbPerson;
    private javax.swing.JCheckBox ckbProduct;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
