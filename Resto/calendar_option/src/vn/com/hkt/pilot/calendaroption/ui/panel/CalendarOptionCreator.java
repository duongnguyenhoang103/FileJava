/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CalendarOptionCreator.java
 *
 * Created on Feb 21, 2012, 9:01:21 AM
 */
package vn.com.hkt.pilot.calendaroption.ui.panel;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collections;
import javax.swing.ButtonGroup;
import javax.swing.JPanel;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import org.openide.util.lookup.ServiceProviders;
import org.openide.windows.WindowManager;
import vn.com.hkt.pilot.calendaroption.Installer;
import vn.com.hkt.pilot.calendaroption.api.ICalendarOptionCreator;
import vn.com.hkt.pilot.calendaroption.entity.SaleOffOptionLookup;
import vn.com.hkt.pilot.calendaroption.ui.api.ICalendarOptionPanel;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;

/**
 *
 * @author khangpn
 */
@ServiceProviders(
        value={
        @ServiceProvider(service=ICalendarOptionCreator.class),
        @ServiceProvider(service=ICalendarOptionPanel.class)
        })
public class CalendarOptionCreator extends javax.swing.JPanel implements ActionListener, ICalendarOptionPanel,
ICalendarOptionCreator,IUserInterface{

    private ButtonGroup buttonGroup;
    private Lookup lookup;
    private InstanceContent content = new InstanceContent();
    private boolean allowEnable = false;
    private SaleOffOptionLookup saleOffOptionLookup;
    
    private DailyPanel dailyPanel = new DailyPanel();
    private WeeklyPanel weeklyPanel = new WeeklyPanel();
    private MonthlyPanel monthlyPanel = new MonthlyPanel();
    private YearlyPanel yearlyPanel = new YearlyPanel();
    

    /** Creates new form CalendarOptionCreator */
    public CalendarOptionCreator() {
        initComponents();

        checkEnable();

        buttonGroup = new ButtonGroup();

        chkEnableOption.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                checkEnable();
            }
        });
        rdoDaily.addActionListener(this);
        rdoMonthly.addActionListener(this);
        rdoWeekly.addActionListener(this);
        rdoYearly.addActionListener(this);
        
        btnOk.addActionListener(this);
        btnUndo.addActionListener(this);

        buttonGroup.add(rdoDaily);
        buttonGroup.add(rdoMonthly);
        buttonGroup.add(rdoWeekly);
        buttonGroup.add(rdoYearly);

        lookup = new AbstractLookup(content);
    }

    protected void checkEnable() {
        if (chkEnableOption.isSelected()) {
            allowEnable = true;
            panelAllOption.setVisible(allowEnable);
            panelOptionDetail.setVisible(allowEnable);
        } else {
            allowEnable = false;
            panelAllOption.setVisible(allowEnable);
            panelOptionDetail.setVisible(allowEnable);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        chkEnableOption = new javax.swing.JCheckBox();
        panelAllOption = new javax.swing.JPanel();
        rdoDaily = new javax.swing.JRadioButton();
        rdoWeekly = new javax.swing.JRadioButton();
        rdoMonthly = new javax.swing.JRadioButton();
        rdoYearly = new javax.swing.JRadioButton();
        panelOptionDetail = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnUndo = new javax.swing.JButton();

        panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.panel.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 102, 255))); // NOI18N

        chkEnableOption.setText(org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.chkEnableOption.text")); // NOI18N

        panelAllOption.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.panelAllOption.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP)); // NOI18N

        rdoDaily.setText(org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.rdoDaily.text")); // NOI18N

        rdoWeekly.setText(org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.rdoWeekly.text")); // NOI18N

        rdoMonthly.setText(org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.rdoMonthly.text")); // NOI18N

        rdoYearly.setText(org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.rdoYearly.text")); // NOI18N

        javax.swing.GroupLayout panelAllOptionLayout = new javax.swing.GroupLayout(panelAllOption);
        panelAllOption.setLayout(panelAllOptionLayout);
        panelAllOptionLayout.setHorizontalGroup(
            panelAllOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllOptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAllOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoWeekly)
                    .addComponent(rdoMonthly)
                    .addComponent(rdoDaily)
                    .addComponent(rdoYearly))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        panelAllOptionLayout.setVerticalGroup(
            panelAllOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllOptionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoDaily)
                .addGap(18, 18, 18)
                .addComponent(rdoWeekly)
                .addGap(18, 18, 18)
                .addComponent(rdoMonthly)
                .addGap(18, 18, 18)
                .addComponent(rdoYearly)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelOptionDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.panelOptionDetail.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP)); // NOI18N

        javax.swing.GroupLayout panelOptionDetailLayout = new javax.swing.GroupLayout(panelOptionDetail);
        panelOptionDetail.setLayout(panelOptionDetailLayout);
        panelOptionDetailLayout.setHorizontalGroup(
            panelOptionDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );
        panelOptionDetailLayout.setVerticalGroup(
            panelOptionDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(chkEnableOption))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelAllOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(panelOptionDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(chkEnableOption)
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelOptionDetail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelAllOption, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btnOk.setText(org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.btnOk.text")); // NOI18N

        btnUndo.setText(org.openide.util.NbBundle.getMessage(CalendarOptionCreator.class, "CalendarOptionCreator.btnUndo.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(370, Short.MAX_VALUE)
                .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUndo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnUndo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnUndo;
    private javax.swing.JCheckBox chkEnableOption;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panelAllOption;
    private javax.swing.JPanel panelOptionDetail;
    private javax.swing.JRadioButton rdoDaily;
    private javax.swing.JRadioButton rdoMonthly;
    private javax.swing.JRadioButton rdoWeekly;
    private javax.swing.JRadioButton rdoYearly;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == rdoDaily) {
            panelOptionDetail.setLayout(new FlowLayout(FlowLayout.LEFT));
            panelOptionDetail.removeAll();
            panelOptionDetail.add(dailyPanel);
            panelOptionDetail.repaint();
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").close();
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").open();
        }
        if (e.getSource() == rdoWeekly) {
            panelOptionDetail.setLayout(new FlowLayout(FlowLayout.LEFT));
            panelOptionDetail.removeAll();
            panelOptionDetail.add(weeklyPanel);
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").close();
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").open();
        }
        if (e.getSource() == rdoMonthly) {
            panelOptionDetail.setLayout(new FlowLayout(FlowLayout.LEFT));
            panelOptionDetail.removeAll();
            panelOptionDetail.add(monthlyPanel);
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").close();
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").open();
        }
        if (e.getSource() == rdoYearly) {
            panelOptionDetail.setLayout(new FlowLayout(FlowLayout.LEFT));
            panelOptionDetail.removeAll();
            panelOptionDetail.add(yearlyPanel);
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").close();
            WindowManager.getDefault().findTopComponent("CalendarOptionCreatorTopComponent").open();
        }
        if(e.getSource()==btnOk){
            if(chkEnableOption.isSelected()){
                if(rdoDaily.isSelected()){
                    int dailyId = Integer.parseInt(dailyPanel.getSprEvery().getValue().toString());
                    int weeklyId = 0;
                    int monthlyId = 0;
                    int yearlyId = 0;
                    saleOffOptionLookup = new SaleOffOptionLookup();
                    saleOffOptionLookup.setDailyID(dailyId);
                    saleOffOptionLookup.setIsDaily(true);
                    saleOffOptionLookup.setIsMonthly(false);
                    saleOffOptionLookup.setIsWeekly(false);
                    saleOffOptionLookup.setWeeklyID(weeklyId);
                    saleOffOptionLookup.setMonthlyID(monthlyId);
                    saleOffOptionLookup.setYearlyID(yearlyId);
                    
                    content.set(Collections.singleton(saleOffOptionLookup), null);
                }
            }
        }
        
    }

    @Override
    public JPanel getCalendarOptionPanel() {
        return this;
    }

    @Override
    public Lookup getCalendarOptionLookup() {
        return lookup;
    }

    @Override
    public void saveCalendarOption() {
        //TODO
    }

    @Override
    public JPanel getCalendarOptionCreator() {
        return this;
    }

    @Override
    public double getLevel() {
        return 5.1;
    }

    @Override
    public Lookup getCalendarOptionLookupCreator() {
        return lookup;
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện tạo thời gian lặp đối với các chương trình khuyến mãi";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }
    
}
