/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OPerationCalculatorPanel.java
 *
 * Created on Mar 10, 2012, 12:18:51 AM
 */
package vn.com.hkt.pilot.promotion.ui.panel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IOperationBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.entities.Operation;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.operation.viewer.api.IOperationExtCreater;
import vn.com.hkt.pilot.promotion.Installer;
import vn.com.hkt.pilot.promotion.panel.api.IOperationSalePanel;
import vn.com.hkt.pilot.promotion.temp.object.FloatObject;
import vn.com.hkt.pilot.promotion.ui.cell.OperationCalculatorCell;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 *
 * @author khangutc
 */
@ServiceProvider(service = IOperationExtCreater.class)
public class OPerationCalculatorPanel extends javax.swing.JPanel implements IOperationExtCreater,
        IResetFontSize, LookupListener, IUserInterface, ISaveExtention {

    private Lookup lookup;
    private InstanceContent content = new InstanceContent();
    private IOperationSalePanel operationSalePanels;
    Lookup.Result<FloatObject> results = null;
    private ISystemSotfwareBN sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();
    private int size;
    private String font;
    private BigDecimal sumPriceTemp, totalPriceTemp, payTemp, realTax;
    /**
     * @sumPrice: Tong tien, @totalPrice: Tong cong khach phai tra, @returnPrice: Tien tra lai
     * @realValuePromotion: Tong tien CK, @valueOftax: Gia tri thue, @percentOftax: % thue
     * @onLoanPrice: tien no, @payedPrice: tien khach da thanh toan,@realValue: Tong tien thuc te sau khi tru KM
     */
    private float sumPrice = 0, totalPrice = 0, returnPrice = 0, realValuePromotion = 0,
            realValue = 0, valueOfTax = 0, percentOfTax = 0, onLoanPrice = 0, payedPrice = 0;
    private int saleOffPercent = 0, saleOffValue = 0;
    private OperationCalculatorCell operationCalculatorCell;
    private int operationIdActual = 0;
    private IOperationBN operationBN;

    /** Creates new form OPerationCalculatorPanel */
    public OPerationCalculatorPanel() {
        initComponents();

        operationSalePanels = Lookup.getDefault().lookup(IOperationSalePanel.class);
        results = operationSalePanels.getLookup().lookupResult(FloatObject.class);
        results.addLookupListener(this);

        lookup = new AbstractLookup(content);
        operationBN = Lookup.getDefault().lookup(IOperationBN.class);

        operationCalculatorCell = new OperationCalculatorCell(this);
        tblOperationCalculator.getColumnModel().getColumn(1).setCellEditor(operationCalculatorCell);
        tblOperationCalculator.getColumnModel().getColumn(3).setCellEditor(operationCalculatorCell);
        tblOperationCalculator.setRowHeight(26);
        tblOperationCalculator.setTableHeader(null);
        resetColorRowTable();
        panelTong.removeAll();
        panelTong.setBackground(new Color(242, 241, 240));
        panelTong.setLayout(new BorderLayout());

        panelTong.add(tblOperationCalculator, BorderLayout.NORTH);
        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(jPanel1, BorderLayout.CENTER);
        this.setBackground(new Color(242, 241, 240));
        JLabel label = new JLabel("    ");
        label.setBackground(new Color(242, 241, 240));
        label.setFont((new Font(" ", Font.BOLD, 14)));
        label.setPreferredSize(new Dimension(WIDTH, 30));
        this.add(label, BorderLayout.NORTH);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTong = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOperationCalculator = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(634, 165));

        jPanel1.setPreferredSize(new java.awt.Dimension(827, 165));

        panelTong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTong.setPreferredSize(new java.awt.Dimension(827, 165));

        tblOperationCalculator.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{
                {"Tổng tiền", " ", "", " "},
                {"Tổng % C/K", " ", "Giá trị CK", " "},
                {"Loại thuế", " ", "Tiền thuế", " "},
                {"Tổng cộng", " ", "Thanh toán", " "},
                {"Tiền trả lại", " ", "Tiền nợ", " "}
            },
            new String[]{
                "", "", "", ""
            }) {

                boolean[] canEdit = new boolean[]{
                    false, true, false, true
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    if ((columnIndex == 0) || (columnIndex == 2)||(columnIndex==3 && rowIndex==0)) {
                        return false;
                    }
                    return true;
                }
            });
            jScrollPane1.setViewportView(tblOperationCalculator);

            javax.swing.GroupLayout panelTongLayout = new javax.swing.GroupLayout(panelTong);
            panelTong.setLayout(panelTongLayout);
            panelTongLayout.setHorizontalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTongLayout.createSequentialGroup()
                    .addContainerGap(228, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );
            panelTongLayout.setVerticalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTongLayout.createSequentialGroup()
                    .addContainerGap(22, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap(295, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
            );
        }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelTong;
    private javax.swing.JTable tblOperationCalculator;
    // End of variables declaration//GEN-END:variables

    @Override
    public double getLevelNumber() {
        return 5.01;
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tblOperationCalculator.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tblOperationCalculator.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();

        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tblOperationCalculator, colorL, null, colorD, null);
        tblOperationCalculator.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tblOperationCalculator.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tblOperationCalculator.setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tblOperationCalculator.setForeground(color);
        tblOperationCalculator.repaint();
    }

    @Override
    public void resetColorTitle() {
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tblOperationCalculator.setSelectionBackground(color);
        tblOperationCalculator.repaint();
    }

    @Override
    public String toString() {
        return "Tổng thanh toán";
    }

    public int getSaleOffPercent() {
        return saleOffPercent;
    }

    public void setSaleOffPercent(int saleOffPercent) {
        this.saleOffPercent = saleOffPercent;
    }

    public float getRealValue() {
        return realValuePromotion;
    }

    public void setRealValue(float realValue) {
        this.realValuePromotion = realValue;
    }

    public int getSaleOffValue() {
        return saleOffValue;
    }

    public void setSaleOffValue(int saleOffValue) {
        this.saleOffValue = saleOffValue;
    }

    public float getSumPrice() {
        return sumPrice;
    }

    public void setSumPrice(float sumPrice) {
        this.sumPrice = sumPrice;
    }

    public float getPercentOfTax() {
        return percentOfTax;
    }

    public void setPercentOfTax(float percentOfTax) {
        this.percentOfTax = percentOfTax;
    }

    public float getOnLoanPrice() {
        return onLoanPrice;
    }

    public void setOnLoanPrice(float onLoanPrice) {
        this.onLoanPrice = onLoanPrice;
    }

    public float getReturnPrice() {
        return returnPrice;
    }

    public void setReturnPrice(float returnPrice) {
        this.returnPrice = returnPrice;
    }

    public float getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(float totalPrice) {
        this.totalPrice = totalPrice;
    }

    public JTable getTblOperationCalculator() {
        return tblOperationCalculator;
    }

    public void setTblOperationCalculator(JTable tblOperationCalculator) {
        this.tblOperationCalculator = tblOperationCalculator;
    }

    /**
     * Hàm tính tổng tiền thưc tế
     * Tổng tiền thực tế = Tổng tiền - Chiết khấu
     * @param a=Tổng tiền
     * @param b=Chiết khấu
     * @return a-b
     */
    public float realTotalPrice(float a, float b) {
        return a - b;
    }

    /**
     * Hàm tính Tiền thuế
     * Tổng tiền thực tế = Tổng tiền - Chiết khấu
     * @param a = Tổng tiền thực tế
     * @param b = Giá trị % của loại thuế
     * @return a*b
     */
    public float calculateKindOfTax(float a, float b) {
        return a * b / 100;
    }

    /**
     * Tổng tiền khách phải trả
     * Tổng tiền thực tế = Tổng tiền - Chiết khấu
     * Tiền thuế = Hàm tính Tiền thuế
     * @param a = Tổng tiền thực tế
     * @param b = Tiền thuế
     * @return a+b
     */
    public float calculateTotalPrice(float a, float b) {
        return a + b;
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result<FloatObject> r = (Lookup.Result<FloatObject>) le.getSource();
        Collection<? extends FloatObject> floats = r.allInstances();
        if (!floats.isEmpty()) {
            for (FloatObject f : floats) {
                operationCalculatorCell.fillCombo();
                setSumPrice(f.getSum());
                sumPriceTemp = new BigDecimal(sumPrice);
                tblOperationCalculator.setValueAt(sumPriceTemp.toEngineeringString(),
                        0, 1);
                totalPrice = calculateTotalPrice(sumPrice, valueOfTax);
                totalPriceTemp = new BigDecimal(totalPrice);
                tblOperationCalculator.setValueAt(totalPriceTemp.toEngineeringString(),
                        3, 1);
                operationCalculatorCell.calculateValueSaleOff();
                autoFitSaleOff();
            }
        }
    }

    public void autoFitSaleOff() {
        /**
         * Tổng tiền sau khi trừ CK
         */
        realValue = realTotalPrice(sumPrice, realValuePromotion);
        /**
         * Giá trị thuế
         */
        valueOfTax = calculateKindOfTax(realValue, percentOfTax);
        /**
         * Tổng tiền khách phải trả
         */
        totalPrice = calculateTotalPrice(realValue, valueOfTax);
        realTax = new BigDecimal(valueOfTax);
        payTemp = new BigDecimal(totalPrice);
        String strValueOfTax = realTax.toEngineeringString();
        String strResult = payTemp.toEngineeringString();
        tblOperationCalculator.setValueAt(strResult, 3, 1);
        tblOperationCalculator.setValueAt(strValueOfTax, 2, 3);
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện tính toán nghiệp vụ";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public JPanel getOperationExtCreater() {
        return this;
    }

    @Override
    public Lookup getOperationExtCreaterLookup() {
        return lookup;
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tblOperationCalculator);
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        operationIdActual = entity.getId();
    }

    protected IEntity insertToOperation() {
        Operation operation = null;
        if (operationIdActual != 0) {
            operation = operationBN.getById(operationIdActual);
            if (operation != null) {
                operation.setSaleoffValue(saleOffPercent);
                operation.setSaleoffRealValue(saleOffValue);
                operation.setSumPrice(totalPrice);// Tong tien luu tren HD
                operation.setSaleoffValue(percentOfTax); // % thue
                operation.setTypeOfTaxes(valueOfTax); // Tien thuế
                operation.setChangedMoney(getReturnPrice()); // Tien tra lai
                operation.setPayment(payedPrice);
                operation.setDebt(getOnLoanPrice());
                operationBN.update(operation);
            }
        }
        return operation;
    }

    @Override
    public IEntity save() {
        return insertToOperation();
    }

    @Override
    public void reset() {
        int rows = tblOperationCalculator.getRowCount();
        int columns = tblOperationCalculator.getColumnCount();
        int i, j;
        for (j = 0; j < columns; j++) {
            for (i = 0; i < rows; i++) {
                if (j != 0 && j != 2) {
                    tblOperationCalculator.getModel().setValueAt(" ", i, j);
                }
            }
        }
        operationCalculatorCell = new OperationCalculatorCell(this);
        tblOperationCalculator.getColumnModel().getColumn(1).setCellEditor(operationCalculatorCell);
        tblOperationCalculator.getColumnModel().getColumn(3).setCellEditor(operationCalculatorCell);

        sumPrice = 0;
        totalPrice = 0;
        returnPrice = 0;
        realValuePromotion = 0;
        realValue = 0;
        valueOfTax = 0;
        percentOfTax = 0;
        onLoanPrice = 0;
        payedPrice = 0;

        saleOffPercent = 0;
        saleOffValue = 0;
    }
}
