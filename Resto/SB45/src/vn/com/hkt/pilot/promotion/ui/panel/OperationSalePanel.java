/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OperationSB51Panel.java
 *
 * Created on Mar 1, 2012, 1:39:58 PM
 */
package vn.com.hkt.pilot.promotion.ui.panel;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import org.openide.util.lookup.ServiceProviders;
import vn.com.hkt.basic.api.IOperationBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.entities.Operation;
import vn.com.hkt.pilot.entities.OperationDetail;
import vn.com.hkt.pilot.entities.Product;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.operation.viewer.api.IOperationCreater;
import vn.com.hkt.pilot.operation.viewer.api.IOperationExtCreater;
import vn.com.hkt.pilot.promotion.Installer;
import vn.com.hkt.pilot.promotion.panel.api.IOperationSalePanel;
import vn.com.hkt.pilot.promotion.ui.cell.OperationSaleProductCell;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 *
 * @author khangpn
 */
@ServiceProviders(value = {
    @ServiceProvider(service = IOperationExtCreater.class),
    @ServiceProvider(service = IOperationSalePanel.class)
})
public class OperationSalePanel extends javax.swing.JPanel implements
        IOperationExtCreater, IResetFontSize, ActionListener,
        IOperationSalePanel, IUserInterface, ISaveExtention {

    private Lookup lookup;
    private InstanceContent content = new InstanceContent();
    private DefaultTableModel tableModel;
    private OperationSaleProductCell operationSaleProductCell;
    private ISystemSotfwareBN sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();
    private int size;
    private String font;
    private int operationIdActual = 0;
    private IOperationCreater operationCreater;
    private IOperationBN operationBN;

    /** Creates new form OperationSB51Panel */
    public OperationSalePanel() {
        initComponents();

        operationBN = Lookup.getDefault().lookup(IOperationBN.class);
        operationCreater = Lookup.getDefault().lookup(IOperationCreater.class);
        if (operationCreater != null) {
            //result = operationCreater.getOperationLookup().lookupResult(Operation.class);
            //result.addLookupListener(this);
        }

        lookup = new AbstractLookup(content);

        tblOperationSale.removeAll();
        tblOperationSale.invalidate();

        String[] header = {"STT", "Mã SPDV", "Tên SPDV", "Số lượng", "Đơn giá",
            "Chiết khấu/KM", "Thành tiền", "Ghi chú"};
        tableModel = new DefaultTableModel(header, 0);
        fillTable();
        operationSaleProductCell = new OperationSaleProductCell(this);
        tblOperationSale.setModel(tableModel);
        tblOperationSale.setRowHeight(26);
        tblOperationSale.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                int n = tblOperationSale.getRowCount();
                if (tblOperationSale.getSelectedRow() == (n - 1)) {
                    String[] rowTemp = {String.valueOf(n + 1), " ", " ", " ", " ", " ", " ", " "};
                    tableModel.addRow(rowTemp);
                    tblOperationSale.repaint();
                }
            }
        });
        tblOperationSale.getColumnModel().getColumn(4).setCellEditor(operationSaleProductCell);
        tblOperationSale.getColumnModel().getColumn(5).setCellEditor(operationSaleProductCell);
        tblOperationSale.getColumnModel().getColumn(1).setCellEditor(operationSaleProductCell);
        tblOperationSale.getColumnModel().getColumn(3).setCellEditor(operationSaleProductCell);

        resetColorRowTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblOperationSale = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(845, 132));

        tblOperationSale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã SPDV", "Tên SPDV", "Số lượng", "Đơn giá", "Chiết khấu/KM", "Thành tiền", "Ghi chú"
            }
        ));
        jScrollPane1.setViewportView(tblOperationSale);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblOperationSale;
    // End of variables declaration//GEN-END:variables

    public void fillTable() {
        int i = 0;
        for (i = 0; i < 8; i++) {
            int n = i + 1;
            String[] rowStart = {String.valueOf(n), " ", " ", " ", " ", " ", " ", " "};
            tableModel.addRow(rowStart);
        }
    }

    public InstanceContent getContent() {
        return content;
    }

    public void setContent(InstanceContent content) {
        this.content = content;
    }

    @Override
    public double getLevelNumber() {
        return 5.0;
    }

    @Override
    public String toString() {
        return "List Product";
    }

    public DefaultTableModel getTableModel() {
        return tableModel;
    }

    public void setTableModel(DefaultTableModel tableModel) {
        this.tableModel = tableModel;
    }

    public JTable getTblOperationSale() {
        return tblOperationSale;
    }

    public void setTblOperationSale(JTable tblOperationSale) {
        this.tblOperationSale = tblOperationSale;
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tblOperationSale.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tblOperationSale.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tblOperationSale, colorL, null, colorD, null);
        tblOperationSale.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tblOperationSale.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tblOperationSale.setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tblOperationSale.setForeground(color);
        tblOperationSale.repaint();
    }

    @Override
    public void resetColorTitle() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
        tblOperationSale.getTableHeader().setForeground(color);
        tblOperationSale.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tblOperationSale.setSelectionBackground(color);
        tblOperationSale.repaint();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //if (e.getSource() == btnOk) {
        int i;
        String productId = "", productName = "", number = "", priceUnit = "",
                promotion = "", total = "", note = "";
        for (i = 0; i < tblOperationSale.getRowCount(); i++) {
            if (tblOperationSale.getValueAt(i, 1) != null) {
                try {
                    productId = tblOperationSale.getValueAt(i, 1).toString();
                } catch (Exception e1) {
                    productId = " ";
                }
                try {
                    productName = tblOperationSale.getValueAt(i, 2).toString();
                } catch (Exception e1) {
                    productName = " ";
                }
                try {
                    number = tblOperationSale.getValueAt(i, 3).toString();
                } catch (Exception e1) {
                    number = " ";
                }
                try {
                    priceUnit = tblOperationSale.getValueAt(i, 4).toString();
                } catch (Exception e1) {
                    priceUnit = " ";
                }
                try {
                    promotion = tblOperationSale.getValueAt(i, 5).toString();
                } catch (Exception e1) {
                    promotion = " ";
                }
                try {
                    total = tblOperationSale.getValueAt(i, 6).toString();
                } catch (Exception e1) {
                    total = " ";
                }
                try {
                    note = tblOperationSale.getValueAt(i, 7).toString();
                } catch (Exception e1) {
                    note = " ";
                }
            }
            JOptionPane.showMessageDialog(null, total);
        }
    }
    // }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện giảm giá đối với nghiệp vụ kinh doanh";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public JPanel getOperationExtCreater() {
        this.revalidate();
        this.repaint();
        operationSaleProductCell.refreshCombo();
        tblOperationSale.revalidate();
        tblOperationSale.repaint();
        return this;
    }

    @Override
    public Lookup getOperationExtCreaterLookup() {
        return lookup;
    }

    public IEntity insertOperationDetail() {
        int rowCount = tblOperationSale.getRowCount();
        int i;
        OperationDetail operationDetail = null;
        if (operationIdActual > 0) {
            Operation operation = operationBN.getById(operationIdActual);
            for (i = 0; i < rowCount; i++) {
                if (tblOperationSale.getValueAt(i, 1).toString().trim().length() != 0) {
                    operationDetail = new OperationDetail();
                    Product product = new Product();
                    int quantity = 0;
                    float price = 0;
                    String id = "0";
                    try{
                        id = tblOperationSale.getValueAt(i, 1).toString().trim();
                    }catch(NullPointerException exception){
                        id = "0";
                    }
                    product = (Product) product.getAccessDataOfEntity().getByObjectId(id);
                    int productId = product.getId();
                    String strQuantity = tblOperationSale.getValueAt(i, 3).toString();
                    // bat su kien null
                    String strPrice = "0";
                    try {
                        strPrice = tblOperationSale.getValueAt(i, 4).toString();
                    } catch (NullPointerException exception) {
                        strPrice = "0";
                    }
                    if (strQuantity.trim().length() != 0) {
                        quantity = Integer.parseInt(strQuantity);
                    }
                    if (strPrice.trim().length() != 0) {
                        price = Float.parseFloat(strPrice);
                    }
                    operationDetail.setOperationIdActual(operation.getId());
                    operationDetail.setPrice(price);
                    operationDetail.setProductIdActual(productId);
                    operationDetail.setQuantity(quantity);
                    operationDetail.getAccessDataOfEntity().insert(operationDetail);
                }
            }
        }
        return operationDetail;
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tblOperationSale);
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        operationIdActual = entity.getId();
    }

    @Override
    public IEntity save() {
        return insertOperationDetail();
    }

    @Override
    public void reset() {
        operationSaleProductCell.reset();
        int n = tableModel.getRowCount();
        while (n > 0) {
            tableModel.removeRow(n - 1);
            n--;
        }
        fillTable();
    }
}
