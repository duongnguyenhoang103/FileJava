/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.pilot.backup.manager.gui;

import javax.swing.JOptionPane;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import vn.com.hkt.pilot.backup.manager.BackupExcel;
import vn.com.hkt.pilot.backup.manager.BackupSQL;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.pilot.backup.manager.gui//BackupManager//EN",
autostore = false)
@TopComponent.Description(preferredID = "BackupManagerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.pilot.backup.manager.gui.BackupManagerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_BackupManagerAction",
preferredID = "BackupManagerTopComponent")
public final class BackupManagerTopComponent extends TopComponent {

    private int backupType = 0;

    public BackupManagerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(BackupManagerTopComponent.class, "CTL_BackupManagerTopComponent"));
        setToolTipText(NbBundle.getMessage(BackupManagerTopComponent.class, "HINT_BackupManagerTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        chbSQL = new javax.swing.JCheckBox();
        chbXLS = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(BackupManagerTopComponent.class, "BackupManagerTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(BackupManagerTopComponent.class, "BackupManagerTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(chbSQL);
        chbSQL.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chbSQL, org.openide.util.NbBundle.getMessage(BackupManagerTopComponent.class, "BackupManagerTopComponent.chbSQL.text")); // NOI18N
        chbSQL.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbSQLItemStateChanged(evt);
            }
        });

        buttonGroup1.add(chbXLS);
        org.openide.awt.Mnemonics.setLocalizedText(chbXLS, org.openide.util.NbBundle.getMessage(BackupManagerTopComponent.class, "BackupManagerTopComponent.chbXLS.text")); // NOI18N
        chbXLS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbXLSItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(chbSQL))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbXLS)
                    .addComponent(jButton2))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbSQL)
                    .addComponent(chbXLS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(113, 113, 113))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (backupType == 1) {
            BackupExcel be = new BackupExcel();
            JOptionPane.showMessageDialog(null, be.backup());
        } else if (backupType == 0) {
            BackupSQL bs = new BackupSQL();
            bs.backup();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (backupType == 1) {
            BackupExcel be = new BackupExcel();
            JOptionPane.showMessageDialog(null, be.restore());
        } else if (backupType == 0) {
            BackupSQL bs = new BackupSQL();
            bs.restore();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void chbSQLItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbSQLItemStateChanged
        if (chbSQL.isSelected()) {
            backupType = 0;
        }
    }//GEN-LAST:event_chbSQLItemStateChanged

    private void chbXLSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbXLSItemStateChanged
        if (chbXLS.isSelected()) {
            backupType = 1;
        }
    }//GEN-LAST:event_chbXLSItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chbSQL;
    private javax.swing.JCheckBox chbXLS;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
