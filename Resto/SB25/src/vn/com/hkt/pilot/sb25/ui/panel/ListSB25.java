/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListSB25.java
 *
 * Created on Feb 15, 2012, 10:52:45 AM
 */
package vn.com.hkt.pilot.sb25.ui.panel;

import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.basic.toolbar.BasicToolbarManager;
import vn.com.hkt.basic.toolbar.api.system.ISystemToolbar;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.person.viewer.api.IPersonExtViewer;
import vn.com.hkt.pilot.report.api.IReportListGUI;
import vn.com.hkt.pilot.report.api.IReportManager;
import vn.com.hkt.pilot.sb25.Installer;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IPersonExtViewer.class)
public class ListSB25 extends javax.swing.JPanel implements IPersonExtViewer,
        IResetFontSize, IUserInterface,IReportListGUI {

    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();

    /** Creates new form ListSB25 */
    public ListSB25() {
        initComponents();
        tableSB25.setSelectionBackground(new Color(192, 210, 224));
        StripedTableCellRenderer.installInColumn(tableSB25, new Color(220, 228, 231), null, new Color(235, 239, 242), null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableSB25 = new javax.swing.JTable();

        tableSB25.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã", "Ảnh", "Họ tên", "Học hàm", "Học vị", "Xếp hạng lợi nhuận", "Xếp hạng doanh thu", "Chỉ số tiềm năng", "Đánh giá chung"
            }
        ));
        jScrollPane1.setViewportView(tableSB25);
        tableSB25.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title0")); // NOI18N
        tableSB25.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title1")); // NOI18N
        tableSB25.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title2")); // NOI18N
        tableSB25.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title3")); // NOI18N
        tableSB25.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title4")); // NOI18N
        tableSB25.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title5")); // NOI18N
        tableSB25.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title6")); // NOI18N
        tableSB25.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title7")); // NOI18N
        tableSB25.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(ListSB25.class, "ListSB25.tableSB25.columnModel.title8")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableSB25;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getPersonExtViewer() {
        return this;
    }

    @Override
    public String toString() {
        return "Phân tích";
    }

    @Override
    public Lookup getPersonExtViewerLookup() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public double getLevelNumber() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableSB25.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableSB25.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableSB25, colorL, null, colorD, null);
        tableSB25.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableSB25.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableSB25.setFont(new Font(font, 0, size));
        
    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB25.setForeground(color);
        tableSB25.repaint();
    }

    @Override
    public void resetColorTitle() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
        tableSB25.getTableHeader().setForeground(color);
        tableSB25.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableSB25.setSelectionBackground(color);
        tableSB25.repaint();
    }

    @Override
    public JTable getTable() {
        return tableSB25;
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện danh sách đánh giá cá nhân";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }
//
//    @Override
//    public void filterTable(JTable table, DefaultTableModel tableModel) {
//        tableRowSorter = new TableRowSorter<TableModel>(tableModel);
//        table.setRowSorter(tableRowSorter);
//    }
//
//    @Override
//    public void filterTable(String stringKey, int column) {
//        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + stringKey, column));
//        tableRowSorter.setSortKeys(null);
//    }

    @Override
    public Hashtable getTableHeader() {
        Hashtable hashtable = new Hashtable();
        int n = getTable().getColumnCount();
        int i;
        for (i = 0; i < n; i++) {
            hashtable.put(i, getTable().getColumnName(i).toString());
        }

        return hashtable;
    }

    @Override
    public void exportReport() {
        IReportManager reportManager = Lookup.getDefault().lookup(IReportManager.class);

        if (reportManager
                == null) {
            return;
        }
        String[] keys1 = {"prTenDoanhNghiep", "prDiaChi", "prTenBaoCao", "prNgayLap","prNguoiLapBaoCao"};
        String[] values1 = {"HKT Consultant", "66 Trần Thái Tông Hà Nội", "", "16/03/2012","Đồng Thị Tâm"};
        String keys2[] = new String[getTable().getColumnCount()];
        String values2[] = new String[getTable().getColumnCount()];
        for (int i = 0; i < getTable().getColumnCount(); i++) {
            keys2[i] = "prColumn_" + i;
            values2[i] = getTable().getColumnName(i).toString();
        }
        String[] keys = new String[keys1.length + keys2.length];
        String[] values = new String[values1.length + values2.length];
        System.arraycopy(keys1, 0, keys, 0, keys1.length);
        System.arraycopy(keys2, 0, keys, keys1.length, keys2.length);
        System.arraycopy(values1, 0, values, 0, values1.length);
        System.arraycopy(values2, 0, values, values1.length, values2.length);
        HashMap map = reportManager.getHashMap(keys, values);
        DefaultTableModel md = reportManager.getModel(getTable());
        reportManager.setReportManager(map, md);
        reportManager.exportReport();
    }
}
