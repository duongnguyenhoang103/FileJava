/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExtensionEnterprisePanel.java
 *
 * Created on Dec 21, 2011, 4:35:59 PM
 */
package vn.com.hkt.pilot.subenterprise13.ui.panel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IEnterpriseBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.enterprise.viewer.api.HelpTutorialEnterprise;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnterpriseExtCreator;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.enterprise.viewer.api.ResetCookie;
import vn.com.hkt.pilot.entities.Enterprise;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.subenterprise13.Installer;
import vn.com.hkt.pilot.subenterprise13.dao.SubEnterprise13BN;
import vn.com.hkt.pilot.subenterprise13.entity.SubEnterprise13;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IEnterpriseExtCreator.class)
public class ExtensionEnterpriseSB13Panel extends javax.swing.JPanel implements IEnterpriseExtCreator,
        ISaveExtention, IEnableTable, IResetFontSize, IGetObject, IUserInterface {

    private int idEnterprise = 0;
    private SubEnterprise13BN dao;
    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN;
    private List<SystemSoftware> listS = null;
    ExtEnterpriseSB13Cell cell ;

    /**
     * Creates new form ExtensionEnterprisePanel
     */
    public ExtensionEnterpriseSB13Panel() {
        initComponents();
        dao = new SubEnterprise13BN();
        sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());

        tableSB13.setSelectionBackground(new Color(192, 210, 224));
        StripedTableCellRenderer.installInColumn(tableSB13, colorL, null, colorD, null);
        tableSB13.setForeground(color);
        tableSB13.setTableHeader(null);
        tableSB13.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableSB13.getColumnModel().getColumn(0).setMaxWidth(100);
        tableSB13.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableSB13.getColumnModel().getColumn(2).setMaxWidth(100);
        tableSB13.setRowSelectionAllowed(true);
        tableSB13.setColumnSelectionAllowed(false);

        cell = new ExtEnterpriseSB13Cell();
        tableSB13.getColumnModel().getColumn(1).setCellEditor(cell);
        tableSB13.getColumnModel().getColumn(3).setCellEditor(cell);
        
        panelTong.removeAll();
        panelTong.setBackground(new Color(242, 241, 240));
        panelTong.setLayout(new BorderLayout());

        panelTong.add(tableSB13, BorderLayout.NORTH);
        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(jPanel1, BorderLayout.CENTER);
        this.setBackground(new Color(242, 241, 240));
        JLabel label = new JLabel("          Thông tin quy mô");
        label.setBackground(new Color(242, 241, 240));
        label.setFont((new Font(" ", Font.BOLD, 14)));
        label.setPreferredSize(new Dimension(WIDTH, 30));
        this.add(label, BorderLayout.NORTH);

        tableSB13.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });

    }

    public JTable getTableDiaChi() {
        return this.tableSB13;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTong = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSB13 = new javax.swing.JTable();

        panelTong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTong.setPreferredSize(new java.awt.Dimension(827, 165));

        tableSB13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Doanh thu", null, "Lợi nhuận", null},
                {"Vốn điều lệ", null, "Vốn pháp định", null},
                {"Số nhân viên", null, "", ""},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (rowIndex == 2) {
                    if (columnIndex == 2 || columnIndex == 3) {
                        return false;
                    }
                }
                return canEdit [columnIndex];
            }
        });
        tableSB13.setRowHeight(26);
        tableSB13.setShowHorizontalLines(false);
        tableSB13.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tableSB13);

        javax.swing.GroupLayout panelTongLayout = new javax.swing.GroupLayout(panelTong);
        panelTong.setLayout(panelTongLayout);
        panelTongLayout.setHorizontalGroup(
            panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTongLayout.createSequentialGroup()
                .addGap(376, 376, 376)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(121, Short.MAX_VALUE))
        );
        panelTongLayout.setVerticalGroup(
            panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTongLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panelTong, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(420, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelTong;
    private javax.swing.JTable tableSB13;
    // End of variables declaration//GEN-END:variables

    @Override
    public String toString() {
        return "Thông tin quy mô";
    }

    @Override
    public JPanel getEnterpriseExtCreator() {
        return this;
    }

    @Override
    public Lookup getEnterpriseExtLookup() {
        return null;
    }

    @Override
    public double getLevelNumber() {
        return 1.3;
    }

    @Override
    public void reset() {
        idEnterprise = 0;
        tableSB13.setValueAt(" ", 0, 1);
        tableSB13.setValueAt(" ", 0, 3);
        tableSB13.setValueAt(" ", 1, 1);
        tableSB13.setValueAt(" ", 1, 3);
        tableSB13.setValueAt(" ", 2, 1);
        tableSB13.setRowHeight(26);
        cell = new ExtEnterpriseSB13Cell();
        tableSB13.getColumnModel().getColumn(1).setCellEditor(cell);
        tableSB13.getColumnModel().getColumn(3).setCellEditor(cell);
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableSB13.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableSB13.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableSB13, colorL, null, colorD, null);
        tableSB13.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableSB13.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableSB13.setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB13.setForeground(color);
        tableSB13.repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        tableSB13.getTableHeader().setForeground(color);
//        tableSB13.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableSB13.setSelectionBackground(color);
        tableSB13.repaint();
    }

    @Override
    public void getObject(String id) {
        IEnterpriseBN enterpriseBN = Lookup.getDefault().lookup(IEnterpriseBN.class);
        Enterprise e = enterpriseBN.getByObjectId(id);
        if (e != null) {
            SubEnterprise13 bean = dao.getByObjectId(String.valueOf(e.getId()));
            tableSB13.setValueAt(bean.getRevenue(), 0, 1);
            tableSB13.setValueAt(bean.getProfit(), 0, 3);
            tableSB13.setValueAt(bean.getCharterCapital(), 1, 1);
            tableSB13.setValueAt(bean.getLegalCapital(), 1, 3);
            tableSB13.setValueAt(bean.getEmployeeNum(), 2, 1);
            ExtEnterpriseSB13Cell enterpriseSB13Cell = new ExtEnterpriseSB13Cell();
            enterpriseSB13Cell.getTxt01().setText("");
            enterpriseSB13Cell.getTxt03().setText("");
            enterpriseSB13Cell.getTxt11().setText("");
            enterpriseSB13Cell.getTxt13().setText("");
            enterpriseSB13Cell.getTxt21().setText("");
            tableSB13.getColumnModel().getColumn(1).setCellEditor(enterpriseSB13Cell);

        }

    }

    private void tableMousePressed(MouseEvent evt) {
        SB13Tutorial sB13Tutorial = new SB13Tutorial();
        JTable table = (JTable) evt.getSource();
        if (table == tableSB13) {
            if (tableSB13.getSelectedRow() != -1) {
                if (tableSB13.getSelectedRow() == 0 && tableSB13.getSelectedColumn() == 1) {
                    addFormEditID(3.01, sB13Tutorial.getTxtDoanhThu().getText());
                }
                if (tableSB13.getSelectedRow() == 0 && tableSB13.getSelectedColumn() == 3) {
                    addFormEditID(3.13, sB13Tutorial.getTxtLoiNhuan().getText());
                }
                if (tableSB13.getSelectedRow() == 1 && tableSB13.getSelectedColumn() == 1) {
                    addFormEditID(3.21, sB13Tutorial.getTxtVonDieuLe().getText());
                }
                if (tableSB13.getSelectedRow() == 1 && tableSB13.getSelectedColumn() == 3) {
                    addFormEditID(3.23, sB13Tutorial.getTxtVonPhapDinh().getText());
                }
                if (tableSB13.getSelectedRow() == 2) {
                    addFormEditID(3.3, sB13Tutorial.getTxtSoNhanVien().getText());
                }
            }
        }        
    }
    
    public void addFormEditID(double i, String str) {
        Collection<? extends HelpTutorialEnterprise> allSave = Lookup.getDefault().lookupAll(HelpTutorialEnterprise.class);
        for (HelpTutorialEnterprise editCookie : allSave) {
            editCookie.getTutorial(i, str);
        }
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện thông tin quy mô doanh nghiệp";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public void enableTable(boolean ok) throws IOException {
        tableSB13.setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tableSB13);
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        idEnterprise=entity.getId();
    }

    @Override
    public IEntity save() {
        int revenue;
        try {
            revenue = Integer.parseInt(tableSB13.getValueAt(0, 1).toString());
        } catch (Exception ex) {
            revenue = 0;
        }
        int profit;
        try {
            profit = Integer.parseInt(tableSB13.getValueAt(0, 3).toString());
        } catch (Exception ex) {
            profit = 0;
        }
        int charterCapital;
        try {
            charterCapital = Integer.parseInt(tableSB13.getValueAt(1, 1).toString());
        } catch (Exception ex) {
            charterCapital = 0;
        }
        int legalCapital;
        try {
            legalCapital = Integer.parseInt(tableSB13.getValueAt(1, 3).toString());
        } catch (Exception ex) {
            legalCapital = 0;
        }
        int employeeNum;
        try {
            employeeNum = Integer.parseInt(tableSB13.getValueAt(2, 1).toString());
        } catch (Exception ex) {
            employeeNum = 0;
        }
        SubEnterprise13 bean;

        if (idEnterprise == 0) {
            return null;
        }
        bean = dao.getByObjectId(String.valueOf(idEnterprise));
        if (bean == null) {
            bean = new SubEnterprise13();
        }
        bean.setEnterpriseIdActual(idEnterprise);

        bean.setRevenue(revenue);
        bean.setProfit(profit);
        bean.setCharterCapital(charterCapital);
        bean.setLegalCapital(legalCapital);
        bean.setEmployeeNum(employeeNum);

        dao.update(bean);
        return bean;

    }
}
