/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.erm.department.ui;

import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import vn.com.hkt.pilot.entities.Department;
import vn.com.hkt.basic.api.IDepartmentBN;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.util.*;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IEnterpriseBN;
import vn.com.hkt.basic.api.IPersonBN;
import vn.com.hkt.basic.api.IProductBN;
import vn.com.hkt.basic.toolbar.BasicToolbarManager;
import vn.com.hkt.pilot.department.viewer.api.CreateKeyDepartment;
import vn.com.hkt.pilot.department.viewer.api.HelpTutorialDepartment;
import vn.com.hkt.pilot.department.viewer.api.IDepartmentCreater;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.entities.Enterprise;
import vn.com.hkt.pilot.entities.Person;
import vn.com.hkt.pilot.entities.Product;
import vn.com.hkt.pilot.enterprise.viewer.api.ResetCookie;
import vn.com.hkt.pilot.entities.KeyGenerate;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.entities.system.dao.SystemSotfwareDAO;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.keymanager.api.CreateKey;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.ui.main.ui.api.creater.ISaveBasic;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.erm.department.ui//Department//EN",
autostore = false)
@TopComponent.Description(preferredID = "DepartmentTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.erm.department.ui.DepartmentTopComponent")
@ActionReference(path = " " /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DepartmentAction",
preferredID = "DepartmentTopComponent")
@ServiceProvider(service = IDepartmentCreater.class)
public final class DepartmentTopComponent extends TopComponent implements IDepartmentCreater,
        ISaveBasic, IEnableTable, CreateKeyDepartment, IResetFontSize, IGetObject {

    private DepartmentPanel departmentPanel = new DepartmentPanel();
    private IDepartmentBN departmentBN;
    private SystemSotfwareDAO sotfwareBN;
    private List<SystemSoftware> listS;
    private int size;
    private String font;
    private String key = null;
    private DepartmentCell departmentCell;
    private Department department = null;
    private DepartmentEditIDPanel editIDPanel = null;
    private CreateKey createKey = null;

    public JPanel getPanelForm() {
        return panelForm;
    }

    public DepartmentTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(DepartmentTopComponent.class, "CTL_DepartmentTopComponent"));
        setToolTipText(NbBundle.getMessage(DepartmentTopComponent.class, "HINT_DepartmentTopComponent"));
        sotfwareBN = new SystemSotfwareDAO();
        listS = new ArrayList<SystemSoftware>();
        departmentPanel = new DepartmentPanel();
        panelForm.setLayout(new GridLayout());
        panelForm.add(departmentPanel);
        departmentCell = departmentPanel.getCell();

        this.departmentBN = Lookup.getDefault().lookup(IDepartmentBN.class);
        departmentPanel.getTableD().addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
    }

    public DepartmentPanel getDepartmentPanel() {
        return departmentPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelForm = new javax.swing.JPanel();

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 968, Short.MAX_VALUE)
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 328, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(53, 53, 53))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelForm;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    // reset lại table mỗi khi save hoặc muốn điền mới
    @Override
    public void reset() {
        department = null;
        Enterprise enterprise1 = BasicToolbarManager.getBasicToolbar().getEnterprise();
        if (enterprise1 != null) {
            departmentCell.resetCombobox(enterprise1);
        }
        departmentPanel.reset();
        departmentPanel.getTableD().getColumnModel().getColumn(0).setPreferredWidth(100);
        departmentPanel.getTableD().getColumnModel().getColumn(0).setMaxWidth(100);
        departmentPanel.getTableD().setRowSelectionAllowed(true);
        departmentPanel.getTableD().setColumnSelectionAllowed(false);
        departmentPanel.getTableD().setSelectionBackground(new Color(192, 210, 224));
        departmentPanel.getTableD().setRowHeight(26);
    }

    @Override
    public IEntity save() {
        Department bean = this.getTable();
        if (departmentPanel.getTableD().getValueAt(0, 1).toString().trim().length() != 0
                && departmentPanel.getTableD().getValueAt(1, 1).toString().trim().length() != 0) {
            departmentBN.update(bean);
        }
        return bean;
    }

    public Department getTable() {

        String id = "";
        String name = "";
        //String phancap = departmentPanel.getTableD().getValueAt(4, 1).toString().trim();
        try {
            id = departmentPanel.getTableD().getValueAt(1, 1).toString().trim();
            name = departmentPanel.getTableD().getValueAt(0, 1).toString().trim();
        } catch (Exception e) {
        }
        int idEnterprise;
        int idPerson;
        int departmentParent;
        int idProduct;
        byte[] logo = departmentPanel.getDataImages();

        if (departmentPanel.getTableD().getValueAt(2, 1) != null) {
            if (departmentPanel.getTableD().getValueAt(2, 1).toString().trim().length() != 0) {
                Enterprise enterprise = (Enterprise) departmentPanel.getTableD().getValueAt(2, 1);
                idEnterprise = enterprise.getId();
            } else {
                idEnterprise = 0;
            }
        } else {
            idEnterprise = 0;
        }


        // Lấy mã và lưu Product xuống csdl
        if (departmentPanel.getTableD().getValueAt(5, 1) != null) {
            if (departmentPanel.getTableD().getValueAt(5, 1).toString().trim().length() != 0) {
                Product product = (Product) departmentPanel.getTableD().getValueAt(5, 1);
                idProduct = product.getId();
            } else {
                idProduct = 0;
            }
        } else {
            idProduct = 0;
        }


        // Lấy mã và lưu Department xuống csdl
        if (departmentPanel.getTableD().getValueAt(3, 1) != null) {
            if (departmentPanel.getTableD().getValueAt(3, 1).toString().trim().length() != 0) {
                Department department = (Department) departmentPanel.getTableD().getValueAt(3, 1);
                departmentParent = department.getId();
            } else {
                departmentParent = 0;
            }
        } else {
            departmentParent = 0;
        }


        // lấy và lưu mã Person xuống csdl 
        if (departmentPanel.getTableD().getValueAt(4, 1) != null) {
            if (departmentPanel.getTableD().getValueAt(4, 1).toString().trim().length() != 0) {
                Person person1 = (Person) departmentPanel.getTableD().getValueAt(4, 1);
                idPerson = person1.getId();
            } else {
                idPerson = 0;
            }

        } else {
            idPerson = 0;
        }

        Department bean = new Department();
        if (department != null) {
            bean = department;
        }
        bean.setDepartmentId(id);
        bean.setDepartmentName(name);
        bean.setEnterpriseIdActual(idEnterprise);
        bean.setPersonIdActual(idPerson);
        bean.setDepartmentParentIdAcutal(departmentParent);
        bean.setProductIdActual(idProduct);
        bean.setPicture(logo);

        return bean;
    }

    @Override
    public JPanel getDepartmentCreater() {
        return this.departmentPanel;
    }

    @Override
    public Lookup getDepartmentLookup() {
        return null;
    }

    @Override
    public double getLevelNumber() {
        return 3.0;
    }

    private void tableMousePressed(MouseEvent evt) {
        DepartmentTutorial departmentTutorial = new DepartmentTutorial();
        JTable table = (JTable) evt.getSource();
        if (table == departmentPanel.getTableD()) {
            if (departmentPanel.getTableD().getSelectedRow() == 1) {
                addFormEditID(0.1, " ");
            }
            if (departmentPanel.getTableD().getSelectedRow() == 0) {
                addFormEditID(0, departmentTutorial.getTxtNameD().getText());
            }
            if (departmentPanel.getTableD().getSelectedRow() == 2) {
                addFormEditID(0.2, departmentTutorial.getTxtEnterprise().getText());
            }
            if (departmentPanel.getTableD().getSelectedRow() == 3) {
                addFormEditID(0.3, departmentTutorial.getTxtDepartmentParent().getText());
            }
            if (departmentPanel.getTableD().getSelectedRow() == 4) {
                addFormEditID(0.4, departmentTutorial.getTxtDirector().getText());
            }
            if (departmentPanel.getTableD().getSelectedRow() == 5) {
                addFormEditID(0.5, departmentTutorial.getTxtSP().getText());
            }
        }


        Collection<? extends ResetCookie> allResetCookie = Lookup.getDefault().lookupAll(ResetCookie.class);
        for (ResetCookie rc : allResetCookie) {
            try {
                rc.resetSelectTable(this.getLevelNumber());
            } catch (IOException ex) {
            }
        }

    }

    private void addFormEditID(double i, String str) {
        Collection<? extends HelpTutorialDepartment> allSave = Lookup.getDefault().lookupAll(HelpTutorialDepartment.class);
        for (HelpTutorialDepartment editCookie : allSave) {
            editCookie.getTutorial(i, str);
        }
    }

    @Override
    public void createKey() {
        createKey = new CreateKey();
        boolean change = false;
        KeyGenerate keyGenerate = null;
        editIDPanel = DepartmentEditIDPanel.getEditIDPanel();
        change = editIDPanel.isGetBoolean();

        List<Department> listD = departmentBN.selectAll();
        for (Department beans : listD) {
            if (key == beans.getDepartmentId()) {
                key = null;
            }
        }
        if (key == null) {
            keyGenerate = new KeyGenerate();
            keyGenerate = createKey.createAKeyByParent(Department.class, editIDPanel.getKeyManager().getLastPrefix());
            key = keyGenerate.toString();
        }
        if (change == true) {
            keyGenerate.setPrefix(editIDPanel.getKeyManager().getLastPrefix());
            keyGenerate.getAccessDataOfEntity().update(keyGenerate);
            key = keyGenerate.toString();
        }

        departmentPanel.getTableD().setValueAt(key, 1, 1);
        departmentCell.getTxtIdD().setText(key);
        departmentPanel.getTableD().getColumnModel().getColumn(1).setCellEditor(departmentCell);
        Enterprise enterprise1 = BasicToolbarManager.getBasicToolbar().getEnterprise();
        if (enterprise1 != null) {
            departmentPanel.getTableD().setValueAt(enterprise1, 2, 1);
            departmentCell.resetCombobox(enterprise1);
            departmentCell.loadCboEnterprise();
        }
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = departmentPanel.getTableD().getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        departmentPanel.getTableD().setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(departmentPanel.getTableD(), colorL, null, colorD, null);
        departmentPanel.getTableD().repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = departmentPanel.getTableD().getFont().getFontName();
        size = listS.get(0).getSizeWord();
        departmentPanel.getTableD().setFont(new Font(font, 0, size));
//        for (int i = 0; i < departmentPanel.getTableD().getRowCount(); i++) {
//            departmentPanel.getTableD().setRowHeight(i, size + 10);
//        }
    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        departmentPanel.getTableD().setForeground(color);
        departmentPanel.getTableD().repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        departmentPanel.getTableD().getTableHeader().setForeground(color);
//        departmentPanel.getTableD().repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        departmentPanel.getTableD().setSelectionBackground(color);
        departmentPanel.getTableD().repaint();
    }

    @Override
    public void getObject(String id) {
        Department d;
        try {
            d = departmentBN.getByObjectId(id);
            if (d == null) {
                return;
            }
            department = d;
        } catch (Exception ex) {
            return;
        }

        try {
            resultEvent(d);
        } catch (Exception ex) {
        }

    }

    private void resultEvent(Department bean) {
        IProductBN productBN = Lookup.getDefault().lookup(IProductBN.class);
        IPersonBN personBN = Lookup.getDefault().lookup(IPersonBN.class);
        IEnterpriseBN enterpriseBN = Lookup.getDefault().lookup(IEnterpriseBN.class);
        Enterprise e = enterpriseBN.getById(bean.getEnterpriseIdActual());
        Department dParent = departmentBN.getById(bean.getDepartmentParentIdAcutal());
        Person p = personBN.getById(bean.getPersonIdActual());
        Product product = productBN.getById(bean.getProductIdActual());
        departmentPanel.getTableD().getModel().setValueAt(bean.getDepartmentName(), 0, 1);
        departmentPanel.getTableD().getModel().setValueAt(bean.getDepartmentId(), 1, 1);
        departmentPanel.getTableD().getModel().setValueAt(e, 2, 1);
        departmentPanel.getTableD().getModel().setValueAt(dParent, 3, 1);
        departmentPanel.getTableD().getModel().setValueAt(p, 4, 1);
        departmentPanel.getTableD().getModel().setValueAt(product, 5, 1);
        departmentPanel.getTableD().getColumnModel().getColumn(1).setCellEditor(new DepartmentCell());
        departmentPanel.setDataImages(bean.getPicture());
        departmentPanel.showImage();
    }

    @Override
    public void enableTable(boolean ok) {
        departmentPanel.getTableD().setEnabled(ok);
        //departmentPanel.getLableImage().setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(departmentPanel.getTableD());
        return lt;
    }
}