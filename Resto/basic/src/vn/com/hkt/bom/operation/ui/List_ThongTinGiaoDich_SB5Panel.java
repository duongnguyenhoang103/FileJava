/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * List_ThongTinGiaoDich_SB5Panel.java
 *
 * Created on Feb 15, 2012, 11:58:07 AM
 */
package vn.com.hkt.bom.operation.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.japura.gui.LinkLabel;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import vn.com.hkt.basic.Installer;
import vn.com.hkt.basic.api.IWidthTableBN;
import vn.com.hkt.basic.toolbar.BasicToolbarManager;
import vn.com.hkt.bom.operation.dao.OperationBN;
import vn.com.hkt.pilot.enterprise.viewer.api.EditCookieList;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableButton;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.enterprise.viewer.api.RemoveCookieOperation;
import vn.com.hkt.pilot.enterprise.viewer.api.ResetCookieList;
import vn.com.hkt.pilot.enterprise.viewer.api.SaveCookieList;
import vn.com.hkt.pilot.enterprise.viewer.api.ViewCookieList;
import vn.com.hkt.pilot.entities.Enterprise;
import vn.com.hkt.pilot.entities.Operation;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.entities.system.dao.SystemSotfwareDAO;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.operation.viewer.api.IGetObjectOperation;
import vn.com.hkt.pilot.operation.viewer.api.IOperationCreater;
import vn.com.hkt.pilot.operation.viewer.api.IOperationExtCreater;
import vn.com.hkt.pilot.operation.viewer.api.IOperationExtViewer;
import vn.com.hkt.pilot.operation.viewer.api.IOperationViewer;
import vn.com.hkt.pilot.report.api.IReportListGUI;
import vn.com.hkt.pilot.report.api.IReportManager;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IOperationViewer.class)
public class List_ThongTinGiaoDich_SB5Panel extends javax.swing.JPanel implements IOperationViewer, IResetFontSize, IUserInterface, MouseMotionListener,
        IReportListGUI, ViewCookieList, EditCookieList, SaveCookieList, RemoveCookieOperation, ResetCookieList {

    private int size;
    private String font;
    private SystemSotfwareDAO sotfwareBN = new SystemSotfwareDAO();
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();
    private DefaultTableModel model;
    private int itsRow = 0;
    private int itsColumn = 0;
    private boolean isEdit = false;

    /**
     * Creates new form List_ThongTinGiaoDich_SB5Panel
     */
    public List_ThongTinGiaoDich_SB5Panel() {
        initComponents();
        tableTTGiaoDich.addMouseMotionListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableTTGiaoDich = new javax.swing.JTable();

        tableTTGiaoDich.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã", "Tên nghiệp vụ", "Khách hàng", "Tổng tiền", "Thuế", "Triết khấu", "Tổng", "Đã thanh toán", "Còn nợ"
            }
        ));
        jScrollPane1.setViewportView(tableTTGiaoDich);
        tableTTGiaoDich.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title0")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title1")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title2")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title3")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title4")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title5")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title6")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title7")); // NOI18N
        tableTTGiaoDich.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(List_ThongTinGiaoDich_SB5Panel.class, "List_ThongTinGiaoDich_SB5Panel.tableTTGiaoDich.columnModel.title8")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTTGiaoDich;
    // End of variables declaration//GEN-END:variables

    @Override
    public String toString() {
        return "Thông tin giao dịch";
    }

    @Override
    public double getLevelNumber() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public JPanel getOperationViewer() {
        return this;
    }

    @Override
    public Lookup getOperationViewerLookup() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableTTGiaoDich.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableTTGiaoDich.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableTTGiaoDich, colorL, null, colorD, null);
        tableTTGiaoDich.repaint();

    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableTTGiaoDich.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableTTGiaoDich.setFont(new Font(font, 0, size));
//        for (int i = 0; i < tableTTGiaoDich.getRowCount(); i++) {
//            tableTTGiaoDich.setRowHeight(i, size + 10);
//        }
    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableTTGiaoDich.setForeground(color);
        tableTTGiaoDich.repaint();
    }

    @Override
    public void resetColorTitle() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
        tableTTGiaoDich.getTableHeader().setForeground(color);
        tableTTGiaoDich.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableTTGiaoDich.setSelectionBackground(color);
        tableTTGiaoDich.repaint();
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện thông tin giao dịch";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

//    @Override
//    public void filterTable(JTable table, DefaultTableModel tableModel) {
//        tableRowSorter = new TableRowSorter<TableModel>(tableModel);
//        table.setRowSorter(tableRowSorter);
//    }
//
//    @Override
//    public void filterTable(String stringKey, int column) {
//        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + stringKey, column));
//        tableRowSorter.setSortKeys(null);
//    }
    @Override
    public Hashtable getTableHeader() {
        Hashtable hashtable = new Hashtable();
        int n = tableTTGiaoDich.getColumnCount();
        int i;
        for (i = 0; i < n; i++) {
            hashtable.put(i, tableTTGiaoDich.getColumnName(i).toString());
        }

        return hashtable;
    }

    @Override
    public void ViewCookieList() {
        if (isEdit == true) {
            loadDataEdit();
        } else {
            loadData();
        }
    }

    protected void setupTable() {
        IWidthTableBN widthTableBN = Lookup.getDefault().lookup(IWidthTableBN.class);
        tableTTGiaoDich.setSelectionBackground(new Color(192, 210, 224));
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableTTGiaoDich, colorL, null, colorD, null);

        int sizeId = widthTableBN.getWidth1();
        //int sizeLogo = widthTableBN.getWidth2();
        int sizeName = widthTableBN.getWidth3();

        tableTTGiaoDich.getColumnModel().getColumn(0).setMaxWidth(sizeId);
        tableTTGiaoDich.getColumnModel().getColumn(0).setPreferredWidth(sizeId);

        tableTTGiaoDich.getColumnModel().getColumn(1).setMaxWidth(sizeName);
        tableTTGiaoDich.getColumnModel().getColumn(1).setPreferredWidth(sizeName);

        tableTTGiaoDich.getColumnModel().getColumn(0).setResizable(false);
        tableTTGiaoDich.getColumnModel().getColumn(1).setResizable(false);
        tableTTGiaoDich.getColumnModel().getColumn(2).setResizable(false);
        tableTTGiaoDich.getColumnModel().getColumn(3).setResizable(false);
        tableTTGiaoDich.getColumnModel().getColumn(4).setResizable(false);
        tableTTGiaoDich.getColumnModel().getColumn(5).setResizable(false);
        tableTTGiaoDich.getColumnModel().getColumn(6).setResizable(false);
        tableTTGiaoDich.getTableHeader().setReorderingAllowed(false);
    }

    @Override
    public void remove() throws IOException {
        int i = tableTTGiaoDich.getSelectedRow(); // chọn hàng để xóa
        if (i >= 0) {
            Enterprise bean = (Enterprise) tableTTGiaoDich.getValueAt(i, 2); // Tìm kiếm Enterprise theo ID
            Collection<? extends RemoveCookieOperation> allRemoveCookie = Lookup.getDefault().lookupAll(RemoveCookieOperation.class);
            for (RemoveCookieOperation r : allRemoveCookie) {
                if (r instanceof IOperationViewer || r instanceof IOperationExtViewer) {
                    r.removeObject(bean.getId());
                }
            }
        }
    }

    @Override
    public void removeObject(int id) throws IOException {
        OperationBN dao = new OperationBN();
        try {
            dao.delete(id);
        } catch (Exception e) {
        }
    }

    public void resetTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        TableCell tableCell = new TableCell(colorL, colorD);
        tableTTGiaoDich.getColumnModel().getColumn(1).setCellRenderer(tableCell);
        tableTTGiaoDich.setRowHeight(26);
    }

    public void resetTableEdit() {
        tableTTGiaoDich.setRowHeight(26);
    }

    private DefaultTableModel getModel() {
        OperationBN dao = new OperationBN();
        String[] header = {"Mã", "Tên nghiệp vụ", "Khách hàng", "Tổng tiền", "Thuế", "Chiết khấu", "Tổng", "Đã thanh toán", "Còn nợ"};
        DefaultTableModel m = new DefaultTableModel(header, 0) {

            boolean[] canEdit = new boolean[]{
                false, false, true, true, true, true, true
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        List<Operation> list = new ArrayList<Operation>();
        Enterprise e = BasicToolbarManager.getBasicToolbar().getEnterprise();
        if (e == null) {
            list = dao.selectAll();
        } else {
            list = dao.select(Operation.FIELD_ENTERPRISE_ID_ACTUAL, String.valueOf(e.getId()));
        }
        for (Operation bean : list) {
            try {
                Object[] rows = {bean.getId(), bean, "KH", bean.getSumPrice(), bean.getTaxesValue(), bean.getSaleoffValue(), bean.getSaleoffRealValue(), bean.getPayment(), bean.getDebt()};
                m.addRow(rows);
            } catch (Exception ex) {
            }
        }

        return m;
    }

    public void loadData() {
        model = this.getModel();
        tableTTGiaoDich.removeAll();
        tableTTGiaoDich.setModel(model);
        resetTable();
        setupTable();
    }

    public void loadDataEdit() {
        model = this.getModel();
        tableTTGiaoDich.removeAll();
        tableTTGiaoDich.setModel(model);
        resetTableEdit();
        setupTable();
    }

    public void saveData() {
        //aaaaaaaaaaaaaaaaaaaaaaaaaa//aaaaaaaaaaaaaaaaaaaaaaaaaa
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        if (isEdit == false) {
            JTable aTable = (JTable) e.getSource();
            itsRow = aTable.rowAtPoint(e.getPoint());
            itsColumn = aTable.columnAtPoint(e.getPoint());
            aTable.repaint();
        }
    }

    @Override
    public void exportReport() {
        IReportManager reportManager = Lookup.getDefault().lookup(IReportManager.class);

        if (reportManager
                == null) {
            return;
        }
        String[] keys1 = {"prTenDoanhNghiep", "prDiaChi", "prTenBaoCao", "prNgayLap", "prNguoiLapBaoCao"};
        String[] values1 = {"Công Ty Cổ Phần Tư Vấn Quản trị HKT", "66 Trần Thái Tông Hà Nội", "Thông Tin Giao Dịch", "16/03/2012", "Đồng Thị Tâm"};
        String keys2[] = new String[tableTTGiaoDich.getColumnCount()];
        String values2[] = new String[tableTTGiaoDich.getColumnCount()];
        for (int i = 0; i < tableTTGiaoDich.getColumnCount(); i++) {
            keys2[i] = "prColumn_" + i;
            values2[i] = tableTTGiaoDich.getColumnName(i).toString();
        }
        String[] keys = new String[keys1.length + keys2.length];
        String[] values = new String[values1.length + values2.length];
        System.arraycopy(keys1, 0, keys, 0, keys1.length);
        System.arraycopy(keys2, 0, keys, keys1.length, keys2.length);
        System.arraycopy(values1, 0, values, 0, values1.length);
        System.arraycopy(values2, 0, values, values1.length, values2.length);
        HashMap map = reportManager.getHashMap(keys, values);
        DefaultTableModel md = reportManager.getModel(tableTTGiaoDich);
        reportManager.setReportManager(map, md);
        reportManager.exportReport();
    }

    @Override
    public void EditCookieList(boolean b) throws IOException {
        isEdit = b;
        if (isEdit == true) {
            loadDataEdit();
        } else {
            loadData();
        }
    }

    @Override
    public void SaveCookieList() throws IOException {
        saveData();
    }

    @Override
    public void resetCookie() throws IOException {
        ViewCookieList();
    }

    public class TableCell extends JLabel implements TableCellRenderer {

        private Color colorL;
        private Color colorD;

        public TableCell(Color colorL, Color colorD) {
            this.colorL = colorL;
            this.colorD = colorD;
            setOpaque(true);
        }
        private LinkLabel label = new LinkLabel();

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

            table.addMouseListener(new java.awt.event.MouseAdapter() {

                @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    mouseEvent(evt);
                }
            });
            if (row == itsRow && column == itsColumn) {
                if (itsColumn == 1) {
                    label.setText(table.getValueAt(itsRow, 1).toString());
                }
                return label;
            } else {
                if (value != null) {
                    this.setText(value.toString());
                } else {
                    this.setText(" ");
                }
                if (row == 0) {
                    this.setBackground(colorL);
                    return this;
                }
                if (row == 1) {
                    this.setBackground(colorD);
                    return this;
                }
                if (row % 2 == 0) {
                    this.setBackground(colorL);
                    return this;
                }
                if (row % 2 != 0) {
                    this.setBackground(colorD);
                    return this;
                }
                return this;
            }
            //
        }
        // Xử lý click đúp lấy dữ liệu từ list sang form nhap

        public void mouseEvent(MouseEvent e) {
            if (isEdit == true) {
                return;
            }
            JTable aTable = (JTable) e.getSource();
            int selct = aTable.getSelectedRow();
            int sectcol = aTable.getSelectedColumn();
            Collection<? extends IGetObjectOperation> saveOperation = Lookup.getDefault().lookupAll(IGetObjectOperation.class);
            if (selct == itsRow && sectcol == 1) {
                if (aTable.getValueAt(selct, sectcol) != null) {
                    try {
                        // Lam sau
                        Operation op = (Operation) aTable.getValueAt(selct, sectcol);
                        openCreatorcomponent("OperationViewerTopComponent", "OperationCreatorTopComponent");
                        for (IGetObjectOperation getObject : saveOperation) {
                            if (getObject instanceof IOperationCreater || getObject instanceof IOperationExtCreater) {
                                getObject.getObject(op.getId());
                            }
                        }
                    } catch (Exception ex) {
                        return;
                    }
                }

            }

            aTable.clearSelection();
        }
    }

    public void openCreatorcomponent(String s1, String s2) {
        TopComponent tc1 = WindowManager.getDefault().findTopComponent(s1);
        if (tc1.isOpened()) {
            tc1.close();
        }
        TopComponent tc = WindowManager.getDefault().findTopComponent(s2);
        if (tc.isOpened() == false) {
            tc.open();
            tc.requestActive();
        } else {
            tc.requestActive();
        }
        if (tc instanceof IEnableButton) {
            try {
                ((IEnableButton) tc).enableButton();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }
}
