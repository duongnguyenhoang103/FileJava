/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.tree.ui.department;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import vn.com.hkt.basic.api.IDepartmentBN;
import vn.com.hkt.pilot.entities.Enterprise;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.tree.ui.department//TreeDepartment//EN",
autostore = false)
@TopComponent.Description(preferredID = "TreeDepartmentTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.tree.ui.department.TreeDepartmentTopComponent")
@ActionReference(path = "Menu/Kinh Doanh/Quản Lý Dự Án" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TreeDepartmentAction",
preferredID = "TreeDepartmentTopComponent")
public class TreeDepartmentTopComponent extends TopComponent implements ExplorerManager.Provider{

    private ExplorerManager explorerManager;
    private DefaultComboBoxModel enterpriseModel;
    private List<Enterprise> listEnterprise = new ArrayList<Enterprise>();
    private IDepartmentBN departmentBN;
    private Enterprise enterpriseToolbar = null;

    public TreeDepartmentTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TreeDepartmentTopComponent.class, "CTL_TreeDepartmentTopComponent"));
        setToolTipText(NbBundle.getMessage(TreeDepartmentTopComponent.class, "HINT_TreeDepartmentTopComponent"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTree = new javax.swing.JPanel();

        javax.swing.GroupLayout panelTreeLayout = new javax.swing.GroupLayout(panelTree);
        panelTree.setLayout(panelTreeLayout);
        panelTreeLayout.setHorizontalGroup(
            panelTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        panelTreeLayout.setVerticalGroup(
            panelTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTree, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelTree;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        departmentBN = Lookup.getDefault().lookup(IDepartmentBN.class);
        panelTree.setLayout(new BorderLayout());
        enterpriseModel = new DefaultComboBoxModel();
        if (enterpriseModel.getSize() == 0) {
            listEnterprise = departmentBN.enterpriseHasDepartment();
            if (listEnterprise != null) {
                for (Enterprise enterprise1 : listEnterprise) {
                    enterpriseModel.addElement(enterprise1);
                }
            }
        }

        explorerManager = new ExplorerManager();
        Object item1 = enterpriseModel.getElementAt(0);
        if (enterpriseToolbar != null) {
            resetTree(enterpriseToolbar);
        } else {
            Enterprise enterprise = (Enterprise) item1;
            resetTree(enterprise);
        }
    }

    @Override
    public void componentClosed() {
        enterpriseModel.removeAllElements();
        departmentBN = null;
        panelTree.removeAll();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.explorerManager;
    }

    // Hàm reset lại Tree khi chọn Enterprise
    
    public void resetTree(Enterprise e) {
        OutlineView ov1 = new OutlineView("Phòng ban");
        // ov1 = new OutlineView("Phòng ban");
        ov1.setPropertyColumns(DepartmentNode.Congtyme_PROPERTY, "Công ty",
                DepartmentNode.Giamdoc_PROPERTY, "Trưởng phòng");
        ov1.getOutline().setRootVisible(true);
        ov1.getOutline().setRowHeight(25);
        panelTree.add(ov1, BorderLayout.CENTER);
        Node rootNode = new AbstractNode(new DepartmentParent(e));
        explorerManager.setRootContext(rootNode);
        explorerManager.getRootContext().setDisplayName("Department");
    }
}
