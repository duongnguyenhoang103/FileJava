/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.pilot.history.manager.gui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import vn.com.hkt.pilot.entities.Department;
import vn.com.hkt.pilot.history.manager.gui.panel.SameTypeObjectChanges;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.pilot.history.manager.gui//HistoryManager//EN",
autostore = false)
@TopComponent.Description(preferredID = "HistoryManagerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.pilot.history.manager.gui.HistoryManagerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_HistoryManagerAction",
preferredID = "HistoryManagerTopComponent")
public final class HistoryManagerTopComponent extends TopComponent {

    private List<String> modules;
    private int moduleIndex;
    private List<List<IEntity>> moduleEntitys;
    private IEntity entityChoise;

    public HistoryManagerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(HistoryManagerTopComponent.class, "CTL_HistoryManagerTopComponent"));
        setToolTipText(NbBundle.getMessage(HistoryManagerTopComponent.class, "HINT_HistoryManagerTopComponent"));
        loadModule();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scPane = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        cbModuels = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cbEntities = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(HistoryManagerTopComponent.class, "HistoryManagerTopComponent.jLabel1.text")); // NOI18N

        cbModuels.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbModuels.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbModuelsItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(HistoryManagerTopComponent.class, "HistoryManagerTopComponent.jLabel2.text")); // NOI18N

        cbEntities.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbEntities.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbEntitiesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbModuels, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEntities, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
            .addComponent(scPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbModuels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbEntities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbModuelsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbModuelsItemStateChanged
        moduleIndex = cbModuels.getSelectedIndex();
        loadComboBoxEntity();
    }//GEN-LAST:event_cbModuelsItemStateChanged

    private void cbEntitiesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbEntitiesItemStateChanged
        entityChoise = moduleEntitys.get(moduleIndex).get(cbEntities.getSelectedIndex());
        loadHistory();
    }//GEN-LAST:event_cbEntitiesItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbEntities;
    private javax.swing.JComboBox cbModuels;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane scPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {        
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void loadModule() {
        moduleIndex = -1;
        modules = new ArrayList<String>();
        moduleEntitys = new ArrayList<List<IEntity>>();
        List<IEntity> list = (List<IEntity>) Lookup.getDefault().lookupAll(IEntity.class);
        for (int i = 0; i < list.size(); i++) {
            IEntity e = list.get(i);
//            JOptionPane.showMessageDialog(null, e.getEntityName());
            int index = -1;
            for (int j = 0; j < modules.size(); j++) {
                if (modules.get(j).equals(e.getModuleOfEntity())) {
                    index = j;
                    break;
                }
            }
            if (index >= 0) {
                moduleEntitys.get(index).add(e);
            } else {
                index = modules.size();
                List<IEntity> le = new ArrayList<IEntity>();
                le.add(e);
                moduleEntitys.add(le);
                modules.add(e.getModuleOfEntity());
            }

        }
        loadComboBoxModule();
    }

    private void loadComboBoxModule() {
        DefaultComboBoxModel model = new DefaultComboBoxModel(modules.toArray());
        cbModuels.setModel(model);
        if (!modules.isEmpty()) {
            cbModuels.setSelectedIndex(0);
            moduleIndex = 0;
            loadComboBoxEntity();
        }
    }

    private void loadComboBoxEntity() {
        if (moduleIndex < 0) {
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            cbEntities.setModel(model);
            entityChoise = null;
            return;
        }
        entityChoise = null;
        String[] strings = new String[moduleEntitys.get(moduleIndex).size()];
        for (int i = 0; i < strings.length; i++) {
            strings[i] = moduleEntitys.get(moduleIndex).get(i).getEntityName();
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel(strings);
        cbEntities.setModel(model);
        if (!moduleEntitys.get(moduleIndex).isEmpty()) {
            cbEntities.setSelectedIndex(0);
            entityChoise = moduleEntitys.get(moduleIndex).get(0);
            loadHistory();
        }
    }

    private void loadHistory() {
        if (entityChoise != null) {
            SameTypeObjectChanges panel= new SameTypeObjectChanges(entityChoise);
            panel.setScPane(scPane);
            scPane.setViewportView(panel);
        } else {
            scPane.setViewportView(new JPanel());
        }
    }
}
