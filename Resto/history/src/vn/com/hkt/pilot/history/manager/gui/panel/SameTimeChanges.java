/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SameTimeChanges.java
 *
 * Created on Feb 22, 2012, 1:40:59 PM
 */
package vn.com.hkt.pilot.history.manager.gui.panel;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.AbstractTableModel;
import vn.com.hkt.history.Installer;
import vn.com.hkt.history.apidao.IModificationDAO;
import vn.com.hkt.history.apidao.IReferenceDAO;
import vn.com.hkt.history.entities.Modification;
import vn.com.hkt.history.entities.Reference;
import vn.com.hkt.history.spidao.ModificationDAO;
import vn.com.hkt.history.spidao.ReferenceDAO;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;

/**
 *
 * @author BinLe
 */
public class SameTimeChanges extends javax.swing.JPanel implements IUserInterface {

    private Date date;
    private IEntity entity;
    private IReferenceDAO referenceDAO = new ReferenceDAO();
    private IModificationDAO modificationDAO = new ModificationDAO();
    private List<Reference> listReferences;
    private List<Integer> listModifications;
    private Reference referenceChoise;
    private Modification modificationChoise;

    /** Creates new form SameTimeChanges */
    public SameTimeChanges(Date date, IEntity entity) {
        initComponents();
        this.date = date;
        this.entity = entity;
        loadData();
        loadTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtModule = new javax.swing.JTextField();
        txtObjectType = new javax.swing.JTextField();
        txtObject = new javax.swing.JTextField();
        txtFieldName = new javax.swing.JTextField();
        txtData = new javax.swing.JTextField();
        dcDateStart = new com.toedter.calendar.JDateChooser();
        dcDateEnd = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        cbAccount = new javax.swing.JComboBox();
        lbMesenger = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel5.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel6.text")); // NOI18N

        jLabel7.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel7.text")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel8.text")); // NOI18N

        jLabel10.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel10.text")); // NOI18N

        txtModule.setEditable(false);
        txtModule.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.txtModule.text")); // NOI18N

        txtObjectType.setEditable(false);
        txtObjectType.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.txtObjectType.text")); // NOI18N

        txtObject.setEditable(false);
        txtObject.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.txtObject.text")); // NOI18N

        txtFieldName.setEditable(false);
        txtFieldName.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.txtFieldName.text")); // NOI18N

        txtData.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.txtData.text")); // NOI18N

        dcDateStart.setDateFormatString(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.dcDateEnd.dateFormatString")); // NOI18N

        dcDateEnd.setDateFormatString(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.dcDateEnd.dateFormatString")); // NOI18N

        jScrollPane2.setViewportView(txtDescription);

        jButton1.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbAccount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbMesenger.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.lbMesenger.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtModule, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(txtObjectType, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(cbAccount, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(dcDateStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbMesenger))
                            .addComponent(dcDateEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtObject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel5, jLabel7, jLabel8});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel10, jLabel3, jLabel4, jLabel6});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel3)
                            .addComponent(txtObject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel4)
                            .addComponent(txtFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel6)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(txtModule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2)
                            .addComponent(txtObjectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel7)
                            .addComponent(dcDateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel8)
                            .addComponent(dcDateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(lbMesenger)))
        );

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText(org.openide.util.NbBundle.getMessage(SameTimeChanges.class, "SameTimeChanges.jLabel11.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() < 2) {
            return;
        }
        modificationChoise = new ModificationDAO().getById(listModifications.get(jTable1.getSelectedRow()));
        referenceChoise = listReferences.get(jTable1.getSelectedRow());
        loadChoise();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        edit();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbAccount;
    private com.toedter.calendar.JDateChooser dcDateEnd;
    private com.toedter.calendar.JDateChooser dcDateStart;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbMesenger;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtFieldName;
    private javax.swing.JTextField txtModule;
    private javax.swing.JTextField txtObject;
    private javax.swing.JTextField txtObjectType;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        List<Reference> references = referenceDAO.select(Reference.FIELD_OBJECT_TYPE, entity.getEntityName(), IReferenceDAO.ASC, Reference.FIELD_OBJECT_ID_ACTUAL);
        if (references == null) {
            return;
        }
        listReferences = new ArrayList<Reference>();
        listModifications = new ArrayList<Integer>();
        for (int i = 0; i < references.size(); i++) {
            List<Integer> modifications = references.get(i).getModificationsIdActual();
            for (int j = 0; j < modifications.size(); j++) {
                Modification modification = new ModificationDAO().getById(modifications.get(j));
                if (modification.getDateStart().equals(date)
                        || modification.getDateEnd().equals(date)) {
                    listReferences.add(references.get(i));
                    listModifications.add(modifications.get(j));
                }
            }
        }
    }

    private void loadTable() {
        List<Modification> list = new ArrayList<Modification>();
        for (int i = 0; i < listModifications.size(); i++) {
            list.add(new ModificationDAO().getById(listModifications.get(i)));
        }
        SamTimeChangesTableModel model = new SamTimeChangesTableModel(listReferences, list);
        jTable1.setModel(model);
    }

    private void loadChoise() {
        txtModule.setText(referenceChoise.getModuleObject());
        txtObjectType.setText(referenceChoise.getObjectType());
        txtObject.setText(referenceChoise.getDataRealyOfField(
                Reference.FIELD_OBJECT_ID_ACTUAL,
                String.valueOf(referenceChoise.getObjectIdActual())));
        txtFieldName.setText(referenceChoise.getDataRealyOfField(
                Reference.FIELD_FIELD_NAME,
                referenceChoise.getFieldName()));
        txtData.setText(modificationChoise.getData());
        txtDescription.setText(modificationChoise.getDescription());
        dcDateEnd.setDate(modificationChoise.getDateEnd());
        dcDateStart.setDate(modificationChoise.getDateStart());
    }

    private void edit() {
        //TODO thiếu xử lý account
        modificationChoise.setData(txtData.getText());
        modificationChoise.setDateEnd(dcDateEnd.getDate());
        modificationChoise.setDateStart(dcDateStart.getDate());
        modificationChoise.setDescription(txtDescription.getText());
        if (!modificationDAO.update(modificationChoise)) {
            lbMesenger.setText("Sửa không thành côg");
            lbMesenger.setVisible(true);
            return;
        }
        lbMesenger.setVisible(true);
        loadData();
        loadTable();
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện theo dõi lịch sử thay đổi cùng 1 thời gian";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }
}

class SamTimeChangesTableModel extends AbstractTableModel {

    private DateFormat df = new SimpleDateFormat("dd/MM/yyyy - hh:mm:ss");
    private final String[] header = new String[]{"Module", "Loại đối tượng",
        "Đối tượng", "Account chỉnh sửa", "Thuộc tính thay đổi", "Dữ liệu",
        "Thời gian bắt đầu", "Thời gian kết thúc", "Miêu tả"};
    private List<Reference> references;
    private List<Modification> modifications;

    public SamTimeChangesTableModel(List<Reference> references, List<Modification> modifications) {
        this.references = references;
        this.modifications = modifications;
    }

    @Override
    public String getColumnName(int column) {
        return header[column];
    }

    @Override
    public int getRowCount() {
        return modifications.size();
    }

    @Override
    public int getColumnCount() {
        return header.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        switch (columnIndex) {
            case 0:
                return references.get(rowIndex).getModuleObject();
            case 1:
                return references.get(rowIndex).getObjectType();
            case 2:
                return references.get(rowIndex).getDataRealyOfField(
                        Reference.FIELD_OBJECT_ID_ACTUAL,
                        String.valueOf(references.get(rowIndex).getObjectIdActual()));
            case 3:
                return references.get(rowIndex).getDataRealyOfField(
                        Reference.FIELD_ACCOUNT_ID_ACTUAL,
                        String.valueOf(references.get(rowIndex).getAccountIdActual()));
            case 4:
                return references.get(rowIndex).getDataRealyOfField(
                        Reference.FIELD_FIELD_NAME,
                        references.get(rowIndex).getFieldName());
            case 5:
                return modifications.get(rowIndex).getData();
            case 6:
                return df.format(modifications.get(rowIndex).getDateStart());
            case 7:
                return df.format(modifications.get(rowIndex).getDateEnd());
            case 8:
                return modifications.get(rowIndex).getDescription();
            default:
                return "";
        }
    }
}
