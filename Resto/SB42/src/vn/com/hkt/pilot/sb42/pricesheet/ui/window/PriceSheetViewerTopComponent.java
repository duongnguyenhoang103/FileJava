/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.pilot.sb42.pricesheet.ui.window;

import com.vn.hkt.core.cookie.api.FilterCokieTable;
import com.vn.hkt.core.cookie.api.PricesheetDeleteCookie;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import vn.com.hkt.pilot.enterprise.viewer.api.ViewCookieList;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.price.viewer.api.IPriceSheetViewer;
import vn.com.hkt.pilot.sb42.pricesheet.Installer;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.pilot.sb42.pricesheet.ui.window//PriceSheetViewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "PriceSheetViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.pilot.sb42.pricesheet.ui.window.PriceSheetViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_PriceSheetViewerAction",
preferredID = "PriceSheetViewerTopComponent")
public final class PriceSheetViewerTopComponent extends TopComponent implements
        IUserInterface, ItemListener, ActionListener {

    private IPriceSheetViewer priceSheetViewer;
    private DefaultComboBoxModel filterModel;
    private Hashtable<Integer, String> hashtable = new Hashtable<Integer, String>();
    private int key = 0;

    public PriceSheetViewerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PriceSheetViewerTopComponent.class, "CTL_PriceSheetViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(PriceSheetViewerTopComponent.class, "HINT_PriceSheetViewerTopComponent"));

        filterModel = new DefaultComboBoxModel();
        cboFilter.setModel(filterModel);
        cboFilter.addItemListener(this);

        priceSheetViewer = Lookup.getDefault().lookup(IPriceSheetViewer.class);
        if (priceSheetViewer != null) {
            fillCombo(priceSheetViewer);
            panelSum.setLayout(new GridLayout());
            JPanel panel = priceSheetViewer.getPriceViewer();
            panelSum.add(panel);
        }

        btnDelete.addActionListener(this);
        btnEdit.addActionListener(this);
        btnPrint.addActionListener(this);
        btnExit.addActionListener(this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSum = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        cboFilter = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        javax.swing.GroupLayout panelSumLayout = new javax.swing.GroupLayout(panelSum);
        panelSum.setLayout(panelSumLayout);
        panelSumLayout.setHorizontalGroup(
            panelSumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
        );
        panelSumLayout.setVerticalGroup(
            panelSumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );

        cboFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PriceSheetViewerTopComponent.class, "PriceSheetViewerTopComponent.jLabel1.text")); // NOI18N

        txtFilter.setText(org.openide.util.NbBundle.getMessage(PriceSheetViewerTopComponent.class, "PriceSheetViewerTopComponent.txtFilter.text")); // NOI18N
        txtFilter.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtFilterCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(PriceSheetViewerTopComponent.class, "PriceSheetViewerTopComponent.btnDelete.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnPrint, org.openide.util.NbBundle.getMessage(PriceSheetViewerTopComponent.class, "PriceSheetViewerTopComponent.btnPrint.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnEdit, org.openide.util.NbBundle.getMessage(PriceSheetViewerTopComponent.class, "PriceSheetViewerTopComponent.btnEdit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnExit, org.openide.util.NbBundle.getMessage(PriceSheetViewerTopComponent.class, "PriceSheetViewerTopComponent.btnExit.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(249, Short.MAX_VALUE)
                .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnPrint))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelSum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void txtFilterCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtFilterCaretUpdate
// TODO add your handling code here:
    if (txtFilter.getText().trim().length() != 0) {
        Collection<? extends FilterCokieTable> allFilters = Lookup.getDefault().lookupAll(FilterCokieTable.class);

        for (FilterCokieTable filterCookie : allFilters) {
            String value = txtFilter.getText().trim();
            filterCookie.filterTable(value, key);

        }
    } else {
        loadView();
    }
}//GEN-LAST:event_txtFilterCaretUpdate
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox cboFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panelSum;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void loadView() {
        Collection<? extends ViewCookieList> allView = Lookup.getDefault().lookupAll(ViewCookieList.class);
        for (ViewCookieList viewCookie : allView) {
            try {
                viewCookie.ViewCookieList();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        reLoadFont();
        reLoadSize();
        reLoadColor();
        reLoadColorMouse();
        reLoadColorTitle();
        reLoadColorWord();
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện chính xem danh sách bảng giá";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    public void reLoadFont() {
        Collection<? extends IResetFontSize> allSave = Lookup.getDefault().lookupAll(IResetFontSize.class);
        for (IResetFontSize editCookie : allSave) {
            editCookie.resetFont();
        }
    }

    public void reLoadColor() {
        Collection<? extends IResetFontSize> allSave = Lookup.getDefault().lookupAll(IResetFontSize.class);
        for (IResetFontSize editCookie : allSave) {
            editCookie.resetColorRowTable();
        }
    }

    public void reLoadSize() {
        Collection<? extends IResetFontSize> allSave = Lookup.getDefault().lookupAll(IResetFontSize.class);
        for (IResetFontSize editCookie : allSave) {
            editCookie.resetSize();
        }
    }

    public void reLoadColorWord() {
        Collection<? extends IResetFontSize> allSave = Lookup.getDefault().lookupAll(IResetFontSize.class);
        for (IResetFontSize editCookie : allSave) {
            editCookie.resetColorWord();
        }
    }

    public void reLoadColorTitle() {
        Collection<? extends IResetFontSize> allSave = Lookup.getDefault().lookupAll(IResetFontSize.class);
        for (IResetFontSize editCookie : allSave) {
            editCookie.resetColorTitle();
        }
    }

    public void reLoadColorMouse() {
        Collection<? extends IResetFontSize> allSave = Lookup.getDefault().lookupAll(IResetFontSize.class);
        for (IResetFontSize editCookie : allSave) {
            editCookie.resetColorMouse();
        }
    }

    public Hashtable<Integer, String> getHashtable() {
        return hashtable;
    }

    public void setHashtable(Hashtable<Integer, String> hashtable) {
        this.hashtable = hashtable;
    }

    public void fillCombo(IPriceSheetViewer priceSheetViewer) {

        filterModel.removeAllElements();

        hashtable = priceSheetViewer.getTableHeader();

        setHashtable(hashtable);
        Collection<String> enumeration = getHashtable().values();
        for (String str : enumeration) {
            filterModel.addElement(str);
        }

    }

    @Override
    public void itemStateChanged(ItemEvent e) {

        if (e.getSource() == cboFilter) {
            if (cboFilter.getSelectedIndex() > -1) {
                String value = cboFilter.getSelectedItem().toString().trim();
                if (value.length() != 0) {
                    Set set = hashtable.entrySet();
                    Iterator iterator = set.iterator();
                    while (iterator.hasNext()) {
                        Map.Entry entry = (Entry) iterator.next();
                        if (entry.getValue().toString().equals(value)) {
                            key = Integer.parseInt(entry.getKey().toString());
                        }
                    }
                }
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnDelete) {
            JOptionPane.showMessageDialog(null, "Delete?");
            PricesheetDeleteCookie deleteCookie = Lookup.getDefault().lookup(PricesheetDeleteCookie.class);
            if (deleteCookie != null) {
                deleteCookie.deletePricesheet();
            }
        }
        if(e.getSource()==btnEdit){
            
        }
        if(e.getSource()==btnPrint){
            
        }
        if(e.getSource()==btnExit){
            this.close();
        }
    }
}
