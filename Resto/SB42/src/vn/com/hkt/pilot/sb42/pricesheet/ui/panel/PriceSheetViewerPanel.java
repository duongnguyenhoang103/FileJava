/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PriceSheetViewerPanel.java
 *
 * Created on Feb 20, 2012, 11:16:44 PM
 */
package vn.com.hkt.pilot.sb42.pricesheet.ui.panel;

import com.vn.hkt.core.cookie.api.FilterCokieTable;
import com.vn.hkt.core.cookie.api.PricesheetDeleteCookie;
import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IClassificationBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.enterprise.viewer.api.ViewCookieList;
import vn.com.hkt.pilot.entities.Classification;
import vn.com.hkt.pilot.entities.Product;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.price.viewer.api.IPriceSheetViewer;
import vn.com.hkt.pilot.report.api.IReportListGUI;
import vn.com.hkt.pilot.report.api.IReportManager;
import vn.com.hkt.pilot.sb42.pricesheet.Installer;
import vn.com.hkt.pilot.sb42.pricesheet.dao.api.IPriceSheetBN;
import vn.com.hkt.pilot.sb42.pricesheeta.entity.PriceSheet;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;

/**
 *
 * @author khangutc
 */
@ServiceProvider(service = IPriceSheetViewer.class)
public class PriceSheetViewerPanel extends javax.swing.JPanel implements
        IPriceSheetViewer, IUserInterface, FilterCokieTable, ViewCookieList,
        IResetFontSize, IReportListGUI, PricesheetDeleteCookie {

    private Lookup lookup;
    private InstanceContent content = new InstanceContent();
    private DefaultTableModel model;
    private IPriceSheetBN priceSheetBN;
    private IClassificationBN classificationBN;
    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN;
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();
    private TableRowSorter<TableModel> tableRowSorter;

    /** Creates new form PriceSheetViewerPanel */
    public PriceSheetViewerPanel() {
        initComponents();
        lookup = new AbstractLookup(content);
        classificationBN = Lookup.getDefault().lookup(IClassificationBN.class);
        priceSheetBN = Lookup.getDefault().lookup(IPriceSheetBN.class);
        
        sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);

        tblPriceSheetViewer.setRowHeight(26);
        tableFill();
        tblPriceSheetViewer.setModel(model);
        filterTable(getTable(), model);
        resetColorRowTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPriceSheetViewer = new javax.swing.JTable();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(PriceSheetViewerPanel.class, "PriceSheetViewerPanel.jPanel1.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        tblPriceSheetViewer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPriceSheetViewer);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 949, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(150, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPriceSheetViewer;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getPriceViewer() {
        return this;
    }

    @Override
    public Lookup getPriceLookup() {
        return lookup;
    }

    @Override
    public double getLevelNumber() {
        return 1.2;
    }

    /**
     * Table Setting
     */
    protected void tableFill() {
        String[] header = {"Mã bảng giá", "Tên bảng giá","Tên SP", "Phân loại", "Đơn giá", "Đơn vị", "Biên độ", "Đơn vị",
            "Giá Max", "Đơn vị", "Giá Min", "Đơn vị",
            "Áp dụng từ ngày", "Đến ngày", "Lập giá đối ứng", "Chênh lệch", "Loại thuế"};
        model = new DefaultTableModel(header, 0);
        List<PriceSheet> priceSheets = new ArrayList<PriceSheet>();
        priceSheets = priceSheetBN.selectAll();
        if (!priceSheets.isEmpty()) {
            for (PriceSheet priceSheet : priceSheets) {
                String pricesheetID = ""; // Ma nguoi dung co the thay doi
                String ProductName = ""; // ten san pham
                String pricesheetName = ""; // Ten bang gia
                int idClassification = 0; // Phan loai lay tu Basic : Mua ban, nhap xuat
                float exportUnit = 0; // Don gia xuat
                float exportMin = 0; // Gia xuat nho nhat co the
                float exportMax = 0; // Gia xuat lon nhat co the
                float ampliTude = 0; // Bien do
                String ampliTudeUnit = ""; // Đơn vị của biên độ (% hay là số)
                Calendar appliedFrom = Calendar.getInstance(); // Ap dung tu
                String unitMoneyOfExportUnit = ""; // Don vi tinh cua don gia xuat
                String unitMoneyOfExportMin = ""; // Don vi tinh cua don gia xuat Min
                String unitMoneyOfExportMax = ""; // Don vi tinh cua don gia xuat Max
                String typeOfTaxes = ""; // Loai thue
                Calendar appliedTo = Calendar.getInstance(); // Ap dung den ngay
                int unEqual = 0; // Chênh lệch
                boolean symmetricalPrice = false;

                
                Product product = new Product();
                int productId = priceSheet.getProductIdActual();
                product = (Product) product.getAccessDataOfEntity().getById(productId);
                if(product!=null){
                    ProductName = product.getProductName();
                }
                
                pricesheetID = priceSheet.getPricesheetID();
                pricesheetName = priceSheet.getPricesheetName();
                idClassification = priceSheet.getIdClassification();
                Classification classification = classificationBN.getById(idClassification);
                exportUnit = priceSheet.getExportUnit();
                exportMax = priceSheet.getExportMax();
                exportMin = priceSheet.getExportMin();
                ampliTude = priceSheet.getAmpliTude();
                ampliTudeUnit = priceSheet.getAmpliTudeUnit();

                appliedFrom = priceSheet.getAppliedFrom();
                String strDate1 = appliedFrom.get(Calendar.DAY_OF_MONTH) + "/" + (appliedFrom.get(Calendar.MONTH) + 1)
                        + "/" + appliedFrom.get(Calendar.YEAR);
                appliedTo = priceSheet.getAppliedTo();
                String strDate2 = appliedTo.get(Calendar.DAY_OF_MONTH) + "/" + (appliedTo.get(Calendar.MONTH) + 1)
                        + "/" + appliedTo.get(Calendar.YEAR);

                unitMoneyOfExportUnit = priceSheet.getUnitMoneyOfExportUnit();
                unitMoneyOfExportMax = priceSheet.getUnitMoneyOfExportMax();
                unitMoneyOfExportMin = priceSheet.getUnitMoneyOfExportMin();
                typeOfTaxes = priceSheet.getTypeOfTaxes();
                unEqual = priceSheet.getUnEqual();
                symmetricalPrice = priceSheet.isSymmetricalPrice();
                String symmetrical = symmetricalPrice == true ? "Có" : "Không";

                String[] row = {pricesheetID, pricesheetName,ProductName, classification.getClassificationName(), String.valueOf(exportUnit),
                    unitMoneyOfExportUnit, String.valueOf(ampliTude), ampliTudeUnit, String.valueOf(exportMax), unitMoneyOfExportMax,
                    String.valueOf(exportMin), unitMoneyOfExportMin, strDate1, strDate2, symmetrical, String.valueOf(unEqual), typeOfTaxes};

                model.addRow(row);

            }
        }
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện xem bảng giá";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public void filterTable(JTable table, DefaultTableModel tableModel) {
        tableRowSorter = new TableRowSorter<TableModel>(tableModel);
        table.setRowSorter(tableRowSorter);
    }

    @Override
    public void filterTable(String stringKey, int column) {
        if (stringKey.trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Null rồi!");
            tableFill();
        } else {
            tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + stringKey, column));
            tableRowSorter.setSortKeys(null);
        }
    }

    @Override
    public Hashtable getTableHeader() {
        Hashtable hashtable = new Hashtable();
        int n = getTable().getColumnCount();
        int i;
        for (i = 0; i < n; i++) {
            hashtable.put(i, getTable().getColumnName(i).toString());
        }

        return hashtable;
    }

    @Override
    public JTable getTable() {
        return this.tblPriceSheetViewer;
    }

    @Override
    public void ViewCookieList() throws IOException {
        tableFill();
        tblPriceSheetViewer.setModel(model);
        filterTable(tblPriceSheetViewer, model);
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = getTable().getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        getTable().setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(getTable(), colorL, null, colorD, null);
        getTable().repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = getTable().getFont().getFontName();
        size = listS.get(0).getSizeWord();
        getTable().setFont(new Font(font, 0, size));
        
    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        getTable().setForeground(color);
        getTable().repaint();
    }

    @Override
    public void resetColorTitle() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
        getTable().getTableHeader().setForeground(color);
        getTable().repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        getTable().setSelectionBackground(color);
        getTable().repaint();
    }

    @Override
    public void exportReport() {
        IReportManager reportManager = Lookup.getDefault().lookup(IReportManager.class);

        if (reportManager
                == null) {
            return;
        }
        String[] keys1 = {"prTenDoanhNghiep", "prDiaChi", "prTenBaoCao", "prNgayLap", "prNguoiLapBaoCao"};
        String[] values1 = {"HKT Consultant", "66 Trần Thái Tông Hà Nội", "", "16/03/2012", "Đồng Thị Tâm"};
        String keys2[] = new String[getTable().getColumnCount()];
        String values2[] = new String[getTable().getColumnCount()];
        for (int i = 0; i < getTable().getColumnCount(); i++) {
            keys2[i] = "prColumn_" + i;
            values2[i] = getTable().getColumnName(i).toString();
        }
        String[] keys = new String[keys1.length + keys2.length];
        String[] values = new String[values1.length + values2.length];
        System.arraycopy(keys1, 0, keys, 0, keys1.length);
        System.arraycopy(keys2, 0, keys, keys1.length, keys2.length);
        System.arraycopy(values1, 0, values, 0, values1.length);
        System.arraycopy(values2, 0, values, values1.length, values2.length);
        HashMap map = reportManager.getHashMap(keys, values);
        DefaultTableModel md = reportManager.getModel(getTable());
        reportManager.setReportManager(map, md);
        reportManager.exportReport();
    }

    @Override
    public boolean deletePricesheet() {
        return delete();
    }

    public boolean delete() {
        boolean isDelete = false;
        int rowSelected = getTable().getSelectedRow();
        if (rowSelected > -1) {
            
            String priceSheetId = "";
            try {
                priceSheetId = getTable().getValueAt(rowSelected, 0).toString();
                PriceSheet priceSheet = priceSheetBN.getByObjectId(priceSheetId);
                if (priceSheet != null) {
                    JOptionPane.showMessageDialog(null, "Do you want delete row " + priceSheet.getPricesheetID());
                    if (priceSheetBN.delete(priceSheet.getId())) {
                        tableFill();
                        tblPriceSheetViewer.setModel(model);
                        filterTable(tblPriceSheetViewer, model);
                        JOptionPane.showMessageDialog(null, "Deleted " + priceSheet.getPricesheetName());
                        isDelete = true;
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Loi!");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Kiểm tra lại mã!");
            }
        }
        return isDelete;
    }
}
