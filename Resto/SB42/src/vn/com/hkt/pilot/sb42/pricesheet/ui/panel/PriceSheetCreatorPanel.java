/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PriceSheetCreater.java
 *
 * Created on Feb 17, 2012, 9:46:41 PM
 */
package vn.com.hkt.pilot.sb42.pricesheet.ui.panel;

import com.vn.hkt.core.cookie.api.PricesheetResetCookie;
import com.vn.hkt.core.cookie.api.PricesheetSaveCookie;
import com.vn.hkt.core.cookie.api.PricesheetSaveListCookie;
import com.vn.hkt.core.cookie.api.PricesheetUpdateCookie;
import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import vn.com.hkt.basic.api.IClassificationBN;
import vn.com.hkt.basic.api.IProductBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.entities.Classification;
import vn.com.hkt.pilot.entities.KeyGenerate;
import vn.com.hkt.pilot.entities.Product;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.keymanager.api.CreateKey;
import vn.com.hkt.pilot.price.viewer.api.IPriceSheetCreator;
import vn.com.hkt.pilot.sb42.pricesheet.Installer;
import vn.com.hkt.pilot.sb42.pricesheet.dao.PriceSheetBN;
import vn.com.hkt.pilot.sb42.pricesheeta.entity.PriceSheet;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;

/**
 *
 * @author khangutc
 */
@ServiceProvider(service = IPriceSheetCreator.class)
public class PriceSheetCreatorPanel extends javax.swing.JPanel implements
        IPriceSheetCreator, IUserInterface, IResetFontSize, PricesheetResetCookie,
        PricesheetSaveCookie, PricesheetSaveListCookie, PricesheetUpdateCookie {

    private Lookup lookup;
    private InstanceContent content = new InstanceContent();
    private PricesheetTableCell cell;
    private PriceSheetBN priceSheetBN = new PriceSheetBN();
    private IProductBN productBN;
    private CreateKey createKey;
    private PriceSheet priceSheetPrivate;
    private int productIdActual = 0;
    
    private boolean symmetricalPrice = false;// Tỷ giá đối ứng
    
    private ISystemSotfwareBN sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();
    private int size;
    private String font;

    /** Creates new form PriceSheetCreater */
    public PriceSheetCreatorPanel() {

        initComponents();
        lookup = new AbstractLookup(content);
        cell = new PricesheetTableCell(this);
        tblPricesheet.getColumnModel().getColumn(1).setCellEditor(cell);
        tblPricesheet.getColumnModel().getColumn(2).setCellEditor(cell);
        tblPricesheet.getColumnModel().getColumn(3).setCellEditor(cell);
        tblPricesheet.setRowHeight(30);
        productBN = Lookup.getDefault().lookup(IProductBN.class);
        reset();
        resetColorRowTable();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPricesheet = new javax.swing.JTable();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(PriceSheetCreatorPanel.class, "PriceSheetCreatorPanel.jPanel1.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 102, 255))); // NOI18N

        tblPricesheet.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{
                {"Tên bảng giá", " ", "", " "},
                {"Mã bảng giá", " ", "Loại thuế", " "},
                {"Phân loại", " ", "SP", " "},
                {"Đơn giá", " ", "Đơn vị tiền", " "},
                {"Biên độ", " ", "", " "},
                {"Giá min", " ", "Đơn vị tiền", " "},
                {"Giá max", " ", "Đơn vị tiền", " "},
                {"Áp dụng từ", " ", "Đến", " "},
                {"Lập giá đối ứng", " ", "Chênh lệch", " "}
            },
            new String[]{
                "", "", "", ""
            }) {

                boolean[] canEdit = new boolean[]{
                    false, true, false, true
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    if ((columnIndex == 0) || ((columnIndex == 2 && rowIndex != 4))) {
                        return false;
                    }
                    if (rowIndex
                        == 4 && columnIndex
                        == 3) {
                        return false;
                    }
                    return true;
                }
            });
            tblPricesheet.setCellSelectionEnabled(true);
            tblPricesheet.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            tblPricesheet.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    tblPricesheetKeyPressed(evt);
                }
            });
            jScrollPane1.setViewportView(tblPricesheet);

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 910, Short.MAX_VALUE)
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
        }// </editor-fold>//GEN-END:initComponents

private void tblPricesheetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblPricesheetKeyPressed
// TODO add your handling code here:
}//GEN-LAST:event_tblPricesheetKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPricesheet;
    // End of variables declaration//GEN-END:variables

    public JTable getPricesheetTable() {
        return tblPricesheet;
    }

    @Override
    public JPanel getPriceCreator() {
        return this;
    }

    @Override
    public Lookup getPriceLookup() {
        return lookup;
    }

    @Override
    public double getLevelNumber() {
        return 1.0;
    }

    public int getProductIdActual() {
        return productIdActual;
    }

    public void setProductIdActual(int productIdActual) {
        this.productIdActual = productIdActual;
    }
    
    public boolean isSymmetricalPrice() {
        return symmetricalPrice;
    }

    public void setSymmetricalPrice(boolean symmetricalPrice) {
        this.symmetricalPrice = symmetricalPrice;
    }
    
    protected boolean savePricesheet() {
        boolean flag = false;
        PriceSheet priceSheet = new PriceSheet();
        String pricesheetID = ""; // Ma nguoi dung co the thay doi
        String moneyUnitID = ""; // Ma don vi tien te
        String pricesheetName = ""; // Ten bang gia
        int idClassification = 0; // Phan loai lay tu Basic : Mua ban, nhap xuat
        float exportUnit = 0; // Don gia xuat
        float exportMin = 0; // Gia xuat nho nhat co the
        float exportMax = 0; // Gia xuat lon nhat co the
        float ampliTude = 0; // Bien do
        String ampliTudeUnit = ""; // Đơn vị của biên độ (% hay là số)
        Calendar appliedFrom = Calendar.getInstance(); // Ap dung tu
        String unitMoneyOfExportUnit = ""; // Don vi tinh cua don gia xuat
        String unitMoneyOfExportMin = ""; // Don vi tinh cua don gia xuat Min
        String unitMoneyOfExportMax = ""; // Don vi tinh cua don gia xuat Max
        String typeOfTaxes = ""; // Loai thue
        Calendar appliedTo = Calendar.getInstance(); // Ap dung den ngay
        int unEqual = 0; // Chênh lệch

        pricesheetID = tblPricesheet.getValueAt(1, 1).toString();
        pricesheetName = tblPricesheet.getValueAt(0, 1).toString();

        Classification classification = null;
        classification = (Classification) tblPricesheet.getValueAt(2, 1);
        JOptionPane.showMessageDialog(null, classification.getClassificationName());

        idClassification = classification.getId();
        exportUnit = Float.parseFloat(tblPricesheet.getValueAt(3, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(3, 1).toString());
        ampliTude = Float.parseFloat(tblPricesheet.getValueAt(4, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(4, 1).toString());
        exportMin = Float.parseFloat(tblPricesheet.getValueAt(5, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(5, 1).toString());
        exportMax = Float.parseFloat(tblPricesheet.getValueAt(6, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(6, 1).toString());

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date1 = null;
        Date date2 = null;
        try {
            date1 = dateFormat.parse(tblPricesheet.getValueAt(7, 1).toString());
            appliedFrom.setTime(date1);
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }

        typeOfTaxes = tblPricesheet.getValueAt(2, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(2, 3).toString();
        unitMoneyOfExportUnit = tblPricesheet.getValueAt(3, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(3, 3).toString();
        ampliTudeUnit = tblPricesheet.getValueAt(4, 2).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(4, 2).toString();
        unitMoneyOfExportMin = tblPricesheet.getValueAt(5, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(5, 3).toString();
        unitMoneyOfExportMax = tblPricesheet.getValueAt(6, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(6, 3).toString();
        try {
            date2 = dateFormat.parse(tblPricesheet.getValueAt(7, 3).toString());
            appliedTo.setTime(date2);
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
        unEqual = Integer.parseInt(tblPricesheet.getValueAt(8, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(8, 3).toString());

        priceSheet.setAmpliTude(ampliTude);
        priceSheet.setAmpliTudeUnit(ampliTudeUnit);
        priceSheet.setAppliedFrom(appliedFrom);
        priceSheet.setAppliedTo(appliedTo);
        priceSheet.setExportMax(exportMax);
        priceSheet.setExportMin(exportMin);
        priceSheet.setExportUnit(exportUnit);
        priceSheet.setIdClassification(idClassification);
        priceSheet.setMoneyUnitID(moneyUnitID);
        priceSheet.setPricesheetName(pricesheetName);
        priceSheet.setPricesheetID(pricesheetID);
        priceSheet.setSymmetricalPrice(symmetricalPrice);
        priceSheet.setTypeOfTaxes(typeOfTaxes);
        priceSheet.setUnEqual(unEqual);
        priceSheet.setUnitMoneyOfExportMax(unitMoneyOfExportMax);
        priceSheet.setUnitMoneyOfExportMin(unitMoneyOfExportMin);
        priceSheet.setUnitMoneyOfExportUnit(unitMoneyOfExportUnit);
        priceSheet.setProductIdActual(productIdActual);
        if (priceSheetBN.insert(priceSheet)) {
            JOptionPane.showMessageDialog(null, "Saved!");
            flag = true;
        }
        if (symmetricalPrice) {
            priceSheetPrivate = subInsertForSale(priceSheet);
            String message = "Bạn muốn sửa thông tin giá đối ứng?";
            String title = "Thêm đối ứng?";
            int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                updateTable(priceSheetPrivate);

            } else {
                reset();
            }
        } else {
            reset();
        }
        return flag;
    }

    public boolean updatePriceSheet(int id) {
        PriceSheet priceSheet = null;
        priceSheet = priceSheetBN.getById(id);
        String pricesheetID = ""; // Ma nguoi dung co the thay doi
        String moneyUnitID = ""; // Ma don vi tien te
        String pricesheetName = ""; // Ten bang gia
        int idClassification = 0; // Phan loai lay tu Basic : Mua ban, nhap xuat
        float exportUnit = 0; // Don gia xuat
        float exportMin = 0; // Gia xuat nho nhat co the
        float exportMax = 0; // Gia xuat lon nhat co the
        float ampliTude = 0; // Bien do
        String ampliTudeUnit = ""; // Đơn vị của biên độ (% hay là số)
        Calendar appliedFrom = Calendar.getInstance(); // Ap dung tu
        String unitMoneyOfExportUnit = ""; // Don vi tinh cua don gia xuat
        String unitMoneyOfExportMin = ""; // Don vi tinh cua don gia xuat Min
        String unitMoneyOfExportMax = ""; // Don vi tinh cua don gia xuat Max
        String typeOfTaxes = ""; // Loai thue
        Calendar appliedTo = Calendar.getInstance(); // Ap dung den ngay
        int unEqual = 0; // Chênh lệch
        boolean symmetricalPrice = false;

        pricesheetID = tblPricesheet.getValueAt(1, 1).toString();
        pricesheetName = tblPricesheet.getValueAt(0, 1).toString();

        Classification classification = null;
        classification = (Classification) tblPricesheet.getValueAt(2, 1);
        JOptionPane.showMessageDialog(null, classification.getClassificationName());

        idClassification = classification.getId();
        exportUnit = Float.parseFloat(tblPricesheet.getValueAt(3, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(3, 1).toString());
        ampliTude = Float.parseFloat(tblPricesheet.getValueAt(4, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(4, 1).toString());
        exportMin = Float.parseFloat(tblPricesheet.getValueAt(5, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(5, 1).toString());
        exportMax = Float.parseFloat(tblPricesheet.getValueAt(6, 1).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(6, 1).toString());

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date1 = null;
        Date date2 = null;
        try {
            date1 = dateFormat.parse(tblPricesheet.getValueAt(7, 1).toString());
            appliedFrom.setTime(date1);
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }

        symmetricalPrice = tblPricesheet.getValueAt(8, 1).toString().equals("Có");

        typeOfTaxes = tblPricesheet.getValueAt(0, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(0, 3).toString();
        unitMoneyOfExportUnit = tblPricesheet.getValueAt(3, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(3, 3).toString();
        ampliTudeUnit = tblPricesheet.getValueAt(4, 2).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(4, 2).toString();
        unitMoneyOfExportMin = tblPricesheet.getValueAt(5, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(5, 3).toString();
        unitMoneyOfExportMax = tblPricesheet.getValueAt(6, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(6, 3).toString();
        try {
            date2 = dateFormat.parse(tblPricesheet.getValueAt(7, 3).toString());
            appliedTo.setTime(date2);
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
        unEqual = Integer.parseInt(tblPricesheet.getValueAt(8, 3).toString().toString().
                trim().length() == 0 ? "0" : tblPricesheet.getValueAt(8, 3).toString());

        priceSheet.setAmpliTude(ampliTude);
        priceSheet.setAmpliTudeUnit(ampliTudeUnit);
        priceSheet.setAppliedFrom(appliedFrom);
        priceSheet.setAppliedTo(appliedTo);
        priceSheet.setExportMax(exportMax);
        priceSheet.setExportMin(exportMin);
        priceSheet.setExportUnit(exportUnit);
        priceSheet.setIdClassification(idClassification);
        priceSheet.setMoneyUnitID(moneyUnitID);
        priceSheet.setPricesheetName(pricesheetName);
        priceSheet.setPricesheetID(pricesheetID);
        priceSheet.setSymmetricalPrice(symmetricalPrice);
        priceSheet.setTypeOfTaxes(typeOfTaxes);
        priceSheet.setUnEqual(unEqual);
        priceSheet.setUnitMoneyOfExportMax(unitMoneyOfExportMax);
        priceSheet.setUnitMoneyOfExportMin(unitMoneyOfExportMin);
        priceSheet.setUnitMoneyOfExportUnit(unitMoneyOfExportUnit);
        return priceSheetBN.update(priceSheet);
    }

    public void reset() {
        tblPricesheet.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {"Tên bảng giá", " ", "Mã SP", " "},
                    {"Mã bảng giá", " ", "Tên SP", " "},
                    {"Phân loại", " ", "Loại thuế", " "},
                    {"Đơn giá", " ", "Đơn vị tiền", " "},
                    {"Biên độ", " ", "", " "},
                    {"Giá min", " ", "Đơn vị tiền", " "},
                    {"Giá max", " ", "Đơn vị tiền", " "},
                    {"Áp dụng từ", " ", "Đến", " "},
                    {"Lập giá đối ứng", " ", "Chênh lệch", " "}
                },
                new String[]{
                    "", "", "", ""
                }) {

            boolean[] canEdit = new boolean[]{
                false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if ((columnIndex == 0) || ((columnIndex == 2 && rowIndex != 4))) {
                    return false;
                }
                if (rowIndex == 4 && columnIndex == 3) {
                    return false;
                }
                return true;
            }
        });
        cell = new PricesheetTableCell(this);
        tblPricesheet.getColumnModel().getColumn(1).setCellEditor(cell);
        tblPricesheet.getColumnModel().getColumn(2).setCellEditor(cell);
        tblPricesheet.getColumnModel().getColumn(3).setCellEditor(cell);
        //createKey = new CreateKey();
        String key = createKey("PRA");
        cell.getTxtPricesheetId().setText(key);
        tblPricesheet.setValueAt(key, 1, 1);
        resetColorRowTable();

    }

    public PriceSheet subInsertForSale(PriceSheet priceSheet) {
        float value = 0;
        float exportUnit = priceSheet.getExportUnit();
        float percent = priceSheet.getUnEqual();
        /**
         * Thiet lap lai phan loai mua-ban, ban-mua
         */
        int classificationIdActual = priceSheet.getIdClassification();
        String classificationName = "";
        int newClassificationIdActual = 0;
        Classification classification = new Classification();
        List<Classification> classifications = new ArrayList<Classification>();

        classifications = classification.getAccessDataOfEntity().selectAll();
        classification = (Classification) classification.getAccessDataOfEntity().getById(classificationIdActual);

        if (classification != null) {
            classificationName = classification.getClassificationName();
        }

        if (classificationName.equals("Mua")) {
            if (!classifications.isEmpty()) {
                for (Classification c : classifications) {
                    if (c.getClassificationName().equals("Bán")) {
                        newClassificationIdActual = c.getId();
                    }
                }
            }
        } else if (classificationName.equals("Bán")) {
            if (!classifications.isEmpty()) {
                for (Classification c : classifications) {
                    if (c.getClassificationName().equals("Mua")) {
                        newClassificationIdActual = c.getId();
                    }
                }
            }
        }

        value = exportUnit + (exportUnit * percent / 100);
        priceSheet.setExportUnit(value);
        if (priceSheet.getAmpliTudeUnit().equals("%")) {
            percent = priceSheet.getAmpliTude();
        } else {
            value = priceSheet.getAmpliTude();
        }
        value = priceSheet.getExportUnit() * percent / 100;
        priceSheet.setExportMax(exportUnit + value);
        priceSheet.setExportMin(exportUnit - value);
        priceSheet.setIdClassification(newClassificationIdActual);
        priceSheet.setSymmetricalPrice(false);
        if (priceSheetBN.insert(priceSheet)) {
            JOptionPane.showMessageDialog(null, "Saved for SymmetricalPrice!");
        } else {
            JOptionPane.showMessageDialog(null, "Failed for SymmetricalPrice!");
        }
        return priceSheet;
    }

    public void updateTable(PriceSheet priceSheet) {
        String productName = "";
        int productId = 0;
        Product product = null;
        Classification classification1 = new Classification();
        IClassificationBN classificationBN = Lookup.getDefault().lookup(IClassificationBN.class);
        classification1 = classificationBN.getById(priceSheet.getIdClassification());

        productId = priceSheet.getProductIdActual();
        if (productBN != null) {
            product = productBN.getById(productId);
        }
        if (product != null) {
            productName = product.getProductName();
        }

        Calendar c1 = priceSheet.getAppliedFrom();
        Calendar c2 = priceSheet.getAppliedTo();
        String date1 = c1.get(Calendar.DAY_OF_MONTH) + "/" + c1.get(Calendar.MONTH) + 1 + "/"
                + c1.get(Calendar.YEAR);
        String date2 = c2.get(Calendar.DAY_OF_MONTH) + "/" + c2.get(Calendar.MONTH) + 1 + "/"
                + c2.get(Calendar.YEAR);
        tblPricesheet.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{
                    {"Tên bảng giá", priceSheet.getPricesheetName(), "Mã SP", productId},
                    {"Mã bảng giá", priceSheet.getPricesheetID(), "Tên SP", productName},
                    {"Phân loại", classification1, "Loại thuế", priceSheet.getTypeOfTaxes()},
                    {"Đơn giá", priceSheet.getExportUnit(), "Đơn vị tiền", priceSheet.getUnitMoneyOfExportUnit()},
                    {"Biên độ", priceSheet.getAmpliTude(), priceSheet.getAmpliTudeUnit(), " "},
                    {"Giá min", priceSheet.getExportMin(), "Đơn vị tiền", priceSheet.getUnitMoneyOfExportMin()},
                    {"Giá max", priceSheet.getExportMax(), "Đơn vị tiền", priceSheet.getUnitMoneyOfExportMax()},
                    {"Áp dụng từ", date1, "Đến", date2},
                    {"Lập giá đối ứng", "Không", "Chênh lệch", 0}
                },
                new String[]{
                    "", "", "", ""
                }) {

            boolean[] canEdit = new boolean[]{
                false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if ((columnIndex == 0) || ((columnIndex == 2 && rowIndex != 4))) {
                    return false;
                }
                if (rowIndex == 4 && columnIndex == 3) {
                    return false;
                }
                return true;
            }
        });
        cell = new PricesheetTableCell(this);
        tblPricesheet.getColumnModel().getColumn(1).setCellEditor(cell);
        tblPricesheet.getColumnModel().getColumn(2).setCellEditor(cell);
        tblPricesheet.getColumnModel().getColumn(3).setCellEditor(cell);
    }
    
    /**
     * Sinh khóa tự động
     */
    protected String createKey(String prefix){
        CreateKey createKey = new CreateKey();
        KeyGenerate keyGenerate = createKey.createAKeyByParent(PriceSheet.class, prefix);
        return keyGenerate.toString();
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tblPricesheet.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tblPricesheet.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tblPricesheet, colorL, null, colorD, null);
        tblPricesheet.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tblPricesheet.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tblPricesheet.setFont(new Font(font, 0, size));
        
    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tblPricesheet.setForeground(color);
        tblPricesheet.repaint();
    }

    @Override
    public void resetColorTitle() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
        tblPricesheet.getTableHeader().setForeground(color);
        tblPricesheet.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tblPricesheet.setSelectionBackground(color);
        tblPricesheet.repaint();
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện tạo bảng giá mới";
    }

    public JTable getTblPricesheet() {
        return tblPricesheet;
    }

    public void setTblPricesheet(JTable tblPricesheet) {
        this.tblPricesheet = tblPricesheet;
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public void savePriceSheet() {
        savePricesheet();
    }

    @Override
    public void saveListPricesheet() {
        if (savePricesheet()) {
            TopComponent topComponent = WindowManager.getDefault().findTopComponent("PriceSheetCreatorTopComponent");
            if (topComponent != null) {
                if (topComponent.isOpened()) {
                    topComponent.close();
                }
            }
            TopComponent topComponent1 = WindowManager.getDefault().findTopComponent("PriceSheetViewerTopComponent");
            if (topComponent1 != null) {
                if (!topComponent1.isOpened()) {
                    topComponent1.open();
                }
            }
        }
    }

    @Override
    public void resetCookie() {
        reset();
    }

    @Override
    public void updatePricesheet() {
        if (updatePriceSheet(priceSheetPrivate.getId())) {
            JOptionPane.showMessageDialog(null, "Updated!");
        }
    }
}
