/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExtensionEnterprisePanel.java
 *
 * Created on Dec 21, 2011, 4:35:59 PM
 */
package vn.com.hkt.pilot.sb41.product.extW48.ui.panel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IProductBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.entities.Product;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.product.viewer.api.HelpTutorialProduct;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.product.viewer.api.IProductExtCreater;
import vn.com.hkt.pilot.sb41.Installer;
import vn.com.hkt.pilot.sb41.product.extW48.dao.ProductExt_W49BN;
import vn.com.hkt.pilot.sb41.product.extW48.entity.ProductExt_W49;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IProductExtCreater.class)
public class SB41_W49_Panel extends javax.swing.JPanel implements IProductExtCreater, ISaveExtention,
        IEnableTable, IGetObject, IResetFontSize, IUserInterface {

    private ProductExt_W49BN dao;
    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN;
    private List<SystemSoftware> listS;
    private int i = 4;
    private DefaultTableModel modelDiaChi;
    private int idProduct = 0;

    /** Creates new form ExtensionEnterprisePanel */
    public SB41_W49_Panel() {
        initComponents();
        sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);

        dao = new ProductExt_W49BN();
        listS = new ArrayList<SystemSoftware>();
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());

        jScrollPane1.setViewportBorder(null);

        panelTong.removeAll();
        panelTong.setBackground(new Color(242, 241, 240));
        panelTong.setLayout(new BorderLayout());
        panelTong.add(jScrollPane1, BorderLayout.NORTH);
        tableSB41W49.setTableHeader(null);
        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(jPanel1, BorderLayout.CENTER);
        this.setBackground(new Color(242, 241, 240));
        JLabel label = new JLabel("        Thông số kỹ thuật");
        label.setBackground(new Color(242, 241, 240));
        label.setFont((new Font(" ", Font.BOLD, 12)));
        label.setPreferredSize(new Dimension(WIDTH, 30));
        this.add(label, BorderLayout.NORTH);
        tableSB41W49.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableSB41W49.getColumnModel().getColumn(0).setMaxWidth(100);
        tableSB41W49.setRowSelectionAllowed(true);
        tableSB41W49.setColumnSelectionAllowed(false);
        tableSB41W49.setSelectionBackground(new Color(192, 210, 224));
        tableSB41W49.setForeground(color);
        StripedTableCellRenderer.installInColumn(tableSB41W49, colorL, null, colorD, null);

        tableSB41W49.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                tableMousePressed(e);
            }
        });
    }

    public JTable getTableSB41_W49() {
        return this.tableSB41W49;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTong = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSB41W49 = new javax.swing.JTable();

        panelTong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTong.setPreferredSize(new java.awt.Dimension(827, 161));

        jScrollPane1.setMinimumSize(new java.awt.Dimension(130, 130));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(130, 130));

        tableSB41W49.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Thông số", "Mô tả"},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""}
            },
            new String [] {
                "", ""
            }
        )
        {
            boolean[] canEdit = new boolean[]{
                true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (rowIndex == 0) return false;
                return canEdit[columnIndex];
            }
        }
    );
    tableSB41W49.setRowHeight(26);
    tableSB41W49.setShowHorizontalLines(false);
    tableSB41W49.setShowVerticalLines(false);
    jScrollPane1.setViewportView(tableSB41W49);

    javax.swing.GroupLayout panelTongLayout = new javax.swing.GroupLayout(panelTong);
    panelTong.setLayout(panelTongLayout);
    panelTongLayout.setHorizontalGroup(
        panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelTongLayout.createSequentialGroup()
            .addGap(253, 253, 253)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(432, Short.MAX_VALUE))
    );
    panelTongLayout.setVerticalGroup(
        panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelTongLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
            .addContainerGap(361, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelTong;
    private javax.swing.JTable tableSB41W49;
    // End of variables declaration//GEN-END:variables

    @Override
    public String toString() {
        return "Thông số kỹ thuật";
    }

    @Override
    public double getLevelNumber() {
        return 4.19;
    }

    @Override
    public JPanel getProductExtCreater() {
        return this;
    }

    @Override
    public Lookup getProductCreaterLookup() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void reset() {
        idProduct = 0;
        tableSB41W49.removeAll();
        tableSB41W49.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {"Thông số", "Mô tả"},
                    {"", ""},
                    {"", ""},
                    {"", ""},
                    {"", ""}
                },
                new String[]{
                    "", ""
                }) {

            boolean[] canEdit = new boolean[]{
                true, true
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (rowIndex == 0) {
                    return false;
                }
                return canEdit[columnIndex];
            }
        });
        tableSB41W49.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableSB41W49.getColumnModel().getColumn(0).setMaxWidth(100);
        tableSB41W49.setRowSelectionAllowed(true);
        tableSB41W49.setColumnSelectionAllowed(false);
        tableSB41W49.setTableHeader(null);
        resetColorWord();
        resetFont();
        resetSize();
        resetColorRowTable();
    }

    public ProductExt_W49 getProductExt_W49() {
        ProductExt_W49 bean = dao.getByObjectId(String.valueOf(idProduct));
        if (bean == null) {
            bean = new ProductExt_W49();
        }
        List<String> parameters = new ArrayList<String>();
        List<String> descriptions = new ArrayList<String>();
        int row = 1;
        try {
            while (row < tableSB41W49.getModel().getRowCount()) {
                parameters.add(tableSB41W49.getValueAt(row, 0).toString());
                descriptions.add(tableSB41W49.getValueAt(row, 1).toString());
                row++;
            }
        } catch (Exception ex) {
        } finally {
            bean.setProductIdActual(idProduct);
            bean.setDescriptions(descriptions);
            bean.setParameters(parameters);
        }

        return bean;
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableSB41W49.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableSB41W49.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableSB41W49, colorL, null, colorD, null);
        tableSB41W49.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableSB41W49.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableSB41W49.setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB41W49.setForeground(color);
        tableSB41W49.repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        tableSB41W49.getTableHeader().setForeground(color);
//        tableSB41W49.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableSB41W49.setSelectionBackground(color);
        tableSB41W49.repaint();
    }

    private void tableMousePressed(MouseEvent e) {
        SB41_W49Tutorial sB41_W49Tutorial = new SB41_W49Tutorial();
        if (tableSB41W49.getSelectedRow() == i) {
            modelDiaChi = (DefaultTableModel) tableSB41W49.getModel();
            i++;
            Object[] rows1 = {" ", " ", " "};
            modelDiaChi.addRow(rows1);
            tableSB41W49.repaint();
        }
        if (tableSB41W49.getSelectedColumn() == 0) {
            addFormEditID(1.10, sB41_W49Tutorial.getThongSo().getText());

        }
        if (tableSB41W49.getSelectedColumn() == 1) {
            addFormEditID(1.11, sB41_W49Tutorial.getMoTa().getText());

        }
    }

    @Override
    public void getObject(String id) {
        IProductBN productBN = Lookup.getDefault().lookup(IProductBN.class);
        Product p;
        try {
            p = productBN.getByObjectId(id);
            if (p == null) {
                return;
            }
        } catch (Exception ex) {
            return;
        }

        try {
            ProductExt_W49 bean = dao.getByObjectId(String.valueOf(p.getId()));
            resultEvent(bean);
        } catch (Exception ex) {
        }
    }

    private void resultEvent(ProductExt_W49 bean) {
        List<String> listParameter = bean.getParameters();
        List<String> listDescription = bean.getDescriptions();

        if (listParameter.size() != -1) {
            if (listParameter.size() < 4) {
                for (int i = 0; i < listParameter.size(); i++) {
                    tableSB41W49.setValueAt(listParameter.get(i), i + 1, 0);
                    tableSB41W49.setValueAt(listDescription.get(i), i + 1, 1);
                }
                for (int i = listParameter.size(); i < 4; i++) {
                    tableSB41W49.setValueAt(" ", i + 1, 0);
                    tableSB41W49.setValueAt(" ", i + 1, 1);
                }
            } else {
                for (int i = 0; i < 4; i++) {
                    tableSB41W49.setValueAt(listParameter.get(i), i + 1, 0);
                    tableSB41W49.setValueAt(listDescription.get(i), i + 1, 1);
                }
                modelDiaChi = (DefaultTableModel) tableSB41W49.getModel();
                for (int i = 4; i < listParameter.size(); i++) {
                    Object[] row = {listParameter.get(i), listDescription.get(i)};
                    modelDiaChi.addRow(row);
                }

            }
        }
    }

    public void addFormEditID(double i, String str) {
        Collection<? extends HelpTutorialProduct> allSave = Lookup.getDefault().lookupAll(HelpTutorialProduct.class);
        for (HelpTutorialProduct editCookie : allSave) {
            editCookie.getTutorial(i, str);
        }
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện thông số sản phẩm";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public void enableTable(boolean ok) throws IOException {
        tableSB41W49.setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tableSB41W49);
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        idProduct = entity.getId();
    }

    @Override
    public IEntity save() {
        if (idProduct == 0) {
            return null;
        }

        ProductExt_W49 bean = this.getProductExt_W49();
        dao.update(bean);
        return bean;
    }
}