/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.pilot.sb41.product.extW48.ui.window;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.ICityBN;
import vn.com.hkt.basic.api.ICountryBN;
import vn.com.hkt.basic.api.IProductBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.entities.City;
import vn.com.hkt.pilot.entities.Country;
import vn.com.hkt.pilot.entities.Product;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.product.viewer.api.HelpTutorialProduct;
import vn.com.hkt.pilot.product.viewer.api.IProductExtCreater;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.pilot.sb41.product.extW48.dao.ProductExtW48_BN;
import vn.com.hkt.pilot.sb41.product.extW48.dao.ProductStatusBN;
import vn.com.hkt.pilot.sb41.product.extW48.entity.ProductExt_W48;
import vn.com.hkt.pilot.sb41.product.extW48.entity.ProductStatus;
import vn.com.hkt.pilot.sb41.product.extW48.ui.panel.ExtProductW48Cell;
import vn.com.hkt.pilot.sb41.product.extW48.ui.panel.SB41_W48_Panel;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.product.extw48.ui.window//ExtensionProduct//EN",
autostore = false)
@TopComponent.Description(preferredID = "ExtensionProductTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.product.extw48.ui.window.ExtensionProductTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ExtensionProductAction",
preferredID = "ExtensionProductTopComponent")
@ServiceProvider(service = IProductExtCreater.class)
public final class ExtensionProductTopComponent extends TopComponent implements IProductExtCreater, ISaveExtention,
        IEnableTable, IResetFontSize, IGetObject {

    private SB41_W48_Panel extensionProductPanel;
    private int idProduct = 0;
    private ProductExtW48_BN dao;
    private int size;
    private String font;
    private ExtProductW48Cell cell;
    private ISystemSotfwareBN sotfwareBN;
    private List<SystemSoftware> listS;

    public ExtensionProductTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ExtensionProductTopComponent.class, "CTL_ExtensionProductTopComponent"));
        setToolTipText(NbBundle.getMessage(ExtensionProductTopComponent.class, "HINT_ExtensionProductTopComponent"));
        extensionProductPanel = new SB41_W48_Panel();
        cell = extensionProductPanel.getCell();

        sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
        listS = new ArrayList<SystemSoftware>();
        dao = new ProductExtW48_BN();
        cell.loadCboCoutry();

        extensionProductPanel.getTableProduct().addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseReleased(MouseEvent e) {
                tableExtensionProductMousePressed(e);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                tableExtensionProductMousePressed(e);
            }
        });


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public JPanel getProductExtCreater() {
        return this.extensionProductPanel;
    }

    @Override
    public Lookup getProductCreaterLookup() {
        return null;
    }

    @Override
    public double getLevelNumber() {
        cell.loadCboStatus();
        return 4.18;
    }

    public ProductExt_W48 getProductExt_W48() {

        String nameEnglish = extensionProductPanel.getTableProduct().getValueAt(0, 1).toString();
        String descriptiveNote = extensionProductPanel.getTableProduct().getValueAt(4, 1).toString();

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        Calendar c3 = Calendar.getInstance();

        Date d1 = new Date();
        Date d2 = new Date();
        Date d3 = new Date();

        try {
            String date1 = extensionProductPanel.getTableProduct().getValueAt(2, 1).toString().trim();
            d1 = sdf.parse(date1);
            c1.setTime(d1);
        } catch (Exception ex) {
            d1 = null;
        }

        try {
            String date2 = extensionProductPanel.getTableProduct().getValueAt(2, 3).toString().trim();
            d2 = sdf.parse(date2);
            c2.setTime(d2);
        } catch (Exception ex) {
            d2 = null;
        }
        try {
            String date3 = extensionProductPanel.getTableProduct().getValueAt(3, 1).toString().trim();
            d3 = sdf.parse(date3);
            c3.setTime(d3);
        } catch (Exception ex) {
            d3 = null;
        }

        ProductStatus status;
        try {
            status = (ProductStatus) extensionProductPanel.getTableProduct().getValueAt(3, 3);
        } catch (ClassCastException e) {
            status = null;
        }

        ProductExt_W48 bean = dao.getByObjectId(String.valueOf(idProduct));
        if (bean == null) {
            bean = new ProductExt_W48();
        }
        int idCountry;

        try {
            Country country = (Country) extensionProductPanel.getTableProduct().getValueAt(1, 1);
            idCountry = country.getId();
        } catch (ClassCastException ex) {
            idCountry = 0;
        }

        int idCity;
        try {
            City city = (City) extensionProductPanel.getTableProduct().getValueAt(1, 3);
            idCity = city.getId();
        } catch (ClassCastException ex) {
            idCity = 0;
        }


        bean.setProductIdActual(idProduct);
        bean.setNameEnglish(nameEnglish);
        bean.setDescriptiveNote(descriptiveNote);
        bean.setCityIdActual(idCity);
        bean.setCountryIdActual(idCountry);
        if (d1 != null) {
            bean.setDateOfProduction(c1);
        }
        if (d2 != null) {
            bean.setDateEdit(c2);
        }
        if (d3 != null) {
            bean.setExpiryDate(c3);
        }
        if (status != null) {
            bean.setStatusIdActual(status.getId());
        }
        return bean;
    }

    @Override
    public void reset() {
        extensionProductPanel.reset();
        idProduct = 0;
        cell = new ExtProductW48Cell();
        extensionProductPanel.getTableProduct().getColumnModel().getColumn(1).setCellEditor(cell);
        extensionProductPanel.getTableProduct().getColumnModel().getColumn(3).setCellEditor(cell);

        extensionProductPanel.getTableProduct().getColumnModel().getColumn(0).setPreferredWidth(100);
        extensionProductPanel.getTableProduct().getColumnModel().getColumn(0).setMaxWidth(100);
        extensionProductPanel.getTableProduct().getColumnModel().getColumn(2).setPreferredWidth(100);
        extensionProductPanel.getTableProduct().getColumnModel().getColumn(2).setMaxWidth(100);
        extensionProductPanel.getTableProduct().setRowSelectionAllowed(true);
        extensionProductPanel.getTableProduct().setColumnSelectionAllowed(false);

    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = extensionProductPanel.getTableProduct().getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        extensionProductPanel.getTableProduct().setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(extensionProductPanel.getTableProduct(), colorL, null, colorD, null);
        extensionProductPanel.getTableProduct().repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = extensionProductPanel.getTableProduct().getFont().getFontName();
        size = listS.get(0).getSizeWord();
        extensionProductPanel.getTableProduct().setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        extensionProductPanel.getTableProduct().setForeground(color);
        extensionProductPanel.getTableProduct().repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        extensionProductPanel.getTableProduct().getTableHeader().setForeground(color);
//        extensionProductPanel.getTableProduct().repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        extensionProductPanel.getTableProduct().setSelectionBackground(color);
        extensionProductPanel.getTableProduct().repaint();
    }

    @Override
    public void getObject(String id) {
        IProductBN productBN = Lookup.getDefault().lookup(IProductBN.class);
        Product p;
        try {
            p = productBN.getByObjectId(id);
            if (p == null) {
                return;
            }
        } catch (Exception ex) {
            return;
        }

        try {
            ProductExt_W48 bean = dao.getByObjectId(String.valueOf(p.getId()));
            resultEvent(bean);
        } catch (Exception ex) {
        }
    }

    private void resultEvent(ProductExt_W48 bean) {
        ICountryBN countryBN = Lookup.getDefault().lookup(ICountryBN.class);
        ICityBN cityBN = Lookup.getDefault().lookup(ICityBN.class);
        try {
            String dateOfProduct = "";
            String dateEdit = "";
            String expiryDate = "";
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            try {
                Calendar c1 = bean.getDateOfProduction();
                dateOfProduct = sdf.format(c1.getTime());
            } catch (Exception ex) {
                dateOfProduct = "";
            }
            try {
                Calendar c2 = bean.getDateEdit();
                dateEdit = sdf.format(c2.getTime());
            } catch (Exception ex) {
                dateEdit = "";
            }
            try {
                Calendar c3 = bean.getExpiryDate();
                expiryDate = sdf.format(c3.getTime());
            } catch (Exception ex) {
                expiryDate = "";
            }

            // Trang thai 
            ProductStatus p;
            try {
                p = (new ProductStatusBN()).getById(bean.getStatusIdActual());
                extensionProductPanel.getTableProduct().setValueAt(bean.getStatusIdActual(), 3, 3);
            } catch (Exception ex) {
                extensionProductPanel.getTableProduct().setValueAt(" ", 3, 3);
            }

            extensionProductPanel.getTableProduct().setValueAt(bean.getNameEnglish(), 0, 1);
            if (bean.getCountryIdActual() != 0) {
                Country country = countryBN.getById(bean.getCountryIdActual());
                if (country != null) {
                    extensionProductPanel.getTableProduct().setValueAt(country, 1, 1);
                }
            }
            int idCity = bean.getCityIdActual();
            if (idCity != 0) {
                City city = cityBN.getById(idCity);
                if (city != null) {
                    extensionProductPanel.getTableProduct().setValueAt(city, 1, 3);
                }
            }

            extensionProductPanel.getTableProduct().setValueAt(dateOfProduct, 2, 1);
            extensionProductPanel.getTableProduct().setValueAt(dateEdit, 2, 3);
            extensionProductPanel.getTableProduct().setValueAt(expiryDate, 3, 1);
            extensionProductPanel.getTableProduct().setValueAt(bean.getDescriptiveNote(), 4, 1);
            extensionProductPanel.getTableProduct().setValueAt(bean.getPriceSheetIdActual(), 5, 1);
            extensionProductPanel.getTableProduct().setValueAt(bean.getPromotionIdActual(), 5, 3);
        } catch (Exception ex) {
        }

    }
    JTable temp = new JTable();

    private void tableExtensionProductMousePressed(MouseEvent e) {
        SB41_W48Tutorial sB41_W48Tutorial = new SB41_W48Tutorial();
        temp = extensionProductPanel.getTableProduct();
        if (temp.getSelectedRow() == 3
                && temp.getSelectedColumn() == 3) {
            addFormEditID(1.33, " ");
        }
        if (temp.getSelectedRow() == 1) {
            addFormEditID(1.1, " ");
        }
        double k = 0;
        String[] str1 = {sB41_W48Tutorial.getTenTiengAnh().getText(), "", sB41_W48Tutorial.getNgaySanXuat().getText(),
            sB41_W48Tutorial.getHanSuDung().getText(), sB41_W48Tutorial.getMoTaGhiChu().getText(), ""};

        for (int i = 0; i < str1.length; i++) {
            if (temp.getSelectedRow() == i && temp.getSelectedColumn() == 1) {
                k = (double) (2 + 0.1 * i + 0.01 * 1);
                k = Math.round(k * 1000) * 1.0 / 1000;
                addFormEditID(k, str1[i]);
            }

        }
        if (temp.getSelectedRow() == 2 && temp.getSelectedColumn() == 3) {
            addFormEditID(2.23, sB41_W48Tutorial.getNgayChinhSua().getText());
        }

    }

    public void addFormEditID(double i, String str) {
        Collection<? extends HelpTutorialProduct> allSave = Lookup.getDefault().lookupAll(HelpTutorialProduct.class);
        for (HelpTutorialProduct editCookie : allSave) {
            editCookie.getTutorial(i, str);
        }
    }

    @Override
    public void enableTable(boolean ok) throws IOException {
        extensionProductPanel.getTableProduct().setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(extensionProductPanel.getTableProduct());
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        idProduct = entity.getId();
    }

    @Override
    public IEntity save() {
        if (idProduct == 0) {
            return null;
        }

        ProductExt_W48 bean = new ProductExt_W48();
        bean = this.getProductExt_W48();
        dao.update(bean);
        return bean;

    }
}
