/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExtensionEnterprisePanel.java
 *
 * Created on Dec 21, 2011, 4:35:59 PM
 */
package vn.com.hkt.pilot.sb23.ui.panel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.basic.toolbar.BasicToolbarManager;
import vn.com.hkt.basic.toolbar.api.system.ISystemToolbar;
import vn.com.hkt.pilot.enterprise.viewer.api.ResetCookie;
import vn.com.hkt.pilot.enterprise.viewer.api.SaveCookie;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.person.viewer.api.HelpTutorialPerson;
import vn.com.hkt.pilot.person.viewer.api.IPersonExtCreater;
import vn.com.hkt.pilot.sb23.Installer;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IPersonExtCreater.class)
public class ExtensionSB23Panel extends javax.swing.JPanel implements IPersonExtCreater,
        SaveCookie, ResetCookie, IResetFontSize, LookupListener, IUserInterface {

    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();
    private Lookup.Result<Object> resultSelectTable;
    ExtensionSB23Cell cell = new ExtensionSB23Cell();
    SB23Tutorial sB23Tutorial = new SB23Tutorial();

    /**
     * Creates new form ExtensionEnterprisePanel
     */
    public ExtensionSB23Panel() {
        initComponents();
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB23.getColumnModel().getColumn(1).setCellEditor(cell);
        tableSB23.getColumnModel().getColumn(3).setCellEditor(cell);
        tableSB23.setTableHeader(null);
        tableSB23.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableSB23.getColumnModel().getColumn(0).setMaxWidth(100);
        tableSB23.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableSB23.getColumnModel().getColumn(2).setMaxWidth(100);
        tableSB23.setRowSelectionAllowed(true);
        tableSB23.setColumnSelectionAllowed(false);
        tableSB23.setSelectionBackground(new Color(192, 210, 224));
        tableSB23.setForeground(color);
        tableSB23.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        StripedTableCellRenderer.installInColumn(tableSB23, colorL, null, colorD, null);

        panelTong.removeAll();
        panelTong.setBackground(new Color(242, 241, 240));
        panelTong.setLayout(new BorderLayout());

        panelTong.add(tableSB23, BorderLayout.NORTH);
        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(jPanel1, BorderLayout.CENTER);
        this.setBackground(new Color(242, 241, 240));
        JLabel label = new JLabel("             Hợp đồng");
        label.setBackground(new Color(242, 241, 240));
        label.setFont((new Font(" ", Font.BOLD, 14)));
        label.setPreferredSize(new Dimension(WIDTH, 30));
        this.add(label, BorderLayout.NORTH);

        // result dùng để bắt sự kiện xóa select table
        resultSelectTable = Utilities.actionsGlobalContext().lookupResult(Object.class);
        resultSelectTable.addLookupListener(this);
    }

    public JTable getTableSB23() {
        return this.tableSB23;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor. /** This method is called from within the
     * constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTong = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSB23 = new javax.swing.JTable();

        panelTong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTong.setPreferredSize(new java.awt.Dimension(827, 165));

        tableSB23.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Chức vụ", " ", "Loại hợp đồng", " "},
                {"Ngày bắt đầu", " ", "Ngày hết hạn", " "},
                {"Lương tối thiểu", " ", "Lương tối đa", " "},
                {"lương hiện tại", " ", "Tổng phụ cấp", " "},
                {"Tổng nhận", " ", "Đã trả", " "},
                {" ", " ", "Số dư", " "}
            },
            new String[]{
                "", "", "" ,""
            }) {

                boolean[] canEdit = new boolean[]{
                    false, true, false ,true
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    if (rowIndex == 5 )
                    if (columnIndex == 0 || columnIndex == 1) return false ;
                    return canEdit[columnIndex];
                }
            }
        );
        tableSB23.setRowHeight(26);
        tableSB23.setShowHorizontalLines(false);
        tableSB23.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tableSB23);

        javax.swing.GroupLayout panelTongLayout = new javax.swing.GroupLayout(panelTong);
        panelTong.setLayout(panelTongLayout);
        panelTongLayout.setHorizontalGroup(
            panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTongLayout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(249, Short.MAX_VALUE))
        );
        panelTongLayout.setVerticalGroup(
            panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTongLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addContainerGap(417, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelTong;
    private javax.swing.JTable tableSB23;
    // End of variables declaration//GEN-END:variables

    @Override
    public String toString() {
        return "Hợp đồng";
    }

    @Override
    public double getLevelNumber() {
        return 2.3;
    }

    @Override
    public JPanel getPersonExtCreater() {
        return this;
    }

    @Override
    public Lookup getPersonExtLookup() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void SaveCookie() throws IOException {
        TopComponent tc = WindowManager.getDefault().findTopComponent("PersonCreatorTopComponent");
        if (tc.isShowing()) {
        }
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableSB23.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableSB23.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableSB23, colorL, null, colorD, null);
        tableSB23.repaint();

    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableSB23.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableSB23.setFont(new Font(font, 0, size));
         
    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB23.setForeground(color);
        tableSB23.repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        tableSB23.getTableHeader().setForeground(color);
//        tableSB23.repaint();
    }

    @Override
    public void resetColorMouse() {

        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableSB23.setSelectionBackground(color);
        tableSB23.repaint();
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (le.getSource() == resultSelectTable) {
            resultSelectTable = (Lookup.Result) le.getSource();
            Collection<? extends Object> allString = resultSelectTable.allInstances();
            if (allString != null) {
                tableSB23.clearSelection();
            }
        }
    }

    @Override
    public void resetCookie() throws IOException {
        reset();
    }

    @Override
    public void resetSelectTable(double d) throws IOException {
        if (d != this.getLevelNumber()){
            this.tableSB23.clearSelection();
        }
    }

    private void reset() {
        cell.reset();

        tableSB23.setValueAt("", 0, 1);
        tableSB23.setValueAt("", 1, 1);
        tableSB23.setValueAt("", 2, 1);
        tableSB23.setValueAt("", 3, 1);
        tableSB23.setValueAt("", 4, 1);
        tableSB23.setValueAt("", 5, 1);

        tableSB23.setValueAt("", 0, 3);
        tableSB23.setValueAt("", 1, 3);
        tableSB23.setValueAt("", 2, 3);
        tableSB23.setValueAt("", 3, 3);
        tableSB23.setValueAt("", 4, 3);
        tableSB23.setValueAt("", 5, 3);
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện thông tin hợp đồng";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    private void tableMousePressed(MouseEvent evt) {
        int i = 0, j = 1;
        double k = 0;
        String[] str1 = {"", sB23Tutorial.getNgayBatDau().getText(), sB23Tutorial.getLuongToiThieu().getText(),
            sB23Tutorial.getLuongHienTai().getText(), sB23Tutorial.getTongNhan().getText(), sB23Tutorial.getThuong().getText()};
        String[] str2 = {"", sB23Tutorial.getNgayHetHan().getText(), sB23Tutorial.getLuongToiDa().getText(), sB23Tutorial.getTongPhuCap().getText(),
            sB23Tutorial.getDaTra().getText(), sB23Tutorial.getSoDu().getText()};
        for (i = 1; i < str1.length; i++) {
            if (tableSB23.getSelectedRow() == i && tableSB23.getSelectedColumn() == 1) {
                k = (double) (5 + 0.1 * i + 0.01 * 1);
                k = Math.round(k * 1000) * 1.0 / 1000;

                addFormEditID(k, str1[i]);
            }
        }
        for (i = 0; i < str2.length; i++) {
            if (tableSB23.getSelectedRow() == i && tableSB23.getSelectedColumn() == 3) {
                k = (double) (5 + 0.1 * i + 0.01 * 3);
                k = Math.round(k * 1000) * 1.0 / 1000;
                addFormEditID(k, str2[i]);
            }
        }
        this.resetSelectTable() ;
    }

      private void resetSelectTable() {
        // Reset select table
        Collection<? extends ResetCookie> allResetCookie = Lookup.getDefault().lookupAll(ResetCookie.class);
        for (ResetCookie rc : allResetCookie) {
            try {
                rc.resetSelectTable(this.getLevelNumber());
            } catch (IOException ex) {
            }
        }
    }
    
    private void addFormEditID(double k, String str) {
        Collection<? extends HelpTutorialPerson> allSave = Lookup.getDefault().lookupAll(HelpTutorialPerson.class);
        for (HelpTutorialPerson editCookie : allSave) {
            editCookie.getTutorial(k, str);
        }
    }

    @Override
    public boolean checkValidate() {
        return true;
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tableSB23);
        return lt;
    }
}
