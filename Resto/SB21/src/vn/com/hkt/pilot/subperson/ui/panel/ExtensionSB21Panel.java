/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExtensionEnterprisePanel.java
 *
 * Created on Dec 21, 2011, 4:35:59 PM
 */
package vn.com.hkt.pilot.subperson.ui.panel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.ICityBN;
import vn.com.hkt.basic.api.ICountryBN;
import vn.com.hkt.basic.api.IPersonBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.enterprise.viewer.api.ResetCookie;
import vn.com.hkt.pilot.entities.City;
import vn.com.hkt.pilot.entities.Country;
import vn.com.hkt.pilot.entities.Person;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.person.viewer.api.HelpTutorialPerson;
import vn.com.hkt.pilot.person.viewer.api.IPersonExtCreater;
import vn.com.hkt.pilot.subperson.Installer;
import vn.com.hkt.pilot.subperson.dao.SubPersonBN;
import vn.com.hkt.pilot.subperson.entity.SubPerson;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IPersonExtCreater.class)
public class ExtensionSB21Panel extends javax.swing.JPanel implements IPersonExtCreater,
       ISaveExtention, IEnableTable, IResetFontSize, IGetObject, IUserInterface {

    private IPersonBN personBN = Lookup.getDefault().lookup(IPersonBN.class);
    private SubPersonBN dao = new SubPersonBN();
    private Lookup lookup = null;
    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
    private List<SystemSoftware> listS = new ArrayList<SystemSoftware>();
    private ICountryBN countryBN = Lookup.getDefault().lookup(ICountryBN.class);
    private ICityBN cityBN = Lookup.getDefault().lookup(ICityBN.class);
    private int idPerson = 0;
    /**
     * Creates new form ExtensionEnterprisePanel
     */
    private ExtSB21Cell cell = new ExtSB21Cell();
    private SB21Tutorial sB21Tutorial = new SB21Tutorial();

    public ExtensionSB21Panel() {
        initComponents();
        panelTong.removeAll();
        panelTong.setBackground(new Color(242, 241, 240));
        panelTong.setLayout(new BorderLayout());

        panelTong.add(tableSB21, BorderLayout.NORTH);
        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(jPanel1, BorderLayout.CENTER);
        this.setBackground(new Color(242, 241, 240));
        JLabel label = new JLabel("             Thông tin cá nhân");
        label.setBackground(new Color(242, 241, 240));
        label.setFont((new Font(" ", Font.BOLD, 14)));
        label.setPreferredSize(new Dimension(WIDTH, 30));
        this.add(label, BorderLayout.NORTH);

        tableSB21.getColumnModel().getColumn(1).setCellEditor(cell);
        tableSB21.getColumnModel().getColumn(3).setCellEditor(cell);
        tableSB21.getColumnModel().getColumn(2).setCellEditor(cell);
        loadtable();


        //         Bắt sự kiện select row của table 
        tableSB21.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
    }

    public JTable getTableSB21() {
        return this.tableSB21;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTong = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSB21 = new javax.swing.JTable();

        panelTong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTong.setPreferredSize(new java.awt.Dimension(827, 165));

        tableSB21.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{
                {"Số CMND", " ", "Giới tính", " "},
                {"Ngày sinh", " ", "Tuổi", " "},
                {"Chiều cao (cm)", " ", "Cân nặng(kg)", " "},
                {"Tình trạng hôn nhân", " ", "Số con", " "},
                {"Điện thoại", " ", "Mobile", " "},
                {"Email", " ", "Web", " "},
                {"Địa chỉ", " ", " ", " "}
            },
            new String[]{
                "", "", "", ""
            }) {

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    if (columnIndex == 1 || columnIndex == 3) {
                        return true;
                    } else {
                        if (columnIndex == 2 && rowIndex == 6) {
                            return true;
                        }
                        return false;
                    }

                }
            });
            tableSB21.setRowHeight(26);
            tableSB21.setShowHorizontalLines(false);
            tableSB21.setShowVerticalLines(false);
            jScrollPane2.setViewportView(tableSB21);

            javax.swing.GroupLayout panelTongLayout = new javax.swing.GroupLayout(panelTong);
            panelTong.setLayout(panelTongLayout);
            panelTongLayout.setHorizontalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelTongLayout.createSequentialGroup()
                    .addGap(248, 248, 248)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(249, Short.MAX_VALUE))
            );
            panelTongLayout.setVerticalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelTongLayout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addContainerGap(417, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
        }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelTong;
    private javax.swing.JTable tableSB21;
    // End of variables declaration//GEN-END:variables

    @Override
    public String toString() {
        return "Thông tin quy mô";
    }

    @Override
    public double getLevelNumber() {
        return 2.1;
    }

    @Override
    public JPanel getPersonExtCreater() {
        return this;
    }

    @Override
    public Lookup getPersonExtLookup() {
        return lookup;
    }


    @Override
    public void reset() {
        idPerson = 0;
        tableSB21.setValueAt(" ", 0, 1);
        tableSB21.setValueAt(" ", 1, 1);
        tableSB21.setValueAt(" ", 2, 1);
        tableSB21.setValueAt(" ", 3, 1);
        tableSB21.setValueAt(" ", 4, 1);
        tableSB21.setValueAt(" ", 5, 1);
        tableSB21.setValueAt(" ", 6, 1);

        tableSB21.setValueAt(" ", 0, 3);
        tableSB21.setValueAt(" ", 1, 3);
        tableSB21.setValueAt(" ", 2, 3);
        tableSB21.setValueAt(" ", 3, 3);
        tableSB21.setValueAt(" ", 4, 3);
        tableSB21.setValueAt(" ", 5, 3);

        cell = new ExtSB21Cell();
        tableSB21.getColumnModel().getColumn(1).setCellEditor(cell);
        tableSB21.getColumnModel().getColumn(3).setCellEditor(cell);
        tableSB21.getColumnModel().getColumn(2).setCellEditor(cell);

    }

    public void saves() {
    }

    private void loadtable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB21.setSelectionBackground(new Color(192, 210, 224));
        StripedTableCellRenderer.installInColumn(tableSB21, colorL, null, colorD, null);
        tableSB21.setForeground(color);

        tableSB21.setTableHeader(null);
        tableSB21.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableSB21.getColumnModel().getColumn(0).setMaxWidth(100);
        tableSB21.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableSB21.getColumnModel().getColumn(2).setMaxWidth(100);
        tableSB21.setRowSelectionAllowed(true);
        tableSB21.setColumnSelectionAllowed(false);
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableSB21.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableSB21.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableSB21, colorL, null, colorD, null);
        tableSB21.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableSB21.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableSB21.setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB21.setForeground(color);
        tableSB21.repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        tableSB21.getTableHeader().setForeground(color);
//        tableSB21.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableSB21.setSelectionBackground(color);
        tableSB21.repaint();
    }

    private void tableMousePressed(MouseEvent evt) {
        if (tableSB21.getSelectedRow() == 6) {
            addFormEditID(2.06, " ");
        }
        if (tableSB21.getSelectedRow() == 0 && tableSB21.getSelectedColumn() == 1) {
            addFormEditID(2.01, sB21Tutorial.getTxtIdentityCard().getText());
        }
        if (tableSB21.getSelectedRow() == 0 && tableSB21.getSelectedColumn() == 3) {
            addFormEditID(2.03, sB21Tutorial.getTxtGender().getText());
        }
        if (tableSB21.getSelectedRow() == 1 && tableSB21.getSelectedColumn() == 1) {
            addFormEditID(2.11, sB21Tutorial.getTxtBirthDay().getText());
        }
        if (tableSB21.getSelectedRow() == 1 && tableSB21.getSelectedColumn() == 3) {
            addFormEditID(2.13, sB21Tutorial.getTxtAge().getText());
        }
        if (tableSB21.getSelectedRow() == 2 && tableSB21.getSelectedColumn() == 1) {
            addFormEditID(2.21, sB21Tutorial.getTxtHeight().getText());
        }
        if (tableSB21.getSelectedRow() == 2 && tableSB21.getSelectedColumn() == 3) {
            addFormEditID(2.23, sB21Tutorial.getTxtWeight().getText());
        }
        if (tableSB21.getSelectedRow() == 3 && tableSB21.getSelectedColumn() == 1) {
            addFormEditID(2.31, sB21Tutorial.getTxtMaritalStatus().getText());
        }
        if (tableSB21.getSelectedRow() == 3 && tableSB21.getSelectedColumn() == 3) {
            addFormEditID(2.33, sB21Tutorial.getTxtChildrenNum().getText());
        }
        if (tableSB21.getSelectedRow() == 4 && tableSB21.getSelectedColumn() == 1) {
            addFormEditID(2.41, sB21Tutorial.getTxtPhoneNumber().getText());
        }
        if (tableSB21.getSelectedRow() == 4 && tableSB21.getSelectedColumn() == 3) {
            addFormEditID(2.43, sB21Tutorial.getTxtMobileNumber().getText());
        }
        if (tableSB21.getSelectedRow() == 5 && tableSB21.getSelectedColumn() == 1) {
            addFormEditID(2.51, sB21Tutorial.getTxtEmail().getText());
        }
        if (tableSB21.getSelectedRow() == 5 && tableSB21.getSelectedColumn() == 3) {
            addFormEditID(2.53, sB21Tutorial.getTxtWebName().getText());
        }
    }    

    private void addFormEditID(double i, String str) {
        Collection<? extends HelpTutorialPerson> allSave = Lookup.getDefault().lookupAll(HelpTutorialPerson.class);
        for (HelpTutorialPerson editCookie : allSave) {
            editCookie.getTutorial(i, str);
        }
    }
    
    @Override
    public void getObject(String id) {
        Person person = personBN.getByObjectId(id);
        if (person != null) {
            SubPerson bean = dao.getByObjectId(String.valueOf(person.getId()));
            Country country = null;
            try {
                country = countryBN.getById(bean.getCountryIdActual());
            } catch (Exception e) {
            }

            if (country == null) {
                country = new Country();
            }
            City city = cityBN.getById(bean.getCityIdActual());
            if (city == null) {
                city = new City();
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            String birthday = "";
            try {
                Calendar c1 = bean.getBirthDay();
                birthday = sdf.format(c1.getTime());
            } catch (Exception ex) {
                birthday = "";
            }

            Object[] obj1 = {bean.getIdentityCard(), birthday, bean.getHeight(), bean.getMaritalStatus(), bean.getPhoneNumber(), bean.getEmail(), bean.getAddress()};
            Object[] obj2 = {bean.getGender(), "", bean.getWeight(), bean.getChildrenNum(), bean.getMobileNumber(), bean.getWebName(), city};
            for (int i = 0; i < tableSB21.getRowCount(); i++) {
                tableSB21.setValueAt(obj1[i], i, 1);
                tableSB21.setValueAt(obj2[i], i, 3);
            }
            tableSB21.setValueAt(country, 6, 2);
            ExtSB21Cell personcell = new ExtSB21Cell();
            personcell.getTxtAddress().setText(bean.getAddress());
            personcell.getTxtChilrenNum().setText(String.valueOf(bean.getChildrenNum()));
            personcell.getTxtEmail().setText(bean.getEmail());
            personcell.getTxtHeight().setText(String.valueOf(bean.getHeight()));
            personcell.getTxtIdentityCard().setText(bean.getIdentityCard());
            personcell.getTxtMobile().setText(bean.getMobileNumber());
            personcell.getTxtWeb().setText(bean.getWebName());
            personcell.getTxtWeight().setText(String.valueOf(bean.getWeight()));
            personcell.getTxtPhone().setText(bean.getPhoneNumber());
            // chua set duoc gia tri cho tuoi
            tableSB21.getColumnModel().getColumn(1).setCellEditor(personcell);
            tableSB21.getColumnModel().getColumn(3).setCellEditor(personcell);
            resetColorTitle();
            resetColorWord();
            resetFont();
            resetColorRowTable();

        } else {
            return;
        }

    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện thông tin chi tiết về cá nhân";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public void enableTable(boolean ok) throws IOException {
        tableSB21.setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tableSB21);
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        idPerson = entity.getId();
    }

    @Override
    public IEntity save() {
        if (idPerson == 0) {
            return null;
        }
        String identityCard = tableSB21.getValueAt(0, 1).toString();
        Calendar c1 = Calendar.getInstance();

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Date d1 = new Date();
        try {
            String date = tableSB21.getValueAt(1, 1).toString();
            d1 = sdf.parse(date);
            c1.setTime(d1);
        } catch (Exception e) {
            d1 = null;
        }

        String gender = tableSB21.getValueAt(0, 3).toString();
        int height;
        try {
            height = Integer.parseInt(tableSB21.getValueAt(2, 1).toString().trim());
        } catch (Exception e) {
            height = 0;
        }
        double weight = 0;
        try {
            weight = Double.parseDouble(tableSB21.getValueAt(2, 3).toString().trim());
        } catch (Exception e) {
            weight = 0;
        }
        String marital = tableSB21.getValueAt(3, 1).toString();
        int childrenNumber;
        try {
            childrenNumber = Integer.parseInt(tableSB21.getValueAt(3, 3).toString());
        } catch (Exception e) {
            childrenNumber = 0;
        }
        String phone = tableSB21.getValueAt(4, 1).toString();
        String mobile = tableSB21.getValueAt(4, 3).toString();
        String email = tableSB21.getValueAt(5, 1).toString();
        String web = tableSB21.getValueAt(5, 3).toString();
        String address = tableSB21.getValueAt(6, 1).toString();
        int idCity;
        int idCountry;

        if (tableSB21.getValueAt(6, 2) != null && tableSB21.getValueAt(6, 2).toString() != null
                && tableSB21.getValueAt(6, 2).toString().trim().length() != 0) {
            Country country = (Country) tableSB21.getValueAt(6, 2);
            idCountry = country.getId();
        } else {
            idCountry = 0;
        }
        if (tableSB21.getValueAt(6, 3) != null && tableSB21.getValueAt(6, 3).toString() != null
                && tableSB21.getValueAt(6, 3).toString().trim().length() != 0) {

            City city = (City) tableSB21.getValueAt(6, 3);
            idCity = city.getId();
        } else {
            idCity = 0;
        }

        SubPerson bean;
        bean = dao.getByObjectId(String.valueOf(idPerson));
        if (bean == null) {
            bean = new SubPerson();
        }

        bean.setPersonIdActual(idPerson);
        bean.setIdentityCard(identityCard);
        if (d1 != null) {
            bean.setBirthDay(c1);
        }
        bean.setHeight(height);
        bean.setMaritalStatus(marital);
        bean.setPhoneNumber(phone);
        bean.setEmail(email);
        bean.setAddress(address);
        bean.setGender(gender);
        bean.setWeight(weight);
        bean.setChildrenNum(childrenNumber);
        bean.setMobileNumber(mobile);
        bean.setWebName(web);
        bean.setAddress(address);
        bean.setCityIdActual(idCity);
        bean.setCountryIdActual(idCountry);
        dao.update(bean);
        return bean;
    }
}
