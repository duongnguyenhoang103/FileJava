/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListPersonAccount.java
 *
 * Created on Feb 9, 2012, 4:58:36 PM
 */
package vn.com.hkt.account.manager.gui.panel;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JScrollPane;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.account.manager.api.IAccountDAO;
import vn.com.hkt.account.manager.api.IAccountTypeDAO;
import vn.com.hkt.account.manager.entities.Account;
import vn.com.hkt.account.manager.entities.AccountType;
import vn.com.hkt.account.manager.gui.model.ModelTableListPersonAccount;
import vn.com.hkt.account.manager.spi.AccountDAO;
import vn.com.hkt.account.manager.spi.AccountTypeDAO;
import vn.com.hkt.authenticate.manager.tools.AuthenticateManager;
import vn.com.hkt.basic.api.IDepartmentBN;
import vn.com.hkt.basic.api.IEnterpriseBN;
import vn.com.hkt.basic.api.IPersonBN;
import vn.com.hkt.pilot.entities.Department;
import vn.com.hkt.pilot.entities.Enterprise;
import vn.com.hkt.pilot.entities.Person;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;

/**
 *
 * @author Admin
 */
@ServiceProvider(service = IUserInterface.class)
public class ListPersonAccount extends javax.swing.JPanel implements IUserInterface {

    private List<Account> listAccounts, accounts, listAccountExist;
    private List<AccountType> listAccountTypes, accountTypes;
    private List<Person> listPersons, persons;
    private List<Enterprise> listEnterprises, enterprises;
    private List<Department> listDepartments, departments;
    private IAccountDAO accountDAO = new AccountDAO();
    private IAccountTypeDAO accountTypeDAO = new AccountTypeDAO();
    private IPersonBN personBN = Lookup.getDefault().lookup(IPersonBN.class);
    private IEnterpriseBN enterpriseBN = Lookup.getDefault().lookup(IEnterpriseBN.class);
    private IDepartmentBN departmentBN = Lookup.getDefault().lookup(IDepartmentBN.class);
    private String wordSearch;
    private JScrollPane scrollPane;

    public void setScrollPane(JScrollPane scrollPane) {
        this.scrollPane = scrollPane;
    }

    /**
     * Creates new form ListPersonAccount
     */
    public ListPersonAccount() {
        if (!AuthenticateManager.getAuthenticateManager().checkLogined()) {
//            JOptionPane.showMessageDialog(null,"Ban chua dang nhap hay thuc hien lai viec dang nhap");            
            if (!AuthenticateManager.getAuthenticateManager().login()) {                
                return;
            }
        }
        initComponents();
        panelSort.setVisible(false);        
        loadDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cbSearch = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        rbtnSort = new javax.swing.JRadioButton();
        panelSort = new javax.swing.JPanel();
        rbtnSortIncrease = new javax.swing.JRadioButton();
        rbtnSortDecrease = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        cbSort = new javax.swing.JComboBox();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.jLabel2.text")); // NOI18N

        txtSearch.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.txtSearch.text")); // NOI18N
        txtSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtSearchCaretUpdate(evt);
            }
        });

        cbSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tên nhân viên", "Tên account", "Tên lớp quản lý", "Tên doah nghiệp", "Tên phòng ban" }));
        cbSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSearchItemStateChanged(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.jLabel3.text")); // NOI18N

        rbtnSort.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.rbtnSort.text")); // NOI18N
        rbtnSort.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnSortItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbtnSortIncrease);
        rbtnSortIncrease.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.rbtnSortIncrease.text")); // NOI18N
        rbtnSortIncrease.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnSortIncreaseItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbtnSortDecrease);
        rbtnSortDecrease.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.rbtnSortDecrease.text")); // NOI18N
        rbtnSortDecrease.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnSortDecreaseItemStateChanged(evt);
            }
        });

        jLabel4.setText(org.openide.util.NbBundle.getMessage(ListPersonAccount.class, "ListPersonAccount.jLabel4.text")); // NOI18N

        cbSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tên nhân viên", "Tên account", "Tên lớp quản lý", "Tên doah nghiệp", "Tên phòng ban" }));
        cbSort.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSortItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelSortLayout = new javax.swing.GroupLayout(panelSort);
        panelSort.setLayout(panelSortLayout);
        panelSortLayout.setHorizontalGroup(
            panelSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSortLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbtnSortIncrease)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnSortDecrease)
                .addGap(29, 29, 29))
        );
        panelSortLayout.setVerticalGroup(
            panelSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rbtnSortIncrease)
                .addComponent(rbtnSortDecrease)
                .addComponent(jLabel4)
                .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbtnSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbtnSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtSearchCaretUpdate
        search();
    }//GEN-LAST:event_txtSearchCaretUpdate

    private void cbSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSearchItemStateChanged
        search();
    }//GEN-LAST:event_cbSearchItemStateChanged

    private void rbtnSortItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnSortItemStateChanged
        panelSort.setVisible(rbtnSort.isSelected());
        sort();
    }//GEN-LAST:event_rbtnSortItemStateChanged

    private void cbSortItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSortItemStateChanged
        sort();
    }//GEN-LAST:event_cbSortItemStateChanged

    private void rbtnSortIncreaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnSortIncreaseItemStateChanged
        sort();
    }//GEN-LAST:event_rbtnSortIncreaseItemStateChanged

    private void rbtnSortDecreaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnSortDecreaseItemStateChanged
        sort();
    }//GEN-LAST:event_rbtnSortDecreaseItemStateChanged

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if (evt.getClickCount() < 2) {
            return;
        }
        if (table.getSelectedColumn() == 1) {
            choiseAccout();
        } else if (table.getSelectedColumn() == 2) {
            choiseAccountType();
        }
    }//GEN-LAST:event_tableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbSearch;
    private javax.swing.JComboBox cbSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelSort;
    private javax.swing.JRadioButton rbtnSort;
    private javax.swing.JRadioButton rbtnSortDecrease;
    private javax.swing.JRadioButton rbtnSortIncrease;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void loadDefault() {
        listAccountExist = accountDAO.selectAll();
        listPersons = personBN.selectAll();
        listAccounts = new ArrayList<Account>();
        listAccountTypes = new ArrayList<AccountType>();
        listDepartments = new ArrayList<Department>();
        listEnterprises = new ArrayList<Enterprise>();
        for (int i = 0; i < listPersons.size(); i++) {
            boolean hadAccount = false;
            for (int j = 0; j < listAccountExist.size(); j++) {
                if (listAccountExist.get(j) != null
                        && listAccountExist.get(j).getId() == (listPersons.get(i).getId())) {
                    hadAccount = true;
                    listAccounts.add(listAccountExist.get(j));
                    listAccountTypes.add(accountTypeDAO.getById(listAccountExist.get(j).getAccountTypeIdActual()));
                    break;
                }
            }
            if (!hadAccount) {
                listAccounts.add(null);
                listAccountTypes.add(null);
            }

            Enterprise e = enterpriseBN.getById(listPersons.get(i).getEnterpriseIdActual());
            listEnterprises.add(e);
            listDepartments.add(departmentBN.getById(listPersons.get(i).getDepartmentIdActual()));
        }
        accounts = listAccounts;
        accountTypes = listAccountTypes;
        departments = listDepartments;
        enterprises = listEnterprises;
        persons = listPersons;
        loadTable();
    }

    private void searchPerson() {
        accounts = new ArrayList<Account>();
        accountTypes = new ArrayList<AccountType>();
        enterprises = new ArrayList<Enterprise>();
        departments = new ArrayList<Department>();
        persons = new ArrayList<Person>();
        for (int i = 0; i < listPersons.size(); i++) {
            if (listPersons.get(i).getPersonName().toLowerCase().contains(wordSearch.toLowerCase())) {
                persons.add(listPersons.get(i));
                accounts.add(listAccounts.get(i));
                accountTypes.add(listAccountTypes.get(i));
                enterprises.add(listEnterprises.get(i));
                departments.add(listDepartments.get(i));
            }
        }
    }

    private void searchAccount() {
        accounts = new ArrayList<Account>();
        accountTypes = new ArrayList<AccountType>();
        enterprises = new ArrayList<Enterprise>();
        departments = new ArrayList<Department>();
        persons = new ArrayList<Person>();
        for (int i = 0; i < listPersons.size(); i++) {
            if (listAccounts.get(i) != null
                    && listAccounts.get(i).getUsername().toLowerCase().contains(wordSearch.toLowerCase())) {
                persons.add(listPersons.get(i));
                accounts.add(listAccounts.get(i));
                accountTypes.add(listAccountTypes.get(i));
                enterprises.add(listEnterprises.get(i));
                departments.add(listDepartments.get(i));
            }
        }
    }

    private void searchAccountType() {
        accounts = new ArrayList<Account>();
        accountTypes = new ArrayList<AccountType>();
        enterprises = new ArrayList<Enterprise>();
        departments = new ArrayList<Department>();
        persons = new ArrayList<Person>();
        for (int i = 0; i < listPersons.size(); i++) {
            if (listAccountTypes.get(i) != null
                    && listAccountTypes.get(i).getAccountTypeName().toLowerCase().contains(wordSearch.toLowerCase())) {
                persons.add(listPersons.get(i));
                accounts.add(listAccounts.get(i));
                accountTypes.add(listAccountTypes.get(i));
                enterprises.add(listEnterprises.get(i));
                departments.add(listDepartments.get(i));
            }
        }
    }

    private void searchEnterprise() {
        accounts = new ArrayList<Account>();
        accountTypes = new ArrayList<AccountType>();
        enterprises = new ArrayList<Enterprise>();
        departments = new ArrayList<Department>();
        persons = new ArrayList<Person>();
        for (int i = 0; i < listPersons.size(); i++) {
            if (listEnterprises.get(i).getEnterpriseName().toLowerCase().contains(wordSearch.toLowerCase())) {
                persons.add(listPersons.get(i));
                accounts.add(listAccounts.get(i));
                accountTypes.add(listAccountTypes.get(i));
                enterprises.add(listEnterprises.get(i));
                departments.add(listDepartments.get(i));
            }
        }
    }

    private void searchDepartment() {
        accounts = new ArrayList<Account>();
        accountTypes = new ArrayList<AccountType>();
        enterprises = new ArrayList<Enterprise>();
        departments = new ArrayList<Department>();
        persons = new ArrayList<Person>();

        for (int i = 0; i < listPersons.size(); i++) {
            if (listDepartments.get(i).getDepartmentName().toLowerCase().contains(wordSearch.toLowerCase())) {
                persons.add(listPersons.get(i));
                accounts.add(listAccounts.get(i));
                accountTypes.add(listAccountTypes.get(i));
                enterprises.add(listEnterprises.get(i));
                departments.add(listDepartments.get(i));
            }
        }
    }

    private void search() {
        wordSearch = txtSearch.getText();
        if (wordSearch.isEmpty()) {
            accounts = listAccounts;
            accountTypes = listAccountTypes;
            departments = listDepartments;
            enterprises = listEnterprises;
            persons = listPersons;
        } else {
            switch (cbSearch.getSelectedIndex()) {
                case 0:
                    searchPerson();
                    break;
                case 1:
                    searchAccount();
                    break;
                case 2:
                    searchAccountType();
                    break;
                case 3:
                    searchEnterprise();
                    break;
                case 4:
                    searchDepartment();
                    break;
                default:
                    break;
            }
        }
        if (rbtnSort.isSelected()) {
            sort();
        } else {
            loadTable();
        }
    }

    private void sort() {
        //TODO chưa sort
        loadTable();
    }

    private void loadTable() {
        ModelTableListPersonAccount model = new ModelTableListPersonAccount(accounts, accountTypes, persons, enterprises, departments);
        table.setModel(model);
    }

    private void choiseAccout() {
        int rowIndex = table.getSelectedRow();
        AccountInformation ai;
        if (accounts.get(rowIndex) == null) {
            ai = new AccountInformation(persons.get(rowIndex));
        } else {
            ai = new AccountInformation(accounts.get(rowIndex));
        }
        ai.setVisible(true);
        ai.setScrollPane(scrollPane);
        scrollPane.setViewportView(ai);
    }

    private void choiseAccountType() {
        int rowIndex = table.getSelectedRow();
        AccountTypeInfomation ati;
        if (accountTypes.get(rowIndex) == null) {
            ati = new AccountTypeInfomation();
        } else {
            ati = new AccountTypeInfomation(accountTypes.get(rowIndex));
        }
        ati.setVisible(true);
        ati.setScrollPane(scrollPane);
        scrollPane.setViewportView(ati);
    }

    @Override
    public String getUserInterfaceName() {
        return this.getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Danh sách account của nhân viên";
    }

    @Override
    public String getModuleName() {
        return "accountmanager";
    }
}
