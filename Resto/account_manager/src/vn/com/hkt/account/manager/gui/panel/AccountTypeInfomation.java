/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CreateAccountType.java
 *
 * Created on Feb 8, 2012, 2:20:49 PM
 */
package vn.com.hkt.account.manager.gui.panel;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import vn.com.hkt.account.manager.Installer;
import vn.com.hkt.account.manager.api.IAccountTypeDAO;
import vn.com.hkt.account.manager.api.IInterfacePermissionDAO;
import vn.com.hkt.account.manager.api.IModuleDAO;
import vn.com.hkt.account.manager.api.IPermissionDAO;
import vn.com.hkt.account.manager.api.IUserInterfaceDAO;
import vn.com.hkt.account.manager.entities.AccountType;
import vn.com.hkt.account.manager.entities.InterfacePermission;
import vn.com.hkt.account.manager.entities.Module;
import vn.com.hkt.account.manager.entities.Permission;
import vn.com.hkt.account.manager.entities.UserInterface;
import vn.com.hkt.account.manager.gui.model.ModelTableInterfacePermission;
import vn.com.hkt.account.manager.spi.AccountTypeDAO;
import vn.com.hkt.account.manager.spi.InterfacePermissionDAO;
import vn.com.hkt.account.manager.spi.ModuleDAO;
import vn.com.hkt.account.manager.spi.PermissionDAO;
import vn.com.hkt.account.manager.spi.UserInterfaceDAO;
import vn.com.hkt.authenticate.identity.IdentityPermission;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;

/**
 *
 * @author Le Xuan Bach
 */
public class AccountTypeInfomation extends javax.swing.JPanel implements IUserInterface {

    private Permission permissionAll;
    private Permission permissionOne;
    private Permission permissionDefault;
    private List<Module> modules;
    private IModuleDAO moduleDAO = new ModuleDAO();
    private AccountType accountTypeChoise;
    private IAccountTypeDAO accountTypeDAO = new AccountTypeDAO();
    private IUserInterfaceDAO userInterfaceDAO = new UserInterfaceDAO();
    private List<Permission> permissions;
    private IPermissionDAO permissionDAO = new PermissionDAO();
    private List<List<UserInterface>> listModuleInterface;
    private UserInterface userInterfaceChoise;
    private IInterfacePermissionDAO interfacePermissionDAO = new InterfacePermissionDAO();
    private List<List<InterfacePermission>> listInterfacePermissions;
    private int moduleIndex;
    private int interfaceIndex;
    private JScrollPane scrollPane;

    public void setScrollPane(JScrollPane scrollPane) {
        this.scrollPane = scrollPane;
    }

    /**
     * Creates new form CreateAccountType
     */
    public AccountTypeInfomation() {
        initComponents();        
        rbtnSelectAll.setSelected(false);
        btnCreate.setVisible(true);
        btnEdit.setVisible(false);
        btnRemove.setVisible(false);
        loadDefault();
    }

    public AccountTypeInfomation(AccountType accountType) {
        initComponents();        
        rbtnSelectAll.setSelected(false);
        btnCreate.setVisible(false);
        btnEdit.setVisible(true);
        btnRemove.setVisible(true);
        accountTypeChoise = accountType;
        loadAccountTypeChoise();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAccountTypeName = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnNextModule = new javax.swing.JButton();
        btnPreModule = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableUserInterfacePermission = new javax.swing.JTable();
        lbModuleName = new javax.swing.JLabel();
        panelCheckOne = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtUserInterfaceName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtUserInterfaceModule = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        btnSelectOne = new javax.swing.JButton();
        cbPermission = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePermission = new javax.swing.JTable();
        cbPermissionAll = new javax.swing.JComboBox();
        rbtnSelectAll = new javax.swing.JRadioButton();
        btnReset = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnCacnel = new javax.swing.JButton();
        lbMessenger = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jLabel2.text")); // NOI18N

        txtAccountTypeName.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.txtAccountTypeName.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jPanel1.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        btnNextModule.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnNextModule.text")); // NOI18N
        btnNextModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextModuleActionPerformed(evt);
            }
        });

        btnPreModule.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnPreModule.text")); // NOI18N
        btnPreModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreModuleActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jScrollPane1.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N

        tableUserInterfacePermission.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableUserInterfacePermission.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableUserInterfacePermissionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableUserInterfacePermission);

        lbModuleName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbModuleName.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.lbModuleName.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jLabel4.text")); // NOI18N

        txtUserInterfaceName.setEditable(false);
        txtUserInterfaceName.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.txtUserInterfaceName.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jLabel5.text")); // NOI18N

        txtUserInterfaceModule.setColumns(20);
        txtUserInterfaceModule.setEditable(false);
        txtUserInterfaceModule.setRows(2);
        jScrollPane3.setViewportView(txtUserInterfaceModule);

        jLabel6.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jLabel6.text")); // NOI18N

        btnSelectOne.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnSelectOne.text")); // NOI18N
        btnSelectOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectOneActionPerformed(evt);
            }
        });

        cbPermission.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbPermission.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbPermissionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelCheckOneLayout = new javax.swing.GroupLayout(panelCheckOne);
        panelCheckOne.setLayout(panelCheckOneLayout);
        panelCheckOneLayout.setHorizontalGroup(
            panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCheckOneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbPermission, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSelectOne)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                    .addComponent(txtUserInterfaceName, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelCheckOneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel4, jLabel5, jLabel6});

        panelCheckOneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbPermission, jScrollPane3, txtUserInterfaceName});

        panelCheckOneLayout.setVerticalGroup(
            panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCheckOneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUserInterfaceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCheckOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbPermission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectOne))
        );

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jScrollPane2.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N

        tablePermission.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablePermission);

        cbPermissionAll.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbPermissionAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbPermissionAllItemStateChanged(evt);
            }
        });

        rbtnSelectAll.setSelected(true);
        rbtnSelectAll.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.rbtnSelectAll.text")); // NOI18N
        rbtnSelectAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnSelectAllItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(panelCheckOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnPreModule)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbtnSelectAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbPermissionAll, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnNextModule)))))
                .addContainerGap())
            .addComponent(lbModuleName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lbModuleName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPreModule)
                    .addComponent(btnNextModule)
                    .addComponent(cbPermissionAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtnSelectAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addComponent(panelCheckOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btnReset.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnReset.text")); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnCreate.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnCreate.text")); // NOI18N
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnCacnel.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnCacnel.text")); // NOI18N
        btnCacnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCacnelActionPerformed(evt);
            }
        });

        lbMessenger.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.lbMessenger.text")); // NOI18N

        txtDescription.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.txtDescription.text")); // NOI18N

        jLabel7.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.jLabel7.text")); // NOI18N

        btnEdit.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnEdit.text")); // NOI18N
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnRemove.setText(org.openide.util.NbBundle.getMessage(AccountTypeInfomation.class, "AccountTypeInfomation.btnRemove.text")); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAccountTypeName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCacnel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbMessenger))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtAccountTypeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset)
                    .addComponent(btnCreate)
                    .addComponent(btnCacnel)
                    .addComponent(lbMessenger)
                    .addComponent(btnEdit)
                    .addComponent(btnRemove))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbtnSelectAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnSelectAllItemStateChanged
        if (rbtnSelectAll.isSelected()) {
            cbPermission.setEnabled(false);
            btnSelectOne.setEnabled(false);
            cbPermissionAll.setEnabled(true);
            setPermissonAll();
        } else {
            if (userInterfaceChoise != null) {
                cbPermission.setEnabled(true);
                btnSelectOne.setEnabled(true);
                loadIntefacePermissionChoise();
            }
            cbPermissionAll.setEnabled(false);
        }        
    }//GEN-LAST:event_rbtnSelectAllItemStateChanged

    private void btnPreModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreModuleActionPerformed
        preModule();
    }//GEN-LAST:event_btnPreModuleActionPerformed

    private void btnNextModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextModuleActionPerformed
        nextModule();
    }//GEN-LAST:event_btnNextModuleActionPerformed

    private void cbPermissionAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbPermissionAllItemStateChanged
        permissionAll = (Permission) cbPermissionAll.getSelectedItem();
        setPermissonAll();
    }//GEN-LAST:event_cbPermissionAllItemStateChanged

    private void tableUserInterfacePermissionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableUserInterfacePermissionMouseClicked
        if (evt.getClickCount() < 2 || rbtnSelectAll.isSelected()) {
            return;
        }
        btnSelectOne.setEnabled(true);
        cbPermission.setEnabled(true);
        choiseInterfacePermission();
    }//GEN-LAST:event_tableUserInterfacePermissionMouseClicked

    private void cbPermissionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbPermissionItemStateChanged
        permissionOne = (Permission) cbPermission.getSelectedItem();
    }//GEN-LAST:event_cbPermissionItemStateChanged

    private void btnSelectOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectOneActionPerformed
        setOnePermissionUserInterface();
    }//GEN-LAST:event_btnSelectOneActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        createAccountType();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnCacnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCacnelActionPerformed
        cancel();
    }//GEN-LAST:event_btnCacnelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editAccountType();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeAccountType();
    }//GEN-LAST:event_btnRemoveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCacnel;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNextModule;
    private javax.swing.JButton btnPreModule;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSelectOne;
    private javax.swing.JComboBox cbPermission;
    private javax.swing.JComboBox cbPermissionAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbMessenger;
    private javax.swing.JLabel lbModuleName;
    private javax.swing.JPanel panelCheckOne;
    private javax.swing.JRadioButton rbtnSelectAll;
    private javax.swing.JTable tablePermission;
    private javax.swing.JTable tableUserInterfacePermission;
    private javax.swing.JTextField txtAccountTypeName;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextArea txtUserInterfaceModule;
    private javax.swing.JTextField txtUserInterfaceName;
    // End of variables declaration//GEN-END:variables

    private void setModuleInterface() {
        listModuleInterface = new ArrayList<List<UserInterface>>();
        for (int i = 0; i < modules.size(); i++) {
            List<UserInterface> list = new ArrayList<UserInterface>();
            if (modules.get(i).getUserInterfacesId() != null) {
                for (int j = 0; j < modules.get(i).getUserInterfacesId().size(); j++) {
                    UserInterface uim = userInterfaceDAO.getById(modules.get(i).getUserInterfacesId().get(j));
                    if (uim != null) {
                        list.add(uim);
                    }
                }
            }
            listModuleInterface.add(list);
        }
    }

    private Permission createPermission(int function) {
        Permission p = new Permission();
        p.setPermissionName("Permission" + function);
        p.setPermissionFunction(function);
        permissionDAO.insert(p);
        return p;
    }

    private void checkPermission() {
        //TODO fix cững 3 trường hợp
        permissions = permissionDAO.selectAll();
        boolean hLock = false, hEdit = false, hView = false;
        for (int i = 0; i < permissions.size(); i++) {
            if (permissions.get(i).getPermissionFunction() == IdentityPermission.PERMISSION_FUNCTION_EDIT) {
                hEdit = true;
            } else if (permissions.get(i).getPermissionFunction() == IdentityPermission.PERMISSION_FUNCTION_VIEW) {
                hView = true;
            } else if (permissions.get(i).getPermissionFunction() == IdentityPermission.PERMISSION_FUNCTION_LOCK) {
                hLock = true;
                if (permissionDefault == null) {
                    permissionDefault = permissions.get(i);
                }

            }
        }
        if (!hLock) {
            permissionDefault = createPermission(IdentityPermission.PERMISSION_FUNCTION_LOCK);
        }
        if (!hEdit) {
            createPermission(IdentityPermission.PERMISSION_FUNCTION_EDIT);
        }
        if (!hView) {
            createPermission(IdentityPermission.PERMISSION_FUNCTION_VIEW);
        }
        permissions = permissionDAO.selectAll();
        DefaultTableModel model = new DefaultTableModel(new String[]{"Tên phân quyền", "Quyền", "Mô tả"}, 0);
        for (int i = 0; i < permissions.size(); i++) {
            Object[] obj = new Object[]{permissions.get(i).getPermissionName(), permissions.get(i).getPermissionFunction(), permissions.get(i).getDescription()};
            model.addRow(obj);
        }
        tablePermission.setModel(model);
    }

    private void setInterfacePermissionDefault() {
        lbMessenger.setVisible(false);
        listInterfacePermissions = new ArrayList<List<InterfacePermission>>();
        for (int i = 0; i < listModuleInterface.size(); i++) {
            List<InterfacePermission> listModuleInterfacePermissions = new ArrayList<InterfacePermission>();
            List<UserInterface> moduleInterfaces = listModuleInterface.get(i);
            for (int j = 0; j < moduleInterfaces.size(); j++) {
                InterfacePermission ip = new InterfacePermission();
                ip.setPermissionIdActual(permissionDefault.getId());
                ip.setUserInterfaceIdActual(moduleInterfaces.get(j).getId());
                listModuleInterfacePermissions.add(ip);
            }
            listInterfacePermissions.add(listModuleInterfacePermissions);
        }
    }

    private void setNext() {
        if (moduleIndex >= listInterfacePermissions.size() - 1) {
            btnNextModule.setEnabled(false);
        } else {
            btnNextModule.setEnabled(true);
        }
    }

    private void setPre() {
        if (moduleIndex <= 0) {
            btnPreModule.setEnabled(false);
        } else {
            btnPreModule.setEnabled(true);
        }
    }

    private void loadIndexModule() {
        setNext();
        setPre();
    }

    private void loadTableInterfacePermission() {
        loadIndexModule();
        List<InterfacePermission> list;
        if (listInterfacePermissions.isEmpty()) {
            list = new ArrayList<InterfacePermission>();
        } else {
            list = listInterfacePermissions.get(moduleIndex);
        }
        ModelTableInterfacePermission model = new ModelTableInterfacePermission(list);
        tableUserInterfacePermission.setModel(model);
    }

    private void loadDefault() {
        checkPermission();
        loadPermission();
        modules = moduleDAO.selectAll();
        setModuleInterface();
        setInterfacePermissionDefault();
        moduleIndex = 0;
        loadTableInterfacePermission();
    }

    private void preModule() {
        if (moduleIndex > 0) {
            rbtnSelectAll.setSelected(false);
            moduleIndex--;
            lbModuleName.setText("Module :" + modules.get(moduleIndex).getModuleName());
            loadTableInterfacePermission();
        }
    }

    private void nextModule() {        
        if (moduleIndex < listInterfacePermissions.size() - 1) {
            rbtnSelectAll.setSelected(false);
            moduleIndex++;
            lbModuleName.setText("Module :" + modules.get(moduleIndex).getModuleName());
            loadTableInterfacePermission();
        }
    }

    private void setPermissonAll() {
        for (int i = 0; i < listInterfacePermissions.get(moduleIndex).size(); i++) {
            listInterfacePermissions.get(moduleIndex).get(i).setPermissionIdActual(permissionAll.getId());
        }
        loadTableInterfacePermission();
    }

    private void loadPermission() {
        DefaultComboBoxModel model = new DefaultComboBoxModel(permissions.toArray());
        cbPermission.setModel(model);
        if (permissions.size() > 0) {
            cbPermission.setSelectedIndex(0);
            permissionOne=(Permission) cbPermission.getSelectedItem();
        }
        DefaultComboBoxModel model1 = new DefaultComboBoxModel(permissions.toArray());
        cbPermissionAll.setModel(model1);
        if (permissions.size() > 0) {
            cbPermissionAll.setSelectedIndex(0);
            permissionAll= (Permission) cbPermissionAll.getSelectedItem();
        }
    }

    private void loadIntefacePermissionChoise() {
        userInterfaceChoise = userInterfaceDAO.getById(listInterfacePermissions.get(moduleIndex).get(interfaceIndex).getUserInterfaceIdActual());
        txtUserInterfaceName.setText(userInterfaceChoise.getInterfaceName());
        txtUserInterfaceModule.setText(userInterfaceChoise.getDescription());
        for (int i = 0; i < permissions.size(); i++) {
            if (permissions.get(i).getId() == listInterfacePermissions.get(moduleIndex).get(interfaceIndex).getPermissionIdActual()) {
                cbPermission.setSelectedItem(permissions.get(i));
                permissionOne = (Permission) cbPermission.getSelectedItem();
            }
        }
    }

    private void choiseInterfacePermission() {
        interfaceIndex = tableUserInterfacePermission.getSelectedRow();
        if (interfaceIndex < 0 || interfaceIndex >= listInterfacePermissions.get(moduleIndex).size()) {
            interfaceIndex = -1;
        }
        if (interfaceIndex < 0) {
            panelCheckOne.setEnabled(false);
            return;
        }
        panelCheckOne.setEnabled(true);
        loadIntefacePermissionChoise();
    }

    private void setOnePermissionUserInterface() {
        listInterfacePermissions.get(moduleIndex).get(interfaceIndex).setPermissionIdActual(permissionOne.getId());
        loadTableInterfacePermission();
    }

    private void reset() {
        setInterfacePermissionDefault();
        moduleIndex = 0;
    }

    private void createAccountType() {
        if ("super admin".equals(txtAccountTypeName.getText())) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("Không được đặt tên này");
            return;
        }
        List<Integer> listId = new ArrayList<Integer>();
        for (int i = 0; i < listInterfacePermissions.size(); i++) {
            for (int j = 0; j < listInterfacePermissions.get(i).size(); j++) {
                interfacePermissionDAO.insert(listInterfacePermissions.get(i).get(j));
                listId.add(listInterfacePermissions.get(i).get(j).getId());
            }
        }
        accountTypeChoise = new AccountType();
        if (txtAccountTypeName.getText().isEmpty()) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("tên lớp quản lý rỗng");
            return;
        }
        accountTypeChoise.setAccountTypeName(txtAccountTypeName.getText());
        accountTypeChoise.setInterfacePermisstionsIdActual(listId);
        accountTypeDAO.insert(accountTypeChoise);
        if (!accountTypeDAO.insert(accountTypeChoise)) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("Thêm mới lớp quản lý không thành công");
            return;
        }
        lbMessenger.setVisible(false);
        this.setVisible(false);
    }

    private void cancel() {
        this.setVisible(false);
    }

    private void loadAccountTypeChoise() {
        txtAccountTypeName.setText(accountTypeChoise.getAccountTypeName());
        txtDescription.setText(accountTypeChoise.getDescription());
        List<Integer> listIps = accountTypeChoise.getInterfacePermisstionsIdActual();
        listInterfacePermissions = new ArrayList<List<InterfacePermission>>();
        modules = moduleDAO.selectAll();
        for (int i = 0; i < modules.size(); i++) {
            List<InterfacePermission> list = new ArrayList<InterfacePermission>();
            for (int j = 0; j < listIps.size(); j++) {
                InterfacePermission ip = interfacePermissionDAO.getById(listIps.get(j));
                if (ip != null) {
                    UserInterface ui = userInterfaceDAO.getById(ip.getUserInterfaceIdActual());
                    if (ui != null && ui.getModuleIdActual() == modules.get(i).getId()) {
                        list.add(ip);
                    }
                }
            }
            listInterfacePermissions.add(list);
        }
        checkPermission();
        loadPermission();
        loadTableInterfacePermission();
    }

    private void editAccountType() {
        if ("super admin".equals(txtAccountTypeName.getText())) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("Không được chỉnh sửa lớp quản lý này");
            return;
        }
        List<Integer> listId = new ArrayList<Integer>();
        for (int i = 0; i < listInterfacePermissions.size(); i++) {
            for (int j = 0; j < listInterfacePermissions.get(i).size(); j++) {
                interfacePermissionDAO.insert(listInterfacePermissions.get(i).get(j));
                listId.add(listInterfacePermissions.get(i).get(j).getId());
            }
        }

        if (txtAccountTypeName.getText().isEmpty()) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("tên lớp quản lý rỗng");
            return;
        }
        accountTypeChoise.setAccountTypeName(txtAccountTypeName.getText());
        accountTypeChoise.setInterfacePermisstionsIdActual(listId);
        if (!accountTypeDAO.update(accountTypeChoise)) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("Chỉnh sửa lớp quản lý không thành công");
            return;
        }
        lbMessenger.setVisible(false);
        this.setVisible(false);
    }

    private void removeAccountType() {
        if ("super admin".equals(txtAccountTypeName.getText())) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("Không được xóa lớp quản lý này");
            return;
        }
        if (!accountTypeDAO.delete(accountTypeChoise.getId())) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("Xóa lớp quản lý không thành công");
            return;
        }
        lbMessenger.setVisible(false);
        this.setVisible(false);
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện thông tin nhóm account";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }
}
