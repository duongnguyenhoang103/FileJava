/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.ui.main.operation;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.TableCellEditor;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.WindowManager;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.ResetCookie;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.operation.viewer.api.IOperationCreater;
import vn.com.hkt.pilot.operation.viewer.api.IOperationExtCreater;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.ui.main.ui.api.creater.ISaveBasic;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.ui.main.operation//OperationCreator//EN",
autostore = false)
@TopComponent.Description(preferredID = "OperationCreatorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.ui.main.operation.OperationCreatorTopComponent")
@ActionReference(path = "Menu/Nhập Số Liệu" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_OperationCreatorAction",
preferredID = "OperationCreatorTopComponent")
public final class OperationCreatorTopComponent extends TopComponent {

    private JPanel panelSB50 = null;
    private JPanel panel502 = null;
    private JPanel panel501 = null;
    private JPanel panel505 = null;
    private JPanel panel558 = null;
    private JPanel panelSB51 = null;
    private JPanel panelSB501 = null;
    private Collection<? extends IOperationCreater> iopc = Lookup.getDefault().lookupAll(IOperationCreater.class); //Basic
    private Collection<? extends IOperationExtCreater> iopec = Lookup.getDefault().lookupAll(IOperationExtCreater.class); // Extension
    private OperationTutorialTopComponent tc = (OperationTutorialTopComponent) WindowManager.getDefault().
            findTopComponent("OperationTutorialTopComponent");
    private List<JTable> listtTables = new ArrayList<JTable>();
    private static boolean isEdit = false;
    private static boolean isSave = true;

    public OperationCreatorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(OperationCreatorTopComponent.class, "CTL_OperationCreatorTopComponent"));
        setToolTipText(NbBundle.getMessage(OperationCreatorTopComponent.class, "HINT_OperationCreatorTopComponent"));
        // panelForm.removeAll();
        panelForm.setLayout(new GridLayout());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelButton = new javax.swing.JPanel();
        buttonEdit = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        buttonHelp = new javax.swing.JButton();
        buttonSaveDS = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonReset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelForm = new javax.swing.JPanel();
        panelBasic = new javax.swing.JPanel();
        panelSB = new javax.swing.JPanel();

        buttonEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/pilot/icon/modify1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(buttonEdit, org.openide.util.NbBundle.getMessage(OperationCreatorTopComponent.class, "OperationCreatorTopComponent.buttonEdit.text")); // NOI18N
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/pilot/icon/cancel1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(buttonExit, org.openide.util.NbBundle.getMessage(OperationCreatorTopComponent.class, "OperationCreatorTopComponent.buttonExit.text")); // NOI18N
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        buttonHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/pilot/icon/help1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(buttonHelp, org.openide.util.NbBundle.getMessage(OperationCreatorTopComponent.class, "OperationCreatorTopComponent.buttonHelp.text")); // NOI18N
        buttonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHelpActionPerformed(evt);
            }
        });

        buttonSaveDS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/pilot/icon/save_list1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(buttonSaveDS, org.openide.util.NbBundle.getMessage(OperationCreatorTopComponent.class, "OperationCreatorTopComponent.buttonSaveDS.text")); // NOI18N
        buttonSaveDS.setPreferredSize(new java.awt.Dimension(124, 30));
        buttonSaveDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveDSActionPerformed(evt);
            }
        });

        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/pilot/icon/save1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(buttonSave, org.openide.util.NbBundle.getMessage(OperationCreatorTopComponent.class, "OperationCreatorTopComponent.buttonSave.text")); // NOI18N
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/pilot/icon/refresh1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(buttonReset, org.openide.util.NbBundle.getMessage(OperationCreatorTopComponent.class, "OperationCreatorTopComponent.buttonReset.text")); // NOI18N
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelButtonLayout = new javax.swing.GroupLayout(panelButton);
        panelButton.setLayout(panelButtonLayout);
        panelButtonLayout.setHorizontalGroup(
            panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelButtonLayout.createSequentialGroup()
                .addContainerGap(312, Short.MAX_VALUE)
                .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSaveDS, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelButtonLayout.setVerticalGroup(
            panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelButtonLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSaveDS, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelForm.setPreferredSize(new java.awt.Dimension(827, 238));
        panelForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelFormMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelBasicLayout = new javax.swing.GroupLayout(panelBasic);
        panelBasic.setLayout(panelBasicLayout);
        panelBasicLayout.setHorizontalGroup(
            panelBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1097, Short.MAX_VALUE)
        );
        panelBasicLayout.setVerticalGroup(
            panelBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelSBLayout = new javax.swing.GroupLayout(panelSB);
        panelSB.setLayout(panelSBLayout);
        panelSBLayout.setHorizontalGroup(
            panelSBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1097, Short.MAX_VALUE)
        );
        panelSBLayout.setVerticalGroup(
            panelSBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBasic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelSB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormLayout.createSequentialGroup()
                .addComponent(panelBasic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(panelSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane1.setViewportView(panelForm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1099, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        this.close();
    }//GEN-LAST:event_buttonExitActionPerformed

    private void buttonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHelpActionPerformed
        tc.open();
        tc.requestActive();     }//GEN-LAST:event_buttonHelpActionPerformed

    private void buttonSaveDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveDSActionPerformed
        save();
//        reset();
//        this.close();
        TopComponent enterComponent = WindowManager.getDefault().findTopComponent("OperationViewerTopComponent");
        enterComponent.open();
        enterComponent.requestActive();
	}//GEN-LAST:event_buttonSaveDSActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        save();
        reset();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        reset();
	}//GEN-LAST:event_buttonResetActionPerformed

    private void panelFormMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelFormMousePressed
        if (tc.getPanel505() == null) {
            tc.getPanelChecbox().removeAll();
            tc.loadFormExtension();
        }
    }//GEN-LAST:event_panelFormMousePressed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        isSave = !isSave;
        setEnableTable();
        changeEnableButtonSave();
    }//GEN-LAST:event_buttonEditActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonHelp;
    private javax.swing.JButton buttonReset;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonSaveDS;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelBasic;
    private javax.swing.JPanel panelButton;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panelSB;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        Set<TopComponent> tcs = WindowManager.getDefault().getRegistry().getOpened();
        for (TopComponent tc : tcs) {
            tc.close();
        }
        for (IOperationCreater iex : iopc) {
//            if(iex.getClass().getSimpleName().equals("RCW58Panel")){
//                JOptionPane.showMessageDialog(null, "OK : "+iex.getTables().size());
//            }
            for (int i = 0; i < iex.getTables().size(); i++) {
                listtTables.add(iex.getTables().get(i));
            }
            if (iex instanceof ResetCookie) {
                try {
                    ((ResetCookie) iex).resetCookie();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        for (IOperationExtCreater iex : iopec) {
            for (int i = 0; i < iex.getTables().size(); i++) {
                listtTables.add(iex.getTables().get(i));
            }
            if (iex instanceof ResetCookie) {
                try {
                    ((ResetCookie) iex).resetCookie();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        setFocusable();
        tc.open();
        if (iopec != null) {
            for (IOperationExtCreater extCreator : iopec) {
                double index = extCreator.getLevelNumber();
                if (index == 5.1) {
                    if (panelSB51 == null) {
                        panelSB51 = extCreator.getOperationExtCreater();
                    }
                }
                if (index == 5.0) {
                    if (panelSB50 == null) {
                        panelSB50 = extCreator.getOperationExtCreater();
                    }
                }
                if (index == 5.01) {
                    if (panelSB501 == null) {
                        panelSB501 = extCreator.getOperationExtCreater();
                    }
                }
            }

        }
        if (iopc != null) {
            for (IOperationCreater extCreator : iopc) {
                double index = extCreator.getLevelNumber();

                if (index == 5.01) {
                    if (panel501 == null) {
                        panel501 = extCreator.getOperationCreater();
                    }
                }
                if (index == 5.05) {
                    if (panel505 == null) {
                        panel505 = extCreator.getOperationCreater();
                    }
                }
                if (index == 5.58) {
                    if (panel558 == null) {
                        panel558 = extCreator.getOperationCreater();
                    }
                }
                if (index == 5.02) {
                    if (panel502 == null) {
                        panel502 = extCreator.getOperationCreater();
                    }
                }
            }

        }
        loadFormAll();
        buttonEdit.setEnabled(false);
    }

    @Override
    public void componentClosed() {
        tc.close();
        panelForm.removeAll();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void save() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof ISaveBasic) {
                ISaveBasic saveBasic = (ISaveBasic) ioc;
                IEntity entity = saveBasic.save();
                if (entity != null) {
                    for (IOperationExtCreater iee : iopec) {
                        if (iee instanceof ISaveExtention) {
                            ISaveExtention saveExtention = (ISaveExtention) iee;
                            saveExtention.setEntity(entity);
                            saveExtention.save();
                        }
                    }
                }
            }
        }
    }

    private void reset() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof ISaveBasic) {
                ISaveBasic saveBasic = (ISaveBasic) ioc;
                saveBasic.reset();

                for (IOperationExtCreater iee : iopec) {
                    if (iee instanceof ISaveExtention) {
                        ISaveExtention saveExtention = (ISaveExtention) iee;
                        saveExtention.reset();
                    }
                }
            }
        }

        // Enable cac nut sau khi reset
        isSave = true;
        isEdit = false;
        changeEnableButtonSave();
        changeEnableButtonEdit();

        reLoadFont();
        reLoadSize();
        reLoadColor();
        reLoadColorMouse();
        reLoadColorTitle();
        reLoadColorWord();

    }

    private void changeEnableButtonEdit() {
        setEnableTable();
        buttonEdit.setEnabled(isEdit);
    }

    private void loadFormAll() {
        panelBasic.setLayout(new GridLayout());
        panelBasic.add(panel505);
        panelBasic.add(panel558);
        panelBasic.setPreferredSize(new Dimension(827, 130));
        panelForm.setLayout(new BorderLayout());
        panelForm.add(panelBasic, BorderLayout.NORTH);
        if (panelSB50 != null) {
            panelForm.add(panelSB50, BorderLayout.CENTER);
        } else {
            panelForm.add(panel502, BorderLayout.CENTER);
        }
        panelForm.add(panelSB, BorderLayout.SOUTH);
        loadFormSB();
    }

    public void loadFormSB() {
        panelSB.setLayout(new GridLayout());

        if (tc.getCheckBoxSB().isSelected()) {
            panelSB.add(panelSB51);
            panelSB.setPreferredSize(new Dimension(827, 170));
            panelSB50.setPreferredSize(new Dimension(827, 130));
        } else {
            JPanel panel = new JPanel();
            panelSB.add(panel);
            panelSB.setPreferredSize(new Dimension(827, 170));
            panel.setPreferredSize(new Dimension(827, 130));
        }
        if (panelSB501 != null) {
            panelSB.add(panelSB501);
        } else {
            panelSB.add(panel501);
        }
    }

    public JPanel getPanelSB() {
        return panelSB;
    }

    private void reLoadFont() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof IResetFontSize) {
                ((IResetFontSize) ioc).resetFont();
            }
        }
        for (IOperationExtCreater iexc : iopec) {
            if (iexc instanceof IResetFontSize) {
                ((IResetFontSize) iexc).resetFont();
            }
        }
    }

    private void reLoadColor() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof IResetFontSize) {
                ((IResetFontSize) ioc).resetColorRowTable();
            }
        }
        for (IOperationExtCreater iexc : iopec) {
            if (iexc instanceof IResetFontSize) {
                ((IResetFontSize) iexc).resetColorRowTable();
            }
        }
    }

    private void reLoadSize() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof IResetFontSize) {
                ((IResetFontSize) ioc).resetSize();
            }
        }
        for (IOperationExtCreater iexc : iopec) {
            if (iexc instanceof IResetFontSize) {
                ((IResetFontSize) iexc).resetSize();
            }
        }
    }

    private void reLoadColorWord() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof IResetFontSize) {
                ((IResetFontSize) ioc).resetColorWord();
            }
        }
        for (IOperationExtCreater iexc : iopec) {
            if (iexc instanceof IResetFontSize) {
                ((IResetFontSize) iexc).resetColorWord();
            }
        }
    }

    private void reLoadColorTitle() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof IResetFontSize) {
                ((IResetFontSize) ioc).resetColorTitle();
            }
        }
        for (IOperationExtCreater iexc : iopec) {
            if (iexc instanceof IResetFontSize) {
                ((IResetFontSize) iexc).resetColorTitle();
            }
        }
    }

    private void reLoadColorMouse() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof IResetFontSize) {
                ((IResetFontSize) ioc).resetColorMouse();
            }
        }
        for (IOperationExtCreater iexc : iopec) {
            if (iexc instanceof IResetFontSize) {
                ((IResetFontSize) iexc).resetColorMouse();
            }
        }
    }

    private void changeEnableButtonSave() {
        buttonSave.setEnabled(isSave);
        buttonSaveDS.setEnabled(isSave);
    }

    private void setEnableTable() {
        for (IOperationCreater ioc : iopc) {
            if (ioc instanceof IEnableTable) {
                try {
                    ((IEnableTable) ioc).enableTable(isSave);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        for (IOperationExtCreater iexc : iopec) {
            if (iexc instanceof IEnableTable) {
                try {
                    ((IEnableTable) iexc).enableTable(isSave);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }

    private void setFocusable() {
        for (int i = 0; i < listtTables.size(); i++) {
            listtTables.get(i).addMouseListener(new MyMouseListener(listtTables.get(i), listtTables));
        }
        buttonEdit.addMouseListener(new MyMouseListener(null, listtTables));
        buttonExit.addMouseListener(new MyMouseListener(null, listtTables));
        buttonHelp.addMouseListener(new MyMouseListener(null, listtTables));
        buttonReset.addMouseListener(new MyMouseListener(null, listtTables));
        buttonSave.addMouseListener(new MyMouseListener(null, listtTables));
        buttonSaveDS.addMouseListener(new MyMouseListener(null, listtTables));

    }
}

class MyMouseListener extends MouseAdapter {

    private JTable table = null;
    private List<JTable> listtTables;

    public MyMouseListener(JTable table, List<JTable> listtTables) {
        this.table = table;
        this.listtTables = listtTables;
    }

    @Override
    public void mousePressed(MouseEvent e) {
        for (int j = 0; j < listtTables.size(); j++) {
            if (listtTables.get(j) != table) {
                TableCellEditor tce = listtTables.get(j).getCellEditor();
                if (tce != null) {
                    tce.stopCellEditing();
                    tce.cancelCellEditing();
                }
                listtTables.get(j).clearSelection();
            } else {
                if (table != null) {
                    table.setCellSelectionEnabled(true);
                    table.setRowSelectionAllowed(true);
                    table.setColumnSelectionAllowed(true);
                    table.changeSelection(table.getSelectedRow(), table.getSelectedColumn(), false, false);
                    table.requestFocus();
                }
            }
        }
    }
}
