/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExtensionEnterprisePanel.java
 *
 * Created on Dec 21, 2011, 4:35:59 PM
 */
package vn.com.hkt.pilot.sb31.ui.panel.ext_d_w41;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IDepartmentBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.department.viewer.api.HelpTutorialDepartment;
import vn.com.hkt.pilot.department.viewer.api.IDepartmentExtCreater;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.entities.Department;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.sb31.Installer;
import vn.com.hkt.pilot.sb31.deparment.extW41.entity.Information;
import vn.com.hkt.pilot.sb31.department.extW41.dao.InformationBN;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IDepartmentExtCreater.class)
public class SB31_W44_Panel extends javax.swing.JPanel implements IDepartmentExtCreater,
        ISaveExtention, IEnableTable, IResetFontSize, IGetObject, IUserInterface {

    private InformationBN dao;
    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN;
    private List<SystemSoftware> listS;
    private int i = 4;
    private DefaultTableModel modelDiaChi;
    private int idDepartment = 0;

    /**
     * Creates new form ExtensionEnterprisePanel
     */
    public SB31_W44_Panel() {
        initComponents();
        sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
        listS = new ArrayList<SystemSoftware>();
        listS = sotfwareBN.selectAll();
        dao = new InformationBN();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());

        tableSB31W44.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableSB31W44.getColumnModel().getColumn(0).setMaxWidth(100);
        tableSB31W44.setRowSelectionAllowed(true);
        tableSB31W44.setColumnSelectionAllowed(false);
        tableSB31W44.setSelectionBackground(new Color(192, 210, 224));
        tableSB31W44.setForeground(color);
        StripedTableCellRenderer.installInColumn(tableSB31W44, colorL, null, colorD, null);

        tableSB31W44.setTableHeader(null);

        jScrollPane1.setViewportBorder(null);

        panelTong.removeAll();
        panelTong.setBackground(new Color(242, 241, 240));
        panelTong.setLayout(new BorderLayout());
        panelTong.add(jScrollPane1, BorderLayout.NORTH);

        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(jPanel1, BorderLayout.CENTER);
        this.setBackground(new Color(242, 241, 240));
        JLabel label = new JLabel(" ");
        label.setBackground(new Color(242, 241, 240));
        label.setFont((new Font(" ", Font.BOLD, 14)));
        label.setPreferredSize(new Dimension(WIDTH, 30));
        this.add(label, BorderLayout.NORTH);
        tableSB31W44.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                tableMousePressed(e);
            }
        });
    }

    public JTable getTableSB31W44() {
        return this.tableSB31W44;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTong = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSB31W44 = new javax.swing.JTable();

        panelTong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTong.setPreferredSize(new java.awt.Dimension(827, 165));

        jScrollPane1.setMinimumSize(new java.awt.Dimension(130, 130));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(130, 130));

        tableSB31W44.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Tên thông số", "Nội dung"},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""}
            },
            new String [] {
                "", ""
            }
        ){

            boolean[] canEdit = new boolean[]{
                true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (rowIndex==0) return false;
                return canEdit[columnIndex];
            }});
            tableSB31W44.setRowHeight(26);
            tableSB31W44.setShowHorizontalLines(false);
            tableSB31W44.setShowVerticalLines(false);
            tableSB31W44.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tableSB31W44MouseClicked(evt);
                }
            });
            jScrollPane1.setViewportView(tableSB31W44);

            javax.swing.GroupLayout panelTongLayout = new javax.swing.GroupLayout(panelTong);
            panelTong.setLayout(panelTongLayout);
            panelTongLayout.setHorizontalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelTongLayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(658, Short.MAX_VALUE))
            );
            panelTongLayout.setVerticalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelTongLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            );

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addContainerGap(417, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
        }// </editor-fold>//GEN-END:initComponents

private void tableSB31W44MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSB31W44MouseClicked
// TODO add your handling code here:

    tableSB31W44.getSelectedRow();
}//GEN-LAST:event_tableSB31W44MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelTong;
    private javax.swing.JTable tableSB31W44;
    // End of variables declaration//GEN-END:variables

    @Override
    public double getLevelNumber() {
        return 3.14;
    }

    @Override
    public JPanel getDepartmentExtViewer() {
        return this;
    }

    @Override
    public Lookup getDepartmentExtViewerLookup() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void resetSelectTable(double d) throws IOException {
        if (d != this.getLevelNumber()) {
            this.tableSB31W44.clearSelection();
        }
    }

    @Override
    public IEntity save() {
        Information bean = null;
        if (idDepartment == 0) {
            return null;
        }
        int row = 1;
        try {
            // Xoa cac doi tuong khac truoc khi insert
            List<Information> listRemove = dao.select(Information.FIELD_DEPARTMENT_ID ,String.valueOf(idDepartment));
                for (Information imf : listRemove ){
                    dao.delete(imf.getId());
                }
            
            while (tableSB31W44.getValueAt(row, 0).toString().length() != 0 && tableSB31W44.getValueAt(row, 1).toString().length() != 0) {          
                bean = new Information();
                bean.setDepartmentIdActual(idDepartment);
                bean.setInformationName(tableSB31W44.getValueAt(row, 0).toString());
                bean.setInformationDescription(tableSB31W44.getValueAt(row, 1).toString());
                dao.update(bean);
                row++;
            }
        } catch(Exception ex){            
        }
        return bean;
    }

    @Override
    public void reset() {
        idDepartment = 0;
        tableSB31W44.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {"Tên thông số", "Nội dung"},
                    {"", ""},
                    {"", ""},
                    {"", ""},
                    {"", ""}
                },
                new String[]{
                    "", ""
                }) {

            boolean[] canEdit = new boolean[]{
                true, true
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (rowIndex == 0) {
                    return false;
                }
                return canEdit[columnIndex];
            }
        });
        tableSB31W44.setRowHeight(26);
        i = 4;
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        StripedTableCellRenderer.installInColumn(tableSB31W44, colorL, null, colorD, null);
        tableSB31W44.setForeground(color);
    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableSB31W44.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableSB31W44.setFont(new Font(font, 0, size));
        tableSB31W44.repaint();
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(tableSB31W44, colorL, null, colorD, null);
        tableSB31W44.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableSB31W44.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableSB31W44.setFont(new Font(font, 0, size));
        tableSB31W44.repaint();
    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableSB31W44.setForeground(color);
        tableSB31W44.repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        tableSB31W44.getTableHeader().setForeground(color);
//        tableSB31W44.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableSB31W44.setSelectionBackground(color);
        tableSB31W44.repaint();
    }

    private void tableMousePressed(MouseEvent e) {
        SB31_W44Tutorial sB31_W44Tutorial = new SB31_W44Tutorial();
        if (tableSB31W44.getSelectedRow() == i) {
            modelDiaChi = (DefaultTableModel) tableSB31W44.getModel();
            i++;
            Object[] rows1 = {" ", " ", " "};
            modelDiaChi.addRow(rows1);
            tableSB31W44.repaint();
        }
        if (tableSB31W44.getSelectedColumn() == 0) {
            addFormEditID(5.0, sB31_W44Tutorial.getTenThongSo().getText());
        }
        if (tableSB31W44.getSelectedColumn() == 1) {
            addFormEditID(5.1, sB31_W44Tutorial.getNoiDung().getText());

        }
    }

    @Override
    public void getObject(String id) {
        IDepartmentBN departmentBN = Lookup.getDefault().lookup(IDepartmentBN.class);
        Department department;
        try {
            department = departmentBN.getByObjectId(id);
            if (department == null) {
                return;
            }
        } catch (Exception ex) {
            return;
        }

        try {
            List<Information> list = dao.select(Information.FIELD_DEPARTMENT_ID, String.valueOf(department.getId()));
            resultEvent(list);
        } catch (Exception ex) {
        }
    }

    private void resultEvent(List<Information> bean) {
        try {
            for (int i = 0; i < bean.size(); i++) {
                Information info = bean.get(i);
                tableSB31W44.setValueAt(info, i + 1, 0);
                tableSB31W44.setValueAt(info.getInformationDescription(), i + 1, 1);
            }
        } catch (Exception ex) {
            System.out.print(ex);
        }
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện nội dung dự án";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    private void addFormEditID(double d, String string) {
        Collection<? extends HelpTutorialDepartment> allSave = Lookup.getDefault().lookupAll(HelpTutorialDepartment.class);
        for (HelpTutorialDepartment editCookie : allSave) {
            editCookie.getTutorial(d, string);
        }
    }

    @Override
    public void enableTable(boolean ok) throws IOException {
        tableSB31W44.setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tableSB31W44);
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        idDepartment = entity.getId();
    }
}
