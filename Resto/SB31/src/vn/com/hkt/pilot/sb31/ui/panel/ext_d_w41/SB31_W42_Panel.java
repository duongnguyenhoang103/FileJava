/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExtensionEnterprisePanel.java
 *
 * Created on Dec 21, 2011, 4:35:59 PM
 */
package vn.com.hkt.pilot.sb31.ui.panel.ext_d_w41;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IDepartmentBN;
import vn.com.hkt.basic.api.IEnterpriseBN;
import vn.com.hkt.basic.api.IPersonBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.department.viewer.api.HelpTutorialDepartment;
import vn.com.hkt.pilot.department.viewer.api.IDepartmentExtCreater;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.entities.Department;
import vn.com.hkt.pilot.entities.Enterprise;
import vn.com.hkt.pilot.entities.Person;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.identity.presentation.api.IUserInterface;
import vn.com.hkt.pilot.sb31.Installer;
import vn.com.hkt.pilot.sb31.deparment.extW41.entity.DepartmentExt_W41;
import vn.com.hkt.pilot.sb31.department.extW41.dao.DepartmentExtW41_DAO;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 *
 * @author longnt
 */
@ServiceProvider(service = IDepartmentExtCreater.class)
public class SB31_W42_Panel extends javax.swing.JPanel implements IDepartmentExtCreater, ISaveExtention, IEnableTable,
        IResetFontSize, IGetObject, IUserInterface {

    private ExtDepartmentW42Cell cell;
    private int idDepartment = 0;
    private DepartmentExtW41_DAO dao;
    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN;
    private List<SystemSoftware> listS;

    /**
     * Creates new form ExtensionEnterprisePanel
     */
    public SB31_W42_Panel() {
        initComponents();
        dao = new DepartmentExtW41_DAO();
        cell = new ExtDepartmentW42Cell();
        sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
        listS = new ArrayList<SystemSoftware>();
        reset();
        panelTong.removeAll();
        panelTong.setBackground(new Color(242, 241, 240));
        panelTong.setLayout(new GridLayout());
        panelTong.add(tableW42);
        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(jPanel1, BorderLayout.CENTER);
        this.setBackground(new Color(242, 241, 240));
        JLabel label = new JLabel("      Thông tin chi tiết");
        label.setBackground(new Color(242, 241, 240));
        label.setFont((new Font(" ", Font.BOLD, 14)));
        label.setPreferredSize(new Dimension(WIDTH, 30));
        this.add(label, BorderLayout.NORTH);
        tableW42.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseReleased(MouseEvent e) {
                tableW42MousePressed(e);
            }
        });
    }

    @Override
    public String toString() {
        return "Thông tin chi tiết";
    }

    public JTable getTableW42() {
        return this.tableW42;
    }

    private void tableW42MousePressed(MouseEvent evt) {
        SB31_W42Tutorial sB31_W42Tutorial = new SB31_W42Tutorial();
        if (tableW42.getSelectedColumn() == 0) {
            if (tableW42.getSelectedRow() == 1) {
                tableW42.repaint();
            }
            if (tableW42.getSelectedRow() == 2) {
                tableW42.repaint();
            }
        }

        if (tableW42.getSelectedRow() == 2 && tableW42.getSelectedColumn() == 1) {
            addFormEditID(2.21, sB31_W42Tutorial.getVangLai().getText());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTong = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableW42 = new javax.swing.JTable();

        panelTong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTong.setPreferredSize(new java.awt.Dimension(827, 161));

        tableW42.setBackground(new java.awt.Color(242, 241, 240));
        tableW42.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{
                {"Khách hàng", " "},
                {" ", " "},
                {" ", " "},
                {" ", " "}},
            new String[]{
                "", ""
            }) {

                boolean[] canEdit = new boolean[]{
                    true, true, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    if (rowIndex == 0 && columnIndex == 0) {
                        return false;
                    }
                    if (rowIndex == 3) {
                        return false;
                    }
                    return canEdit[columnIndex];
                }
            });
            tableW42.setIntercellSpacing(new java.awt.Dimension(0, 0));
            tableW42.setRowHeight(26);
            tableW42.setShowHorizontalLines(false);
            tableW42.setShowVerticalLines(false);
            jScrollPane1.setViewportView(tableW42);

            javax.swing.GroupLayout panelTongLayout = new javax.swing.GroupLayout(panelTong);
            panelTong.setLayout(panelTongLayout);
            panelTongLayout.setHorizontalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
            );
            panelTongLayout.setVerticalGroup(
                panelTongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelTongLayout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addGap(96, 96, 96))
            );

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(panelTong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap(361, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
        }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelTong;
    private javax.swing.JTable tableW42;
    // End of variables declaration//GEN-END:variables

    @Override
    public double getLevelNumber() {
        return 3.12;
    }

    @Override
    public JPanel getDepartmentExtViewer() {
        return this;
    }

    @Override
    public Lookup getDepartmentExtViewerLookup() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public IEntity save() {
        int isEnterprise = 0, isPerson = 0;
        String nameCustommer = "";
        DepartmentExt_W41 bean = null;
        if (idDepartment == 0) {
            return null;
        }
        if (cell.isIsRdb1() == true) {
            if (tableW42.getValueAt(0, 1).toString().contains("Tổ Chức")) {
                try {
                    isEnterprise = ((Enterprise) tableW42.getValueAt(1, 1)).getId();
                    isPerson = 0;
                } catch (Exception ex) {
                    isEnterprise = 0;
                    isPerson = 0;
                }

            } else if (tableW42.getValueAt(0, 1).toString().contains("Cá Nhân")) {
                try {
                    isPerson = ((Person) tableW42.getValueAt(1, 1)).getId();
                    isEnterprise = 0;
                } catch (Exception ex) {
                    isEnterprise = 0;
                    isPerson = 0;
                }
            }
        } else {
            try {
                nameCustommer = ((Enterprise) tableW42.getValueAt(2, 1)).getEnterpriseName();
            } catch (Exception ex) {
                nameCustommer = "";
            }
        }

        if (idDepartment == 0) {
            return null;
        }
        bean = dao.getByObjectId(String.valueOf(idDepartment));
        if (bean == null) {
            bean = new DepartmentExt_W41();
        }

        bean.setDepartmentIdActual(idDepartment);

        bean.setIdEnterprise(isEnterprise);
        bean.setIdPerson(isPerson);
        bean.setCustomerName(nameCustommer);
        dao.update(bean);
        return bean;
    }

    @Override
    public void reset() {
        cell.reset();
        tableW42.setValueAt("", 0, 1);
        tableW42.setValueAt("", 1, 1);
        tableW42.setValueAt("", 2, 1);

        tableW42.getColumnModel().getColumn(0).setCellEditor(cell);
        tableW42.getColumnModel().getColumn(1).setCellEditor(cell);
        TableCell tableCell = new TableCell();
        tableW42.getColumnModel().getColumn(0).setCellRenderer(tableCell);
        tableW42.getColumnModel().getColumn(1).setCellRenderer(tableCell);

        tableW42.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableW42.getColumnModel().getColumn(0).setMaxWidth(100);
        tableW42.setRowSelectionAllowed(true);
        tableW42.setColumnSelectionAllowed(false);
        tableW42.setSelectionBackground(new Color(192, 210, 224));

        //  StripedTableCellRenderer.installInColumn(tableW42, new Color(220, 228, 231), null, new Color(235, 239, 242), null);
        tableW42.setTableHeader(null);

        jScrollPane1.setViewportBorder(null);

    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = tableW42.getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        tableW42.setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
//        listS = sotfwareBN.selectAll();
//        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
//        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
//        StripedTableCellRenderer.installInColumn( tableW42, colorL, null, colorD, null);
//         tableW42.repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = tableW42.getFont().getFontName();
        size = listS.get(0).getSizeWord();
        tableW42.setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        tableW42.setForeground(color);
        tableW42.repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//         tableW42.getTableHeader().setForeground(color);
//         tableW42.repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        tableW42.setSelectionBackground(color);
        tableW42.repaint();
    }

    @Override
    public void getObject(String id) {
        IDepartmentBN departmentBN = Lookup.getDefault().lookup(IDepartmentBN.class);
        Department department;
        try {
            department = departmentBN.getByObjectId(id);
            if (department == null) {
                return;
            }
        } catch (Exception ex) {
            return;
        }

        try {
            DepartmentExt_W41 bean = dao.getByObjectId(String.valueOf(department.getId()));
            resultEvent(bean);
        } catch (Exception ex) {
        }
    }

    private void resultEvent(DepartmentExt_W41 bean) {
        IEnterpriseBN enterpriseBN = Lookup.getDefault().lookup(IEnterpriseBN.class);
        IPersonBN personBN = Lookup.getDefault().lookup(IPersonBN.class);
        try {
            int idEnterprise = bean.getIdEnterprise();
            int idPerson = bean.getIdPerson();
            // Neu co enterprise
            if (idEnterprise != 0) {
                Enterprise e = enterpriseBN.getById(idEnterprise);
                // Enable 
                cell.setEnterpriseEnable(true);
                // Set gia tri
                cell.setEnterpriseChoose(true, e);
                tableW42.setValueAt("Tổ Chức", 0, 1);
                tableW42.setValueAt(e, 1, 1);
            } else if (idPerson != 0) {
                Person p = personBN.getById(idPerson);
                cell.setEnterpriseEnable(true);
                cell.setEnterpriseChoose(true, p);
                tableW42.setValueAt("Cá Nhân", 0, 1);
                tableW42.setValueAt(p, 1, 1);
            } else {
                cell.setEnterpriseEnable(false);
                cell.setCustomerName(bean.getCustomerName());
                tableW42.setValueAt(" ", 0, 1);
                tableW42.setValueAt(bean.getCustomerName(), 2, 1);
            }
        } catch (Exception ex) {
        }
    }

    private void addFormEditID(double d, String string) {
        Collection<? extends HelpTutorialDepartment> allSave = Lookup.getDefault().lookupAll(HelpTutorialDepartment.class);
        for (HelpTutorialDepartment editCookie : allSave) {
            editCookie.getTutorial(d, string);
        }
    }

    @Override
    public String getUserInterfaceName() {
        return getClass().getSimpleName();
    }

    @Override
    public String getUserInterfaceDescription() {
        return "Giao diện khách hàng của dự án";
    }

    @Override
    public String getModuleName() {
        return Installer.MODULE_NAME;
    }

    @Override
    public void enableTable(boolean ok) throws IOException {
        tableW42.setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(tableW42);
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        idDepartment = entity.getId();
    }

    public class TableCell extends JLabel implements TableCellRenderer {

        public TableCell() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

            listS = sotfwareBN.selectAll();
            Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
            Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
            if (column == 0) {
                if (row == 0) {
                    this.setText("Khách hàng");
                    this.setBackground(colorL);
                    return this;
                }
                if (row == 1) {
                    cell.getRdb1().setBackground(colorD);
                    return cell.getRdb1();
                }
                if (row == 2) {
                    cell.getRdb2().setBackground(colorL);
                    return cell.getRdb2();
                }
                if (row == 3) {
                    this.setBackground(colorD);
                    this.setText(" ");
                    return this;
                }


            }
            if (column == 1) {
                if (row == 0) {

                    this.setBackground(colorL);
                    this.setText(table.getValueAt(0, 1).toString());
                    return this;
                }
                if (row == 1) {
                    this.setBackground(colorD);
                    if (table.getValueAt(1, 1) != null) {
                        this.setText(table.getValueAt(1, 1).toString());
                    }
                    return this;
                }
                if (row == 2) {
                    this.setBackground(colorL);
                    this.setText(table.getValueAt(2, 1).toString());
                    return this;
                }
                if (row == 3) {
                    this.setBackground(colorD);
                    this.setText(" ");
                    return this;
                }


            }
            this.setBackground(colorD);
            this.setText(" ");
            return this;
        }
    }
}
