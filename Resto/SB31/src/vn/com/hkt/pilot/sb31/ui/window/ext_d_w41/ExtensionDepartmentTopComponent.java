/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.pilot.sb31.ui.window.ext_d_w41;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IDepartmentBN;
import vn.com.hkt.basic.api.ISystemSotfwareBN;
import vn.com.hkt.pilot.department.viewer.api.HelpTutorialDepartment;
import vn.com.hkt.pilot.sb31.deparment.extW41.entity.DepartmentExt_W41;
import vn.com.hkt.pilot.sb31.department.extW41.dao.DepartmentExtW41_DAO;
import vn.com.hkt.pilot.department.viewer.api.IDepartmentExtCreater;
import vn.com.hkt.pilot.enterprise.viewer.api.IEnableTable;
import vn.com.hkt.pilot.enterprise.viewer.api.IGetObject;
import vn.com.hkt.pilot.enterprise.viewer.api.ResetCookie;
import vn.com.hkt.pilot.entities.Department;
import vn.com.hkt.pilot.entities.system.SystemSoftware;
import vn.com.hkt.pilot.identity.entitiy.api.IEntity;
import vn.com.hkt.pilot.sb31.deparment.extW41.entity.ProjectStatus;
import vn.com.hkt.pilot.sb31.department.extW41.dao.ProjectStatusBN;
import vn.com.hkt.pilot.ui.colortable.StripedTableCellRenderer;
import vn.com.hkt.pilot.sb31.ui.panel.ext_d_w41.ExtDepartmentW41Cell;
import vn.com.hkt.pilot.sb31.ui.panel.ext_d_w41.SB31_W41_Panel;
import vn.com.hkt.pilot.toobar.api.IResetFontSize;
import vn.com.hkt.ui.main.ui.api.creater.ISaveExtention;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.ui.window.ext_d_w41//ExtensionDepartment//EN",
autostore = false)
@TopComponent.Description(preferredID = "ExtensionDepartmentTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.ui.window.ext_d_w41.ExtensionDepartmentTopComponent")
@ActionReference(path = " " /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ExtensionDepartmentAction",
preferredID = "ExtensionDepartmentTopComponent")
@ServiceProvider(service = IDepartmentExtCreater.class)
public final class ExtensionDepartmentTopComponent extends TopComponent implements IDepartmentExtCreater,
        ISaveExtention, IEnableTable, IResetFontSize, IGetObject {

    private SB31_W41_Panel extensionDepartmentPanel;
    private int idDepartment = 0;
    private DepartmentExtW41_DAO departmentDAO;
    private int size;
    private String font;
    private ISystemSotfwareBN sotfwareBN;
    private List<SystemSoftware> listS;
    private ExtDepartmentW41Cell cell;

    public ExtensionDepartmentTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ExtensionDepartmentTopComponent.class, "CTL_ExtensionDepartmentTopComponent"));
        setToolTipText(NbBundle.getMessage(ExtensionDepartmentTopComponent.class, "HINT_ExtensionDepartmentTopComponent"));
        sotfwareBN = Lookup.getDefault().lookup(ISystemSotfwareBN.class);
        listS = new ArrayList<SystemSoftware>();
        cell = new ExtDepartmentW41Cell();
        extensionDepartmentPanel = new SB31_W41_Panel();
        departmentDAO = new DepartmentExtW41_DAO();
        extensionDepartmentPanel.getTableExtensionE().addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public JPanel getDepartmentExtViewer() {
        return this.extensionDepartmentPanel;
    }

    @Override
    public Lookup getDepartmentExtViewerLookup() {
        cell.loadCombo();
        extensionDepartmentPanel.getCell().loadCombo();
        return null;
    }

    @Override
    public double getLevelNumber() {
        return 3.11;
    }

    @Override
    public IEntity save() {

        if (idDepartment == 0) {
            return null;
        }
        int stateD = 0;
        ProjectStatus projectStatus;
        try {
            projectStatus = (ProjectStatus) extensionDepartmentPanel.getTableExtensionE().getValueAt(0, 1);
            stateD = projectStatus.getId();
        } catch (Exception ex) {
            stateD = 0;
        }
        String mayin;
        String motaghichu = extensionDepartmentPanel.getTableExtensionE().getValueAt(3, 1).toString();
        if (extensionDepartmentPanel.getTableExtensionE().getValueAt(0, 3) != null) {
            mayin = extensionDepartmentPanel.getTableExtensionE().getValueAt(0, 3).toString();
        } else {
            mayin = " ";
        }
        String tiendo = extensionDepartmentPanel.getTableExtensionE().getValueAt(3, 3).toString();

        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        Calendar c3 = Calendar.getInstance();
        Calendar c4 = Calendar.getInstance();

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Date d1 = new Date();
        Date d2 = new Date();
        Date d3 = new Date();
        Date d4 = new Date();

        try {
            String dkTrienKhai = extensionDepartmentPanel.getTableExtensionE().getValueAt(1, 1).toString();
            d1 = sdf.parse(dkTrienKhai);
            c1.setTime(d1);
        } catch (Exception e) {
            d1 = null;
        }
        try {
            String dkHoanThanh = extensionDepartmentPanel.getTableExtensionE().getValueAt(2, 1).toString();
            d2 = sdf.parse(dkHoanThanh);
            c2.setTime(d2);
        } catch (Exception e) {
            d2 = null;
        }
        try {
            String daTrienKhai = extensionDepartmentPanel.getTableExtensionE().getValueAt(1, 3).toString();
            d3 = sdf.parse(daTrienKhai);
            c3.setTime(d3);
        } catch (Exception e) {
            d3 = null;
        }
        try {
            String daHoanThanh = extensionDepartmentPanel.getTableExtensionE().getValueAt(2, 3).toString();
            d4 = sdf.parse(daHoanThanh);
            c4.setTime(d4);
        } catch (Exception e) {
            d4 = null;
        }

        DepartmentExt_W41 bean = departmentDAO.getByObjectId(String.valueOf(idDepartment));
        if (bean == null) {
            bean = new DepartmentExt_W41();
        }
        bean.setDepartmentIdActual(idDepartment);
        bean.setStateDepartmentIdActual(stateD);
        if (d1 != null) {
            bean.setDeploymentDate(c1);
        }
        if (d2 != null) {
            bean.setDeployedDate(c2);
        }
        if (d3 != null) {
            bean.setFinishDate(c3);
        }
        if (d4 != null) {
            bean.setFinishedDate(c4);
        }
        bean.setDescribe(motaghichu);
        bean.setProgress(tiendo);
        bean.setPrinterName(mayin);

        departmentDAO.update(bean);
        return bean;

    }

    @Override
    public void reset() {
        idDepartment = 0;
        extensionDepartmentPanel.reset();
        extensionDepartmentPanel.getTableExtensionE().getColumnModel().getColumn(1).setCellEditor(cell);
        extensionDepartmentPanel.getTableExtensionE().getColumnModel().getColumn(3).setCellEditor(cell);

    }

    // Liên thông font cỡ chữ, màu
    @Override
    public void resetFont() {
        listS = sotfwareBN.selectAll();
        size = extensionDepartmentPanel.getTableExtensionE().getFont().getSize();
        font = listS.get(0).getFont().getFontName();
        extensionDepartmentPanel.getTableExtensionE().setFont(new Font(font, 0, size));
    }

    @Override
    public void resetColorRowTable() {
        listS = sotfwareBN.selectAll();
        Color colorL = new Color(listS.get(0).getColorLight().getRed(), listS.get(0).getColorLight().getGreen(), listS.get(0).getColorLight().getBlue());
        Color colorD = new Color(listS.get(0).getColorDark().getRed(), listS.get(0).getColorDark().getGreen(), listS.get(0).getColorDark().getBlue());
        StripedTableCellRenderer.installInColumn(extensionDepartmentPanel.getTableExtensionE(), colorL, null, colorD, null);
        extensionDepartmentPanel.getTableExtensionE().repaint();
    }

    @Override
    public void resetSize() {
        listS = sotfwareBN.selectAll();
        font = extensionDepartmentPanel.getTableExtensionE().getFont().getFontName();
        size = listS.get(0).getSizeWord();
        extensionDepartmentPanel.getTableExtensionE().setFont(new Font(font, 0, size));

    }

    @Override
    public void resetColorWord() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorWord().getRed(), listS.get(0).getColorWord().getGreen(), listS.get(0).getColorWord().getBlue());
        extensionDepartmentPanel.getTableExtensionE().setForeground(color);
        extensionDepartmentPanel.getTableExtensionE().repaint();
    }

    @Override
    public void resetColorTitle() {
//        listS = sotfwareBN.selectAll();
//        Color color = new Color(listS.get(0).getColorTitle().getRed(), listS.get(0).getColorTitle().getGreen(), listS.get(0).getColorTitle().getBlue());
//        extensionDepartmentPanel.getTableExtensionE().getTableHeader().setForeground(color);
//        extensionDepartmentPanel.getTableExtensionE().repaint();
    }

    @Override
    public void resetColorMouse() {
        listS = sotfwareBN.selectAll();
        Color color = new Color(listS.get(0).getColorMouseClick().getRed(), listS.get(0).getColorMouseClick().getGreen(), listS.get(0).getColorMouseClick().getBlue());
        extensionDepartmentPanel.getTableExtensionE().setSelectionBackground(color);
        extensionDepartmentPanel.getTableExtensionE().repaint();
    }

    @Override
    public void getObject(String id) {
        IDepartmentBN departmentBN = Lookup.getDefault().lookup(IDepartmentBN.class);
        Department department;
        try {
            department = departmentBN.getByObjectId(id);
            if (department == null) {
                return;
            }
        } catch (Exception ex) {
            return;
        }

        try {
            DepartmentExt_W41 bean = departmentDAO.getByObjectId(String.valueOf(department.getId()));
            resultEvent(bean);
        } catch (Exception ex) {
        }
    }

    private void resultEvent(DepartmentExt_W41 bean) {
        try {
            extensionDepartmentPanel.getTableExtensionE().setValueAt(bean.getStateDepartmentIdActual(), 0, 1);
            extensionDepartmentPanel.getTableExtensionE().setValueAt("", 0, 3);

            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            String deploymentDate = "";
            String deployedDate = "";
            String finishDate = "";
            String finishedDate = "";
            try {
                Calendar c1 = bean.getDeploymentDate();
                deploymentDate = sdf.format(c1.getTime());
            } catch (Exception ex) {
                deployedDate = "";
            }
            try {
                Calendar c2 = bean.getDeployedDate();
                deployedDate = sdf.format(c2.getTime());
            } catch (Exception ex) {
                deployedDate = "";
            }
            try {
                Calendar c3 = bean.getFinishDate();
                finishDate = sdf.format(c3.getTime());
            } catch (Exception ex) {
                finishDate = "";
            }
            try {
                Calendar c4 = bean.getFinishedDate();
                finishedDate = sdf.format(c4.getTime());
            } catch (Exception ex) {
                finishedDate = "";
            }

            ProjectStatus projectStatus;
            try {
                projectStatus = new ProjectStatusBN().getById(bean.getStateDepartmentIdActual());
            } catch (Exception ex) {
                projectStatus = null;
            }
            if (projectStatus != null) extensionDepartmentPanel.getTableExtensionE().setValueAt(projectStatus, 0, 1);
            extensionDepartmentPanel.getTableExtensionE().setValueAt("", 0, 3);
            extensionDepartmentPanel.getTableExtensionE().setValueAt(deploymentDate, 1, 1);
            extensionDepartmentPanel.getTableExtensionE().setValueAt(deployedDate, 1, 3);
            extensionDepartmentPanel.getTableExtensionE().setValueAt(finishDate, 2, 1);
            extensionDepartmentPanel.getTableExtensionE().setValueAt(finishedDate, 2, 3);
            extensionDepartmentPanel.getTableExtensionE().setValueAt(bean.getDescribe(), 3, 1);
            extensionDepartmentPanel.getTableExtensionE().setValueAt(bean.getProgress(), 3, 3);

            extensionDepartmentPanel.getTableExtensionE().getColumnModel().getColumn(1).setCellEditor(new ExtDepartmentW41Cell());
            extensionDepartmentPanel.getTableExtensionE().getColumnModel().getColumn(3).setCellEditor(new ExtDepartmentW41Cell());
        } catch (Exception ex) {
        }
    }
    JTable temp = new JTable();

    private void tableMousePressed(MouseEvent evt) {
        SB31Tutorial sB31Tutorial = new SB31Tutorial();
        double k = 0;
        temp = extensionDepartmentPanel.getTableExtensionE();
        JTable table = (JTable) evt.getSource();
        String str1[] = {"", sB31Tutorial.getDuKienTrienKhai().getText(), sB31Tutorial.getDuKienHoanThanh().getText(),
            sB31Tutorial.getMoTaGhiChu().getText()};
        String str2[] = {"", sB31Tutorial.getDaTrienKhai().getText(), sB31Tutorial.getDaHoanThanh().getText(),
            sB31Tutorial.getTienDo().getText()};
        if (table == temp) {
            if (temp.getSelectedRow() == 0 && temp.getSelectedColumn() == 1) {
                addFormEditID(1.01, "");// combo box
            }
            for (int i = 1; i < str1.length; i++) {
                if (temp.getSelectedRow() == i && temp.getSelectedColumn() == 1) {
                    k = (double) (1 + 0.1 * i + 0.01 * 1);
                    k = Math.round(k * 1000) * 1.0 / 1000;
                    addFormEditID(k, str1[i]);
                }
                if (temp.getSelectedRow() == i && temp.getSelectedColumn() == 3) {
                    k = (double) (1 + 0.1 * i + 0.01 * 3);
                    k = Math.round(k * 1000) * 1.0 / 1000;
                    addFormEditID(k, str2[i]);
                }
            }
        }
        // Reset select table
        Collection<? extends ResetCookie> allResetCookie = Lookup.getDefault().lookupAll(ResetCookie.class);
        for (ResetCookie rc : allResetCookie) {
            try {
                rc.resetSelectTable(this.getLevelNumber());
            } catch (IOException ex) {
            }
        }

    }

    private void addFormEditID(double k, String str) {
        Collection<? extends HelpTutorialDepartment> allSave = Lookup.getDefault().lookupAll(HelpTutorialDepartment.class);
        for (HelpTutorialDepartment editCookie : allSave) {
            editCookie.getTutorial(k, str);
        }
    }

    @Override
    public void enableTable(boolean ok) throws IOException {
        extensionDepartmentPanel.getTableExtensionE().setEnabled(ok);
    }

    @Override
    public List<JTable> getTables() {
        List<JTable> lt = new ArrayList<JTable>();
        lt.add(extensionDepartmentPanel.getTableExtensionE());
        return lt;
    }

    @Override
    public void setEntity(IEntity entity) {
        idDepartment = entity.getId();
    }
}
